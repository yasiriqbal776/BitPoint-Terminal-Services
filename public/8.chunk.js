webpackJsonpac__name_([8],{

/***/ "./node_modules/d3/d3.js":
/***/ function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {
  var d3 = {
    version: "3.5.17"
  };
  var d3_arraySlice = [].slice, d3_array = function(list) {
    return d3_arraySlice.call(list);
  };
  var d3_document = this.document;
  function d3_documentElement(node) {
    return node && (node.ownerDocument || node.document || node).documentElement;
  }
  function d3_window(node) {
    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
  }
  if (d3_document) {
    try {
      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
    } catch (e) {
      d3_array = function(list) {
        var i = list.length, array = new Array(i);
        while (i--) array[i] = list[i];
        return array;
      };
    }
  }
  if (!Date.now) Date.now = function() {
    return +new Date();
  };
  if (d3_document) {
    try {
      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
    } catch (error) {
      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
      d3_element_prototype.setAttribute = function(name, value) {
        d3_element_setAttribute.call(this, name, value + "");
      };
      d3_element_prototype.setAttributeNS = function(space, local, value) {
        d3_element_setAttributeNS.call(this, space, local, value + "");
      };
      d3_style_prototype.setProperty = function(name, value, priority) {
        d3_style_setProperty.call(this, name, value + "", priority);
      };
    }
  }
  d3.ascending = d3_ascending;
  function d3_ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
  d3.descending = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
    }
    return a;
  };
  d3.max = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
    }
    return a;
  };
  d3.extent = function(array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }
    return [ a, c ];
  };
  function d3_number(x) {
    return x === null ? NaN : +x;
  }
  function d3_numeric(x) {
    return !isNaN(x);
  }
  d3.sum = function(array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
    } else {
      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
    }
    return s;
  };
  d3.mean = function(array, f) {
    var s = 0, n = array.length, a, i = -1, j = n;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
    }
    if (j) return s / j;
  };
  d3.quantile = function(values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function(array, f) {
    var numbers = [], n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
    }
    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
  };
  d3.variance = function(array, f) {
    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
    if (arguments.length === 1) {
      while (++i < n) {
        if (d3_numeric(a = d3_number(array[i]))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    } else {
      while (++i < n) {
        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    }
    if (j > 1) return s / (j - 1);
  };
  d3.deviation = function() {
    var v = d3.variance.apply(this, arguments);
    return v ? Math.sqrt(v) : v;
  };
  function d3_bisector(compare) {
    return {
      left: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
        }
        return lo;
      }
    };
  }
  var d3_bisect = d3_bisector(d3_ascending);
  d3.bisectLeft = d3_bisect.left;
  d3.bisect = d3.bisectRight = d3_bisect.right;
  d3.bisector = function(f) {
    return d3_bisector(f.length === 1 ? function(d, x) {
      return d3_ascending(f(d), x);
    } : f);
  };
  d3.shuffle = function(array, i0, i1) {
    if ((m = arguments.length) < 3) {
      i1 = array.length;
      if (m < 2) i0 = 0;
    }
    var m = i1 - i0, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
    }
    return array;
  };
  d3.permute = function(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--) permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function(array) {
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
    return pairs;
  };
  d3.transpose = function(matrix) {
    if (!(n = matrix.length)) return [];
    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {
      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
        row[j] = matrix[j][i];
      }
    }
    return transpose;
  };
  function d3_transposeLength(d) {
    return d.length;
  }
  d3.zip = function() {
    return d3.transpose(arguments);
  };
  d3.keys = function(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  };
  d3.values = function(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  };
  d3.entries = function(map) {
    var entries = [];
    for (var key in map) entries.push({
      key: key,
      value: map[key]
    });
    return entries;
  };
  d3.merge = function(arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n) j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function(start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity) throw new Error("infinite range");
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1) k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    for (var key in properties) {
      Object.defineProperty(ctor.prototype, key, {
        value: properties[key],
        enumerable: false
      });
    }
  }
  d3.map = function(object, f) {
    var map = new d3_Map();
    if (object instanceof d3_Map) {
      object.forEach(function(key, value) {
        map.set(key, value);
      });
    } else if (Array.isArray(object)) {
      var i = -1, n = object.length, o;
      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
    } else {
      for (var key in object) map.set(key, object[key]);
    }
    return map;
  };
  function d3_Map() {
    this._ = Object.create(null);
  }
  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
  d3_class(d3_Map, {
    has: d3_map_has,
    get: function(key) {
      return this._[d3_map_escape(key)];
    },
    set: function(key, value) {
      return this._[d3_map_escape(key)] = value;
    },
    remove: d3_map_remove,
    keys: d3_map_keys,
    values: function() {
      var values = [];
      for (var key in this._) values.push(this._[key]);
      return values;
    },
    entries: function() {
      var entries = [];
      for (var key in this._) entries.push({
        key: d3_map_unescape(key),
        value: this._[key]
      });
      return entries;
    },
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
    }
  });
  function d3_map_escape(key) {
    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
  }
  function d3_map_unescape(key) {
    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
  }
  function d3_map_has(key) {
    return d3_map_escape(key) in this._;
  }
  function d3_map_remove(key) {
    return (key = d3_map_escape(key)) in this._ && delete this._[key];
  }
  function d3_map_keys() {
    var keys = [];
    for (var key in this._) keys.push(d3_map_unescape(key));
    return keys;
  }
  function d3_map_size() {
    var size = 0;
    for (var key in this._) ++size;
    return size;
  }
  function d3_map_empty() {
    for (var key in this._) return false;
    return true;
  }
  d3.nest = function() {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [ object ]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function(keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function(keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length) return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function(key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function(a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function(array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function(array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function(d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function(order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function(f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function(array) {
    var set = new d3_Set();
    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
    return set;
  };
  function d3_Set() {
    this._ = Object.create(null);
  }
  d3_class(d3_Set, {
    has: d3_map_has,
    add: function(key) {
      this._[d3_map_escape(key += "")] = true;
      return key;
    },
    remove: d3_map_remove,
    values: d3_map_keys,
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key));
    }
  });
  d3.behavior = {};
  function d3_identity(d) {
    return d;
  }
  d3.rebind = function(target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function() {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object) return name;
    name = name.charAt(0).toUpperCase() + name.slice(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object) return prefixName;
    }
  }
  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
  function d3_noop() {}
  d3.dispatch = function() {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {}
  d3_dispatch.prototype.on = function(type, listener) {
    var i = type.indexOf("."), name = "";
    if (i >= 0) {
      name = type.slice(i + 1);
      type = type.slice(0, i);
    }
    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null) for (type in this) {
        if (this.hasOwnProperty(type)) this[type].on(name, null);
      }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
      return dispatch;
    }
    event.on = function(name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2) return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener) listeners.push(listenerByName.set(name, {
        on: listener
      }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent) e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function(thiz, argumentz) {
      return function(e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function(s) {
    return s.replace(d3_requote_re, "\\$&");
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function(object, prototype) {
    object.__proto__ = prototype;
  } : function(object, prototype) {
    for (var property in prototype) object[property] = prototype[property];
  };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function(s, n) {
    return n.querySelector(s);
  }, d3_selectAll = function(s, n) {
    return n.querySelectorAll(s);
  }, d3_selectMatches = function(n, s) {
    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
    d3_selectMatches = function(n, s) {
      return d3_selectMatcher.call(n, s);
    };
    return d3_selectMatches(n, s);
  };
  if (typeof Sizzle === "function") {
    d3_select = function(s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = Sizzle;
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function() {
    return d3.select(d3_document.documentElement);
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function(selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsXhtml = "http://www.w3.org/1999/xhtml";
  var d3_nsPrefix = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: d3_nsXhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function(name) {
      var i = name.indexOf(":"), prefix = name;
      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name) this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, " ");
  }
  d3_selectionPrototype.classed = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
        if (value = node.classList) {
          while (++i < n) if (!value.contains(name[i])) return false;
        } else {
          value = node.getAttribute("class");
          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
        }
        return true;
      }
      for (value in name) this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
  }
  function d3_selection_classes(name) {
    return (name + "").trim().split(/^|\s+/);
  }
  function d3_selection_classed(name, value) {
    name = d3_selection_classes(name).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n) name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n) name[i](this, x);
    }
    return typeof value === "function" ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function(node, value) {
      if (c = node.classList) return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute("class") || "";
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
      } else {
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
      }
    };
  }
  d3_selectionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2) {
        var node = this.node();
        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
      }
      priority = "";
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") return this.node()[name];
      for (value in name) this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null) delete this[name]; else this[name] = x;
    }
    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    } : value == null ? function() {
      this.textContent = "";
    } : function() {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    } : value == null ? function() {
      this.innerHTML = "";
    } : function() {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function(name) {
    name = d3_selection_creator(name);
    return this.select(function() {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    function create() {
      var document = this.ownerDocument, namespace = this.namespaceURI;
      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);
    }
    function createNS() {
      return this.ownerDocument.createElementNS(name.space, name.local);
    }
    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
  }
  d3_selectionPrototype.insert = function(name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function() {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function() {
    return this.each(d3_selectionRemove);
  };
  function d3_selectionRemove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
  }
  d3_selectionPrototype.data = function(value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
        for (i = -1; ++i < n; ) {
          if (node = group[i]) {
            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
              exitNodes[i] = node;
            } else {
              nodeByKeyValue.set(keyValue, node);
            }
            keyValues[i] = keyValue;
          }
        }
        for (i = -1; ++i < m; ) {
          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          } else if (node !== true) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          }
          nodeByKeyValue.set(keyValue, true);
        }
        for (i = -1; ++i < n; ) {
          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0; ) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (;i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (;i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === "function") {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function() {
      return enter;
    };
    update.exit = function() {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return {
      __data__: data
    };
  }
  d3_selectionPrototype.datum = function(value) {
    return arguments.length ? this.property("__data__", value) : this.property("__data__");
  };
  d3_selectionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function() {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function() {
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function(comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length) comparator = d3_ascending;
    return function(a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function(callback) {
    return d3_selection_each(this, function(node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i]) callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function(callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function() {
    return !this.node();
  };
  d3_selectionPrototype.node = function() {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node) return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function() {
    var n = 0;
    d3_selection_each(this, function() {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m; ) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function(name, before) {
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function(d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0) j0 = j, i0 = 0;
      if (i >= i0) i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n) ;
      return node;
    };
  }
  d3.select = function(node) {
    var group;
    if (typeof node === "string") {
      group = [ d3_select(node, d3_document) ];
      group.parentNode = d3_document.documentElement;
    } else {
      group = [ node ];
      group.parentNode = d3_documentElement(node);
    }
    return d3_selection([ group ]);
  };
  d3.selectAll = function(nodes) {
    var group;
    if (typeof nodes === "string") {
      group = d3_array(d3_selectAll(nodes, d3_document));
      group.parentNode = d3_document.documentElement;
    } else {
      group = d3_array(nodes);
      group.parentNode = null;
    }
    return d3_selection([ group ]);
  };
  d3_selectionPrototype.on = function(type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== "string") {
        if (n < 2) listener = false;
        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2) return (n = this.node()["__on" + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
    if (i > 0) type = type.slice(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter) type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  });
  if (d3_document) {
    d3_selection_onFilters.forEach(function(k) {
      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
    });
  }
  function d3_selection_onListener(listener, argumentz) {
    return function(e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function(e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect, d3_event_dragId = 0;
  function d3_event_dragSuppress(node) {
    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
    if (d3_event_dragSelect == null) {
      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
    }
    if (d3_event_dragSelect) {
      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = "none";
    }
    return function(suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
      if (suppressClick) {
        var off = function() {
          w.on(click, null);
        };
        w.on(click, function() {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function(container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    if (e.changedTouches) e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0) {
        var window = d3_window(container);
        if (window.scrollX || window.scrollY) {
          svg = d3.select("body").append("svg").style({
            position: "absolute",
            top: 0,
            left: 0,
            margin: 0,
            padding: 0,
            border: "none"
          }, "important");
          var ctm = svg[0][0].getScreenCTM();
          d3_mouse_bug44083 = !(ctm.f || ctm.e);
          svg.remove();
        }
      }
      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
      point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [ point.x, point.y ];
    }
    var rect = container.getBoundingClientRect();
    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
  }
  d3.touch = function(container, touches, identifier) {
    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
      if ((touch = touches[i]).identifier === identifier) {
        return d3_mousePoint(container, touch);
      }
    }
  };
  d3.behavior.drag = function() {
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
    function drag() {
      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
    }
    function dragstart(id, position, subject, move, end) {
      return function() {
        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
        if (origin) {
          dragOffset = origin.apply(that, arguments);
          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
        } else {
          dragOffset = [ 0, 0 ];
        }
        dispatch({
          type: "dragstart"
        });
        function moved() {
          var position1 = position(parent, dragId), dx, dy;
          if (!position1) return;
          dx = position1[0] - position0[0];
          dy = position1[1] - position0[1];
          dragged |= dx | dy;
          position0 = position1;
          dispatch({
            type: "drag",
            x: position1[0] + dragOffset[0],
            y: position1[1] + dragOffset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          if (!position(parent, dragId)) return;
          dragSubject.on(move + dragName, null).on(end + dragName, null);
          dragRestore(dragged);
          dispatch({
            type: "dragend"
          });
        }
      };
    }
    drag.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, "on");
  };
  function d3_behavior_dragTouchId() {
    return d3.event.changedTouches[0].identifier;
  }
  d3.touches = function(container, touches) {
    if (arguments.length < 2) touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function(touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_cross2d(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }
  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
  d3.interpolateZoom = function(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < ε2) {
      S = Math.log(w1 / w0) / ρ;
      i = function(t) {
        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / ρ;
      i = function(t) {
        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
      };
    }
    i.duration = S * 1e3;
    return i;
  };
  d3.behavior.zoom = function() {
    var view = {
      x: 0,
      y: 0,
      k: 1
    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
    if (!d3_behavior_zoomWheel) {
      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return d3.event.wheelDelta;
      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
        return -d3.event.detail;
      }, "MozMousePixelScroll");
    }
    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
    }
    zoom.event = function(g) {
      g.each(function() {
        var dispatch = event.of(this, arguments), view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.zoom", function() {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(dispatch);
          }).tween("zoom:zoom", function() {
            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
            return function(t) {
              var l = i(t), k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(dispatch);
            };
          }).each("interrupt.zoom", function() {
            zoomended(dispatch);
          }).each("end.zoom", function() {
            zoomended(dispatch);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(dispatch);
          zoomed(dispatch);
          zoomended(dispatch);
        }
      });
    };
    zoom.translate = function(_) {
      if (!arguments.length) return [ view.x, view.y ];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function(_) {
      if (!arguments.length) return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: null
      };
      scaleTo(+_);
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function(_) {
      if (!arguments.length) return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.center = function(_) {
      if (!arguments.length) return center;
      center = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.size = function(_) {
      if (!arguments.length) return size;
      size = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.duration = function(_) {
      if (!arguments.length) return duration;
      duration = +_;
      return zoom;
    };
    zoom.x = function(z) {
      if (!arguments.length) return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function(z) {
      if (!arguments.length) return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    function location(p) {
      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
    }
    function point(l) {
      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
    }
    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);
      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }
    function zoomTo(that, p, l, k) {
      that.__chart__ = {
        x: view.x,
        y: view.y,
        k: view.k
      };
      scaleTo(Math.pow(2, k));
      translateTo(center0 = p, l);
      that = d3.select(that);
      if (duration > 0) that = that.transition().duration(duration);
      that.call(zoom.event);
    }
    function rescale() {
      if (x1) x1.domain(x0.range().map(function(x) {
        return (x - view.x) / view.k;
      }).map(x0.invert));
      if (y1) y1.domain(y0.range().map(function(y) {
        return (y - view.y) / view.k;
      }).map(y0.invert));
    }
    function zoomstarted(dispatch) {
      if (!zooming++) dispatch({
        type: "zoomstart"
      });
    }
    function zoomed(dispatch) {
      rescale();
      dispatch({
        type: "zoom",
        scale: view.k,
        translate: [ view.x, view.y ]
      });
    }
    function zoomended(dispatch) {
      if (!--zooming) dispatch({
        type: "zoomend"
      }), center0 = null;
    }
    function mousedowned() {
      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
      d3_selection_interrupt.call(that);
      zoomstarted(dispatch);
      function moved() {
        dragged = 1;
        translateTo(d3.mouse(that), location0);
        zoomed(dispatch);
      }
      function ended() {
        subject.on(mousemove, null).on(mouseup, null);
        dragRestore(dragged);
        zoomended(dispatch);
      }
    }
    function touchstarted() {
      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
      started();
      zoomstarted(dispatch);
      subject.on(mousedown, null).on(touchstart, started);
      function relocate() {
        var touches = d3.touches(that);
        scale0 = view.k;
        touches.forEach(function(t) {
          if (t.identifier in locations0) locations0[t.identifier] = location(t);
        });
        return touches;
      }
      function started() {
        var target = d3.event.target;
        d3.select(target).on(touchmove, moved).on(touchend, ended);
        targets.push(target);
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(), now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0];
            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
            d3_eventPreventDefault();
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }
      function moved() {
        var touches = d3.touches(that), p0, l0, p1, l1;
        d3_selection_interrupt.call(that);
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0) break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(dispatch);
      }
      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        d3.selectAll(targets).on(zoomName, null);
        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(dispatch);
      }
    }
    function mousewheeled() {
      var dispatch = event.of(this, arguments);
      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
      mousewheelTimer = setTimeout(function() {
        mousewheelTimer = null;
        zoomended(dispatch);
      }, 50);
      d3_eventPreventDefault();
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
      translateTo(center0, translate0);
      zoomed(dispatch);
    }
    function dblclicked() {
      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
    }
    return d3.rebind(zoom, event, "on");
  };
  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
  d3.color = d3_color;
  function d3_color() {}
  d3_color.prototype.toString = function() {
    return this.rgb() + "";
  };
  d3.hsl = d3_hsl;
  function d3_hsl(h, s, l) {
    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
  }
  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
  d3_hslPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function() {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360) h -= 360; else if (h < 0) h += 360;
      if (h < 60) return m1 + (m2 - m1) * h / 60;
      if (h < 180) return m2;
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = d3_hcl;
  function d3_hcl(h, c, l) {
    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
  }
  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
  d3_hclPrototype.brighter = function(k) {
    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function(k) {
    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function() {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h)) h = 0;
    if (isNaN(c)) c = 0;
    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = d3_lab;
  function d3_lab(l, a, b) {
    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
  }
  var d3_lab_K = 18;
  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_lab.prototype = new d3_color();
  d3_labPrototype.brighter = function(k) {
    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function(k) {
    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function() {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
  }
  d3.rgb = d3_rgb;
  function d3_rgb(r, g, b) {
    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
  }
  function d3_rgbNumber(value) {
    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + "";
  }
  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
  d3_rgbPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b) return new d3_rgb(i, i, i);
    if (r && r < i) r = i;
    if (g && g < i) g = i;
    if (b && b < i) b = i;
    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
  };
  d3_rgbPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_rgb(k * this.r, k * this.g, k * this.b);
  };
  d3_rgbPrototype.hsl = function() {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function() {
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0, g = 0, b = 0, m1, m2, color;
    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
    if (m1) {
      m2 = m1[2].split(",");
      switch (m1[1]) {
       case "hsl":
        {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }

       case "rgb":
        {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (color = d3_rgb_names.get(format)) {
      return rgb(color.r, color.g, color.b);
    }
    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
      if (format.length === 4) {
        r = (color & 3840) >> 4;
        r = r >> 4 | r;
        g = color & 240;
        g = g >> 4 | g;
        b = color & 15;
        b = b << 4 | b;
      } else if (format.length === 7) {
        r = (color & 16711680) >> 16;
        g = (color & 65280) >> 8;
        b = color & 255;
      }
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < .5 ? d / (max + min) : d / (2 - max - min);
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function(key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === "function" ? v : function() {
      return v;
    };
  }
  d3.functor = d3_functor;
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function(url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
      mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function(event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers[name];
      if (value == null) delete headers[name]; else headers[name] = value + "";
      return xhr;
    };
    xhr.mimeType = function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return xhr;
    };
    xhr.responseType = function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function(value) {
      response = value;
      return xhr;
    };
    [ "get", "post" ].forEach(function(method) {
      xhr[method] = function() {
        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
      };
    });
    xhr.send = function(method, data, callback) {
      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
      if (responseType != null) request.responseType = responseType;
      if (callback != null) xhr.on("error", callback).on("load", function(request) {
        callback(null, request);
      });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function() {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, "on");
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function(error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  function d3_xhrHasResponse(request) {
    var type = request.responseType;
    return type && type !== "text" ? request.response : request.responseText;
  }
  d3.dsv = function(delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
      xhr.row = function(_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr;
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function(request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function(text, f) {
      var o;
      return dsv.parseRows(text, function(row, i) {
        if (o) return o(row, i - 1);
        var a = new Function("d", "return {" + row.map(function(name, i) {
          return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
        o = f ? function(row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function(text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N) return EOF;
        if (eol) return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.slice(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10) eol = true; else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10) ++I, ++k;
          } else if (c !== delimiterCode) continue;
          return text.slice(j, I - k);
        }
        return text.slice(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && (a = f(a, n++)) == null) continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function(rows) {
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function(row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
        return fields.map(function(field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join("\n");
    };
    dsv.formatRows = function(rows) {
      return rows.map(formatRow).join("\n");
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(",", "text/csv");
  d3.tsv = d3.dsv("	", "text/tab-separated-values");
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
    setTimeout(callback, 17);
  };
  d3.timer = function() {
    d3_timer.apply(this, arguments);
  };
  function d3_timer(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    var time = then + delay, timer = {
      c: callback,
      t: time,
      n: null
    };
    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
    return timer;
  }
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function() {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_mark() {
    var now = Date.now(), timer = d3_timer_queueHead;
    while (timer) {
      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
      timer = timer.n;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.c) {
        if (t1.t < time) time = t1.t;
        t1 = (t0 = t1).n;
      } else {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  d3.round = function(x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {
    var i = 0;
    if (value = +value) {
      if (value < 0) value *= -1;
      if (precision) value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function(d) {
        return d / k;
      } : function(d) {
        return d * k;
      },
      symbol: d
    };
  }
  function d3_locale_numberFormat(locale) {
    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = locale_grouping[j = (j + 1) % locale_grouping.length];
      }
      return t.reverse().join(locale_thousands);
    } : d3_identity;
    return function(specifier) {
      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
      if (precision) precision = +precision.substring(1);
      if (zfill || fill === "0" && align === "=") {
        zfill = fill = "0";
        align = "=";
      }
      switch (type) {
       case "n":
        comma = true;
        type = "g";
        break;

       case "%":
        scale = 100;
        suffix = "%";
        type = "f";
        break;

       case "p":
        scale = 100;
        suffix = "%";
        type = "r";
        break;

       case "b":
       case "o":
       case "x":
       case "X":
        if (symbol === "#") prefix = "0" + type.toLowerCase();

       case "c":
        exponent = false;

       case "d":
        integer = true;
        precision = 0;
        break;

       case "s":
        scale = -1;
        type = "r";
        break;
      }
      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
      if (type == "r" && !precision) type = "g";
      if (precision != null) {
        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
      }
      type = d3_format_types.get(type) || d3_format_typeDefault;
      var zcomma = zfill && comma;
      return function(value) {
        var fullSuffix = suffix;
        if (integer && value % 1) return "";
        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
        if (scale < 0) {
          var unit = d3.formatPrefix(value, precision);
          value = unit.scale(value);
          fullSuffix = unit.symbol + suffix;
        } else {
          value *= scale;
        }
        value = type(value, precision);
        var i = value.lastIndexOf("."), before, after;
        if (i < 0) {
          var j = exponent ? value.lastIndexOf("e") : -1;
          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
        } else {
          before = value.substring(0, i);
          after = locale_decimal + value.substring(i + 1);
        }
        if (!zfill && comma) before = formatGroup(before, Infinity);
        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
        negative += prefix;
        value = before + after;
        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
      };
    };
  }
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function(x) {
      return x.toString(2);
    },
    c: function(x) {
      return String.fromCharCode(x);
    },
    o: function(x) {
      return x.toString(8);
    },
    x: function(x) {
      return x.toString(16);
    },
    X: function(x) {
      return x.toString(16).toUpperCase();
    },
    g: function(x, p) {
      return x.toPrecision(p);
    },
    e: function(x, p) {
      return x.toExponential(p);
    },
    f: function(x, p) {
      return x.toFixed(p);
    },
    r: function(x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }
  });
  function d3_format_typeDefault(x) {
    return x + "";
  }
  var d3_time = d3.time = {}, d3_date = Date;
  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function() {
      return this._.getUTCDate();
    },
    getDay: function() {
      return this._.getUTCDay();
    },
    getFullYear: function() {
      return this._.getUTCFullYear();
    },
    getHours: function() {
      return this._.getUTCHours();
    },
    getMilliseconds: function() {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function() {
      return this._.getUTCMinutes();
    },
    getMonth: function() {
      return this._.getUTCMonth();
    },
    getSeconds: function() {
      return this._.getUTCSeconds();
    },
    getTime: function() {
      return this._.getTime();
    },
    getTimezoneOffset: function() {
      return 0;
    },
    valueOf: function() {
      return this._.valueOf();
    },
    setDate: function() {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function() {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function() {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function() {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function() {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function() {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function() {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function() {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function() {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt)) times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1) times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function(date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function(date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function(date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function(date) {
    var day = new d3_date(2e3, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function(date, offset) {
    date.setDate(date.getDate() + offset);
  }, function(date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function(date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
  };
  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function(date) {
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
      return date;
    }, function(date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
    });
    d3_time[day + "s"] = interval.range;
    d3_time[day + "s"].utc = interval.utc.range;
    d3_time[day + "OfYear"] = function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;
  function d3_locale_timeFormat(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    function d3_time_format(template) {
      var n = template.length;
      function format(date) {
        var string = [], i = -1, j = 0, c, p, f;
        while (++i < n) {
          if (template.charCodeAt(i) === 37) {
            string.push(template.slice(j, i));
            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
            string.push(c);
            j = i + 1;
          }
        }
        string.push(template.slice(j, i));
        return string.join("");
      }
      format.parse = function(string) {
        var d = {
          y: 1900,
          m: 0,
          d: 1,
          H: 0,
          M: 0,
          S: 0,
          L: 0,
          Z: null
        }, i = d3_time_parse(d, template, string, 0);
        if (i != string.length) return null;
        if ("p" in d) d.H = d.H % 12 + d.p * 12;
        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {
          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
          date.setFullYear(d.y, 0, 1);
          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
        } else date.setFullYear(d.y, d.m, d.d);
        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
        return localZ ? date._ : date;
      };
      format.toString = function() {
        return template;
      };
      return format;
    }
    function d3_time_parse(date, template, string, j) {
      var c, p, t, i = 0, n = template.length, m = string.length;
      while (i < n) {
        if (j >= m) return -1;
        c = template.charCodeAt(i++);
        if (c === 37) {
          t = template.charAt(i++);
          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
          if (!p || (j = p(date, string, j)) < 0) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    d3_time_format.utc = function(template) {
      var local = d3_time_format(template);
      function format(date) {
        try {
          d3_date = d3_date_utc;
          var utc = new d3_date();
          utc._ = date;
          return local(utc);
        } finally {
          d3_date = Date;
        }
      }
      format.parse = function(string) {
        try {
          d3_date = d3_date_utc;
          var date = local.parse(string);
          return date && date._;
        } finally {
          d3_date = Date;
        }
      };
      format.toString = local.toString;
      return format;
    };
    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
    locale_periods.forEach(function(p, i) {
      d3_time_periodLookup.set(p.toLowerCase(), i);
    });
    var d3_time_formats = {
      a: function(d) {
        return locale_shortDays[d.getDay()];
      },
      A: function(d) {
        return locale_days[d.getDay()];
      },
      b: function(d) {
        return locale_shortMonths[d.getMonth()];
      },
      B: function(d) {
        return locale_months[d.getMonth()];
      },
      c: d3_time_format(locale_dateTime),
      d: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      e: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      H: function(d, p) {
        return d3_time_formatPad(d.getHours(), p, 2);
      },
      I: function(d, p) {
        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
      },
      j: function(d, p) {
        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
      },
      L: function(d, p) {
        return d3_time_formatPad(d.getMilliseconds(), p, 3);
      },
      m: function(d, p) {
        return d3_time_formatPad(d.getMonth() + 1, p, 2);
      },
      M: function(d, p) {
        return d3_time_formatPad(d.getMinutes(), p, 2);
      },
      p: function(d) {
        return locale_periods[+(d.getHours() >= 12)];
      },
      S: function(d, p) {
        return d3_time_formatPad(d.getSeconds(), p, 2);
      },
      U: function(d, p) {
        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
      },
      w: function(d) {
        return d.getDay();
      },
      W: function(d, p) {
        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
      },
      x: d3_time_format(locale_date),
      X: d3_time_format(locale_time),
      y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
      },
      Y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
      },
      Z: d3_time_zone,
      "%": function() {
        return "%";
      }
    };
    var d3_time_parsers = {
      a: d3_time_parseWeekdayAbbrev,
      A: d3_time_parseWeekday,
      b: d3_time_parseMonthAbbrev,
      B: d3_time_parseMonth,
      c: d3_time_parseLocaleFull,
      d: d3_time_parseDay,
      e: d3_time_parseDay,
      H: d3_time_parseHour24,
      I: d3_time_parseHour24,
      j: d3_time_parseDayOfYear,
      L: d3_time_parseMilliseconds,
      m: d3_time_parseMonthNumber,
      M: d3_time_parseMinutes,
      p: d3_time_parseAmPm,
      S: d3_time_parseSeconds,
      U: d3_time_parseWeekNumberSunday,
      w: d3_time_parseWeekdayNumber,
      W: d3_time_parseWeekNumberMonday,
      x: d3_time_parseLocaleDate,
      X: d3_time_parseLocaleTime,
      y: d3_time_parseYear,
      Y: d3_time_parseFullYear,
      Z: d3_time_parseZone,
      "%": d3_time_parseLiteralPercent
    };
    function d3_time_parseWeekdayAbbrev(date, string, i) {
      d3_time_dayAbbrevRe.lastIndex = 0;
      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseWeekday(date, string, i) {
      d3_time_dayRe.lastIndex = 0;
      var n = d3_time_dayRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonthAbbrev(date, string, i) {
      d3_time_monthAbbrevRe.lastIndex = 0;
      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonth(date, string, i) {
      d3_time_monthRe.lastIndex = 0;
      var n = d3_time_monthRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseLocaleFull(date, string, i) {
      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
    }
    function d3_time_parseLocaleDate(date, string, i) {
      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
    }
    function d3_time_parseLocaleTime(date, string, i) {
      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
    }
    function d3_time_parseAmPm(date, string, i) {
      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
      return n == null ? -1 : (date.p = n, i);
    }
    return d3_time_format;
  }
  var d3_time_formatPads = {
    "-": "",
    _: " ",
    "0": "0"
  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function d3_time_formatRe(names) {
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n) map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
    i + 5) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2e3);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function d3_time_formatMulti(formats) {
    var n = formats.length, i = -1;
    while (++i < n) formats[i][0] = this(formats[i][0]);
    return function(date) {
      var i = 0, f = formats[i];
      while (!f[1](date)) f = formats[++i];
      return f[0](date);
    };
  }
  d3.locale = function(locale) {
    return {
      numberFormat: d3_locale_numberFormat(locale),
      timeFormat: d3_locale_timeFormat(locale)
    };
  };
  var d3_locale_enUS = d3.locale({
    decimal: ".",
    thousands: ",",
    grouping: [ 3 ],
    currency: [ "$", "" ],
    dateTime: "%a %b %e %X %Y",
    date: "%m/%d/%Y",
    time: "%H:%M:%S",
    periods: [ "AM", "PM" ],
    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
  });
  d3.format = d3_locale_enUS.numberFormat;
  d3.geo = {};
  function d3_adder() {}
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function(y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
    },
    reset: function() {
      this.s = this.t = 0;
    },
    valueOf: function() {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function(object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function(feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function(object, listener) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function(object, listener) {
      listener.sphere();
    },
    Point: function(object, listener) {
      object = object.coordinates;
      listener.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
    },
    LineString: function(object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function(object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function(object, listener) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
    }
  };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function(object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function() {
      d3_geo_areaSum += 4 * π;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function() {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
    }
  };
  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function(λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
      sinφ0 = Math.sin(φ);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function() {
      nextPoint(λ00, φ00);
    };
  }
  function d3_geo_cartesian(spherical) {
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function() {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        dλSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function() {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
        range[0] = λ0, range[1] = λ1;
      }
    };
    function point(λ, φ) {
      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
      if (φ < φ0) φ0 = φ;
      if (φ > φ1) φ1 = φ;
    }
    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1) φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0) φ0 = φi;
        } else {
          if (φ < φ0) φ0 = φ;
          if (φ > φ1) φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0) λ0 = λ;
            if (λ > λ1) λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }
    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function(feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
    };
  }();
  d3.geo.centroid = function(object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2) return [ NaN, NaN ];
    }
    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };
  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function() {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length) return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0], points, point;
    while (1) {
      var current = start, isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function(rotate, listener) {
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
          if (segments.length) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
          } else if (clipStartInside) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function() {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };
      function point(λ, φ) {
        var point = rotate(λ, φ);
        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
      }
      function pointLine(λ, φ) {
        var point = rotate(λ, φ);
        line.point(point[0], point[1]);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
      function pointRing(λ, φ) {
        ring.push([ λ, φ ]);
        var point = rotate(λ, φ);
        ringListener.point(point[0], point[1]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          if (n > 0) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            while (++i < n) listener.point((point = segment[i])[0], point[1]);
            listener.lineEnd();
          }
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function() {
        lines.push(line = []);
      },
      point: function(λ, φ) {
        line.push([ λ, φ ]);
      },
      lineEnd: d3_noop,
      buffer: function() {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
    return {
      lineStart: function() {
        listener.lineStart();
        clean = 1;
      },
      point: function(λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
        if (abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function() {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * halfπ;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (abs(from[0] - to[0]) > ε) {
      var s = from[0] < to[0] ? π : -π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m) continue;
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {
        if (j === m) j = 0;
        point = ring[j];
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++) break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
    }
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(λ, φ) {
          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) listener.lineEnd();
          point0 = null;
        },
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two) return q;
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [ q, d3_geo_spherical(q1) ];
      }
    }
    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius, code = 0;
      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
      return code;
    }
  }
  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function(line) {
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      if (t0 > 0) line.a = {
        x: ax + t0 * dx,
        y: ay + t0 * dy
      };
      if (t1 < 1) line.b = {
        x: ax + t1 * dx,
        y: ay + t1 * dy
      };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1e9;
  d3.geo.clipExtent = function() {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
      stream: function(output) {
        if (stream) stream.valid = false;
        stream = clip(output);
        stream.valid = true;
        return stream;
      },
      extent: function(_) {
        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
        if (stream) stream.valid = false, stream = null;
        return clipExtent;
      }
    };
    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
  };
  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function(listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          listener = bufferListener;
          segments = [];
          polygon = [];
          clean = true;
        },
        polygonEnd: function() {
          listener = listener_;
          segments = d3.merge(segments);
          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
          if (inside || visible) {
            listener.polygonStart();
            if (inside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (visible) {
              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
            }
            listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
            } else {
              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (pointVisible(x, y)) listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;
      function lineStart() {
        clip.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_) listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
        var v = pointVisible(x, y);
        if (polygon) ring.push([ x, y ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_) listener.point(x, y); else {
            var l = {
              a: {
                x: x_,
                y: y_
              },
              b: {
                x: x,
                y: y
              }
            };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v) listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }
  function d3_geo_conic(projectAt) {
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
    p.parallels = function(_) {
      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = ρ0 - y;
      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function() {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function() {
    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
  };
  d3.geo.albersUsa = function() {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
    var point, pointStream = {
      point: function(x, y) {
        point = [ x, y ];
      }
    }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function(x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function() {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function() {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function() {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function() {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function() {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * .35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_pathAreaPolygon = 0;
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
    }
  };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function(x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function() {
        if (buffer.length) {
          var result = buffer.join("");
          buffer = [];
          return result;
        }
      }
    };
    function point(x, y) {
      buffer.push("M", x, ",", y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push("M", x, ",", y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push("L", x, ",", y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push("Z");
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function() {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };
    function point(x, y) {
      context.moveTo(x + pointRadius, y);
      context.arc(x, y, pointRadius, 0, τ);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }
    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }
    function resampleRecursive(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function(_) {
      if (!arguments.length) return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function() {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function(object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function(object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
    };
    path.bounds = function(object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
    };
    path.projection = function(_) {
      if (!arguments.length) return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function(x, y) {
      return project([ x * d3_degrees, y * d3_degrees ]);
    });
    return function(stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function(methods) {
    return {
      stream: function(stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods) transform[k] = methods[k];
        return transform;
      }
    };
  };
  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function(x, y) {
      this.stream.point(x, y);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };
  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function() {
        stream.sphere();
      },
      lineStart: function() {
        stream.lineStart();
      },
      lineEnd: function() {
        stream.lineEnd();
      },
      polygonStart: function() {
        stream.polygonStart();
      },
      polygonEnd: function() {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function() {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
      x = project(x, y);
      return [ x[0] * k + δx, δy - x[1] * k ];
    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [ point[0] * k + δx, δy - point[1] * k ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
    }
    projection.stream = function(output) {
      if (stream) stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function(_) {
      if (!arguments.length) return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function(_) {
      if (!arguments.length) return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
      return invalidate();
    };
    projection.scale = function(_) {
      if (!arguments.length) return k;
      k = +_;
      return reset();
    };
    projection.translate = function(_) {
      if (!arguments.length) return [ x, y ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function(_) {
      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function(_) {
      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, "precision");
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream) stream.valid = false, stream = null;
      return projection;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function(x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }
  function d3_geo_equirectangular(λ, φ) {
    return [ λ, φ ];
  }
  (d3.geo.equirectangular = function() {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function(rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_identityRotation(λ, φ) {
    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;
  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }
  function d3_geo_forwardRotationλ(δλ) {
    return function(λ, φ) {
      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
    };
  }
  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }
  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
    function rotation(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
    }
    rotation.invert = function(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
    };
    return rotation;
  }
  d3.geo.circle = function() {
    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: "Polygon",
        coordinates: [ ring ]
      };
    }
    circle.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return circle;
    };
    circle.angle = function(x) {
      if (!arguments.length) return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function(_) {
      if (!arguments.length) return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function(from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to) from += direction * τ;
      } else {
        from = radius + direction * τ;
        to = radius - .5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function(a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
        return abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
        return abs(y % DY) > ε;
      }).map(y));
    }
    graticule.lines = function() {
      return lines().map(function(coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
      };
    };
    graticule.extent = function(_) {
      if (!arguments.length) return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function(_) {
      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function(_) {
      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function(_) {
      if (!arguments.length) return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function(_) {
      if (!arguments.length) return [ DX, DY ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function(_) {
      if (!arguments.length) return [ dx, dy ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function(x) {
      return y.map(function(y) {
        return [ x, y ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function(y) {
      return x.map(function(x) {
        return [ x, y ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function() {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: "LineString",
        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
      };
    }
    greatArc.distance = function() {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function(_) {
      if (!arguments.length) return source;
      source = _, source_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.target = function(_) {
      if (!arguments.length) return target;
      target = _, target_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.precision = function() {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function(source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
    } : function() {
      return [ x0 * d3_degrees, y0 * d3_degrees ];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function(object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function(λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function() {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
    }
    azimuthal.invert = function(x, y) {
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
    return Math.sqrt(2 / (1 + cosλcosφ));
  }, function(ρ) {
    return 2 * Math.asin(ρ / 2);
  });
  (d3.geo.azimuthalEqualArea = function() {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
    var c = Math.acos(cosλcosφ);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function() {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), t = function(φ) {
      return Math.tan(π / 4 + φ / 2);
    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n) return d3_geo_mercator;
    function forward(λ, φ) {
      if (F > 0) {
        if (φ < -halfπ + ε) φ = -halfπ + ε;
      } else {
        if (φ > halfπ - ε) φ = halfπ - ε;
      }
      var ρ = F / Math.pow(t(φ), n);
      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function() {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
    if (abs(n) < ε) return d3_geo_equirectangular;
    function forward(λ, φ) {
      var ρ = G - φ;
      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = G - y;
      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function() {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / cosλcosφ;
  }, Math.atan);
  (d3.geo.gnomonic = function() {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(λ, φ) {
    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
  }
  d3_geo_mercator.invert = function(x, y) {
    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function() {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function() {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function(_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(), t = translate();
          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function() {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function() {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function() {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / (1 + cosλcosφ);
  }, function(ρ) {
    return 2 * Math.atan(ρ);
  });
  (d3.geo.stereographic = function() {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(λ, φ) {
    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
  }
  d3_geo_transverseMercator.invert = function(x, y) {
    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
  };
  (d3.geo.transverseMercator = function() {
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
    projection.center = function(_) {
      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
    };
    projection.rotate = function(_) {
      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
      [ _[0], _[1], _[2] - 90 ]);
    };
    return rotate([ 0, 0, 90 ]);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  function d3_geom_pointX(d) {
    return d[0];
  }
  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function(vertices) {
    var x = d3_geom_pointX, y = d3_geom_pointY;
    if (arguments.length) return hull(vertices);
    function hull(data) {
      if (data.length < 3) return [];
      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
      for (i = 0; i < n; i++) {
        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
      }
      points.sort(d3_geom_hullOrder);
      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
      return polygon;
    }
    hull.x = function(_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function(_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullUpper(points) {
    var n = points.length, hull = [ 0, 1 ], hs = 2;
    for (var i = 2; i < n; i++) {
      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
      hull[hs++] = i;
    }
    return hull.slice(0, hs);
  }
  function d3_geom_hullOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
  }
  d3.geom.polygon = function(coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function() {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * .5;
  };
  d3_geom_polygonPrototype.centroid = function(k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length) k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [ x * k, y * k ];
  };
  d3_geom_polygonPrototype.clip = function(subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed) subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [ x1 + ua * x21, y1 + ua * y21 ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }
  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }
  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }
  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
      x: x,
      y: y
    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiAddBeach(site) {
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > ε) node = node.L; else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > ε) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -ε) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -ε) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc) return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
      x: (cy * hb - by * hc) / d + ax,
      y: (bx * hc - cx * hb) / d + ay
    };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
    if (!pby2) return rfocx;
    var lArc = arc.P;
    if (!lArc) return -Infinity;
    site = lArc.site;
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
    if (!plby2) return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }
  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function() {
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };
  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare()) continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
            x: x0,
            y: abs(x2 - x0) < ε ? y2 : y1
          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
            x: abs(y2 - y1) < ε ? x2 : x1,
            y: y1
          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
            x: x1,
            y: abs(x2 - x1) < ε ? y2 : y0
          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
            x: abs(y2 - y0) < ε ? x2 : x0,
            y: y0
          } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }
  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }
  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }
  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc) return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite) return;
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -ε2) return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null, node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L) node = node.L; else {
          before = node.P;
          break;
        }
      } else {
        if (node.R) node = node.R; else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before) d3_geom_voronoiFirstCircle = circle;
  }
  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }
  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }
  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb) return true;
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;
      if (lx > rx) {
        if (!va) va = {
          x: fx,
          y: y0
        }; else if (va.y >= y1) return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va) va = {
          x: fx,
          y: y1
        }; else if (va.y < y0) return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va) va = {
            x: (y0 - fb) / fm,
            y: y0
          }; else if (va.y >= y1) return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va) va = {
            x: (y1 - fb) / fm,
            y: y1
          }; else if (va.y < y0) return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va) va = {
            x: x0,
            y: fm * x0 + fb
          }; else if (va.x >= x1) return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va) va = {
            x: x1,
            y: fm * x1 + fb
          }; else if (va.x < x0) return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }
  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
    return edge;
  }
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a, vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function() {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function() {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };
  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }
  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function(after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L) after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node) parent.L = next; else parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node) node.U = parent;
      if (red) return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._) break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node) node.C = false;
    }
  };
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }
  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L) node = node.L;
    return node;
  }
  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
    var diagram = {
      cells: d3_geom_voronoiCells,
      edges: d3_geom_voronoiEdges
    };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
    return diagram;
  }
  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function(points) {
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
    if (points) return voronoi(points);
    function voronoi(data) {
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
          var s = e.start();
          return [ s.x, s.y ];
        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }
    function sites(data) {
      return data.map(function(d, i) {
        return {
          x: Math.round(fx(d, i) / ε) * ε,
          y: Math.round(fy(d, i) / ε) * ε,
          i: i
        };
      });
    }
    voronoi.links = function(data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
        return edge.l && edge.r;
      }).map(function(edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function(data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function(_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function(_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function(vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat) for (i = 0; i < n; ++i) {
          d = data[i];
          if (d.x < x1_) x1_ = d.x;
          if (d.y < y1_) y1_ = d.y;
          if (d.x > x2_) x2_ = d.x;
          if (d.y > y2_) y2_ = d.y;
          xs.push(d.x);
          ys.push(d.y);
        } else for (i = 0; i < n; ++i) {
          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
          if (x_ < x1_) x1_ = x_;
          if (y_ < y1_) y1_ = y_;
          if (x_ > x2_) x2_ = x_;
          if (y_ > y2_) y2_ = y_;
          xs.push(x_);
          ys.push(y_);
        }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y)) return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < .01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right) x1 = xm; else x2 = xm;
        if (below) y1 = ym; else y2 = ym;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function(d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function(f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      root.find = function(point) {
        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function(_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function(_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function(_) {
      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
      y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function(_) {
      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
    var minDistance2 = Infinity, closestPoint;
    (function find(node, x1, y1, x2, y2) {
      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
      if (point = node.point) {
        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
        if (distance2 < minDistance2) {
          var distance = Math.sqrt(minDistance2 = distance2);
          x0 = x - distance, y0 = y - distance;
          x3 = x + distance, y3 = y + distance;
          closestPoint = point;
        }
      }
      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
        if (node = children[i & 3]) switch (i & 3) {
         case 0:
          find(node, x1, y1, xm, ym);
          break;

         case 1:
          find(node, xm, y1, x2, ym);
          break;

         case 2:
          find(node, x1, ym, xm, y2);
          break;

         case 3:
          find(node, xm, ym, x2, y2);
          break;
        }
      }
    })(root, x0, y0, x3, y3);
    return closestPoint;
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function(t) {
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    a = +a, b = +b;
    return function(t) {
      return a * (1 - t) + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + "", b = b + "";
    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs; else s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i]) s[i] += bm; else s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({
          i: i,
          x: d3_interpolateNumber(am, bm)
        });
      }
      bi = d3_interpolate_numberB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs; else s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
      return b(t) + "";
    }) : function() {
      return b;
    } : (b = q.length, function(t) {
      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    });
  }
  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
    return f;
  }
  d3.interpolators = [ function(a, b) {
    var t = typeof b;
    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
  } ];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
    for (;i < na; ++i) c[i] = a[i];
    for (;i < nb; ++i) c[i] = b[i];
    return function(t) {
      for (i = 0; i < n0; ++i) c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function() {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function() {
      return d3_ease_quad;
    },
    cubic: function() {
      return d3_ease_cubic;
    },
    sin: function() {
      return d3_ease_sin;
    },
    exp: function() {
      return d3_ease_exp;
    },
    circle: function() {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function() {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    "in": d3_identity,
    out: d3_ease_reverse,
    "in-out": d3_ease_reflect,
    "out-in": function(f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function(name) {
    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function(t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function(t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function(t) {
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0) return 0;
    if (t >= 1) return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
  }
  function d3_ease_poly(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * halfπ);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2) p = .45;
    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
    return function(t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
    };
  }
  function d3_ease_back(s) {
    if (!s) s = 1.70158;
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function(t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function(t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function(string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
    return (d3.transform = function(string) {
      if (string != null) {
        g.setAttribute("transform", string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [ m.e, m.f ];
    this.scale = [ kx, ky ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function() {
    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransformPop(s) {
    return s.length ? s.pop() + "," : "";
  }
  function d3_interpolateTranslate(ta, tb, s, q) {
    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
      var i = s.push("translate(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push("translate(" + tb + ")");
    }
  }
  function d3_interpolateRotate(ra, rb, s, q) {
    if (ra !== rb) {
      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
    }
  }
  function d3_interpolateSkew(wa, wb, s, q) {
    if (wa !== wb) {
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
    }
  }
  function d3_interpolateScale(ka, kb, s, q) {
    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] !== 1 || kb[1] !== 1) {
      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
    }
  }
  function d3_interpolateTransform(a, b) {
    var s = [], q = [];
    a = d3.transform(a), b = d3.transform(b);
    d3_interpolateTranslate(a.translate, b.translate, s, q);
    d3_interpolateRotate(a.rotate, b.rotate, s, q);
    d3_interpolateSkew(a.skew, b.skew, s, q);
    d3_interpolateScale(a.scale, b.scale, s, q);
    a = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return (x - a) / b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return Math.max(0, Math.min(1, (x - a) / b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function() {
    return function(links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function() {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function(a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function(d, i) {
          d.sort(function(a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (τ - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + "-" + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: groupSums[di]
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords) resort();
    }
    function resort() {
      chords.sort(function(a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function(x) {
      if (!arguments.length) return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function(x) {
      if (!arguments.length) return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function(x) {
      if (!arguments.length) return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function(x) {
      if (!arguments.length) return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function(x) {
      if (!arguments.length) return sortChords;
      sortChords = x;
      if (chords) resort();
      return chord;
    };
    chord.chords = function() {
      if (!chords) relayout();
      return chords;
    };
    chord.groups = function() {
      if (!groups) relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function() {
    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function(quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
          if (dw * dw / theta2 < dn) {
            if (dn < chargeDistance2) {
              var k = quad.charge / dn;
              node.px -= dx * k;
              node.py -= dy * k;
            }
            return true;
          }
          if (quad.point && dn && dn < chargeDistance2) {
            var k = quad.pointCharge / dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function() {
      if ((alpha *= .99) < .005) {
        timer = null;
        event.end({
          type: "end",
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k) while (++i < n) {
          o = nodes[i];
          o.x += (x - o.x) * k;
          o.y += (y - o.y) * k;
        }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: "tick",
        alpha: alpha
      });
    };
    force.nodes = function(x) {
      if (!arguments.length) return nodes;
      nodes = x;
      return force;
    };
    force.links = function(x) {
      if (!arguments.length) return links;
      links = x;
      return force;
    };
    force.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return force;
    };
    force.linkDistance = function(x) {
      if (!arguments.length) return linkDistance;
      linkDistance = typeof x === "function" ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function(x) {
      if (!arguments.length) return linkStrength;
      linkStrength = typeof x === "function" ? x : +x;
      return force;
    };
    force.friction = function(x) {
      if (!arguments.length) return friction;
      friction = +x;
      return force;
    };
    force.charge = function(x) {
      if (!arguments.length) return charge;
      charge = typeof x === "function" ? x : +x;
      return force;
    };
    force.chargeDistance = function(x) {
      if (!arguments.length) return Math.sqrt(chargeDistance2);
      chargeDistance2 = x * x;
      return force;
    };
    force.gravity = function(x) {
      if (!arguments.length) return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function(x) {
      if (!arguments.length) return Math.sqrt(theta2);
      theta2 = x * x;
      return force;
    };
    force.alpha = function(x) {
      if (!arguments.length) return alpha;
      x = +x;
      if (alpha) {
        if (x > 0) {
          alpha = x;
        } else {
          timer.c = null, timer.t = NaN, timer = null;
          event.end({
            type: "end",
            alpha: alpha = 0
          });
        }
      } else if (x > 0) {
        event.start({
          type: "start",
          alpha: alpha = x
        });
        timer = d3_timer(force.tick);
      }
      return force;
    };
    force.start = function() {
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == "number") o.source = nodes[o.source];
        if (typeof o.target == "number") o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x)) o.x = position("x", w);
        if (isNaN(o.y)) o.y = position("y", h);
        if (isNaN(o.px)) o.px = o.x;
        if (isNaN(o.py)) o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i], j = -1, l = candidates.length, x;
        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function() {
      return force.alpha(.1);
    };
    force.stop = function() {
      return force.alpha(0);
    };
    force.drag = function() {
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;
      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, "on");
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null) continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - .5;
        quad.point.y += Math.random() - .5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
  d3.layout.hierarchy = function() {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function hierarchy(root) {
      var stack = [ root ], nodes = [], node;
      root.depth = 0;
      while ((node = stack.pop()) != null) {
        nodes.push(node);
        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
          var n, childs, child;
          while (--n >= 0) {
            stack.push(child = childs[n]);
            child.parent = node;
            child.depth = node.depth + 1;
          }
          if (value) node.value = 0;
          node.children = childs;
        } else {
          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
          delete node.children;
        }
      }
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var childs, parent;
        if (sort && (childs = node.children)) childs.sort(sort);
        if (value && (parent = node.parent)) parent.value += node.value;
      });
      return nodes;
    }
    hierarchy.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function(x) {
      if (!arguments.length) return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function(root) {
      if (value) {
        d3_layout_hierarchyVisitBefore(root, function(node) {
          if (node.children) node.value = 0;
        });
        d3_layout_hierarchyVisitAfter(root, function(node) {
          var parent;
          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
          if (parent = node.parent) parent.value += node.value;
        });
      }
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, "sort", "children", "value");
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyVisitBefore(node, callback) {
    var nodes = [ node ];
    while ((node = nodes.pop()) != null) {
      callback(node);
      if ((children = node.children) && (n = children.length)) {
        var n, children;
        while (--n >= 0) nodes.push(children[n]);
      }
    }
  }
  function d3_layout_hierarchyVisitAfter(node, callback) {
    var nodes = [ node ], nodes2 = [];
    while ((node = nodes.pop()) != null) {
      nodes2.push(node);
      if ((children = node.children) && (n = children.length)) {
        var i = -1, n, children;
        while (++i < n) nodes.push(children[i]);
      }
    }
    while ((node = nodes2.pop()) != null) {
      callback(node);
    }
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function(parent) {
      return (parent.children || []).map(function(child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function() {
    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n) d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function() {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
    function pie(data) {
      var n = data.length, values = data.map(function(d, i) {
        return +value.call(pie, d, i);
      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
        return values[j] - values[i];
      } : function(i, j) {
        return sort(data[i], data[j]);
      });
      index.forEach(function(i) {
        arcs[i] = {
          data: data[i],
          value: v = values[i],
          startAngle: a,
          endAngle: a += v * k + pa,
          padAngle: p
        };
      });
      return arcs;
    }
    pie.value = function(_) {
      if (!arguments.length) return value;
      value = _;
      return pie;
    };
    pie.sort = function(_) {
      if (!arguments.length) return sort;
      sort = _;
      return pie;
    };
    pie.startAngle = function(_) {
      if (!arguments.length) return startAngle;
      startAngle = _;
      return pie;
    };
    pie.endAngle = function(_) {
      if (!arguments.length) return endAngle;
      endAngle = _;
      return pie;
    };
    pie.padAngle = function(_) {
      if (!arguments.length) return padAngle;
      padAngle = _;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function() {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      if (!(n = data.length)) return data;
      var series = data.map(function(d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function(d) {
        return d.map(function(v, i) {
          return [ x.call(stack, v, i), y.call(stack, v, i) ];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var m = series[0].length, n, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function(x) {
      if (!arguments.length) return values;
      values = x;
      return stack;
    };
    stack.order = function(x) {
      if (!arguments.length) return order;
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function(x) {
      if (!arguments.length) return offset;
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return stack;
    };
    stack.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return stack;
    };
    stack.out = function(z) {
      if (!arguments.length) return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    "inside-out": function(data) {
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
        return max[a] - max[b];
      }), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function(data) {
      return d3.range(data.length).reverse();
    },
    "default": d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function(data) {
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o > max) max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function(data) {
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0) o0 = o;
      }
      for (j = 0; j < m; ++j) y0[j] -= o0;
      return y0;
    },
    expand: function(data) {
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j) y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m) y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (;i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function() {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(x) {
      if (!arguments.length) return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function(x) {
      if (!arguments.length) return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function(x) {
      if (!arguments.length) return binner;
      binner = typeof x === "number" ? function(range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function(x) {
      if (!arguments.length) return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n) f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [ d3.min(values), d3.max(values) ];
  }
  d3.layout.pack = function() {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
        return radius;
      };
      root.x = root.y = 0;
      d3_layout_hierarchyVisitAfter(root, function(d) {
        d.r = +r(d.value);
      });
      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r += dr;
        });
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function(_) {
      if (!arguments.length) return size;
      size = _;
      return pack;
    };
    pack.radius = function(_) {
      if (!arguments.length) return radius;
      radius = _ == null || typeof _ === "function" ? _ : +_;
      return pack;
    };
    pack.padding = function(_) {
      if (!arguments.length) return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return .999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length)) return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.tree = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
      d3_layout_hierarchyVisitBefore(root1, secondWalk);
      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
        var left = root0, right = root0, bottom = root0;
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
      return nodes;
    }
    function wrapTree(root0) {
      var root1 = {
        A: null,
        children: [ root0 ]
      }, queue = [ root1 ], node1;
      while ((node1 = queue.pop()) != null) {
        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
          queue.push((children[i] = child = {
            _: children[i],
            parent: node1,
            children: (child = children[i].children) && child.slice() || [],
            A: null,
            a: null,
            z: 0,
            m: 0,
            c: 0,
            s: 0,
            t: null,
            i: i
          }).a = child);
        }
      }
      return root1.children[0];
    }
    function firstWalk(v) {
      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
      if (children.length) {
        d3_layout_treeShift(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }
    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
          vom = d3_layout_treeLeft(vom);
          vop = d3_layout_treeRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !d3_layout_treeRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !d3_layout_treeLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }
    function sizeNode(node) {
      node.x *= size[0];
      node.y = node.depth * size[1];
    }
    tree.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return tree;
    };
    tree.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null ? sizeNode : null;
      return tree;
    };
    tree.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) == null ? null : sizeNode;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(v) {
    var children = v.children;
    return children.length ? children[0] : v.t;
  }
  function d3_layout_treeRight(v) {
    var children = v.children, n;
    return (n = children.length) ? children[n - 1] : v.t;
  }
  function d3_layout_treeMove(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  }
  function d3_layout_treeShift(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  }
  function d3_layout_treeAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }
  d3.layout.cluster = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function(child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function(x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function() {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area)) continue;
        if (r < rmin) rmin = r;
        if (r > rmax) rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy) v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx) v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = root.y = 0;
      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;
      if (stickies) hierarchy.revalue(root);
      scale([ root ], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky) stickies = nodes;
      return nodes;
    }
    treemap.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return treemap;
    };
    treemap.padding = function(x) {
      if (!arguments.length) return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
      padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function(x) {
      if (!arguments.length) return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function(x) {
      if (!arguments.length) return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function(x) {
      if (!arguments.length) return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function(µ, σ) {
      var n = arguments.length;
      if (n < 2) σ = 1;
      if (n < 1) µ = 0;
      return function() {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function() {
      var random = d3.random.normal.apply(d3, arguments);
      return function() {
        return Math.exp(random());
      };
    },
    bates: function(m) {
      var random = d3.random.irwinHall(m);
      return function() {
        return random() / m;
      };
    },
    irwinHall: function(m) {
      return function() {
        for (var s = 0, j = 0; j < m; j++) s += Math.random();
        return s;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [ start, stop ] : [ stop, start ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function(x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function(x) {
        return Math.floor(x / step) * step;
      },
      ceil: function(x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function(x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function() {
    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function(y) {
      return input(y);
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function(x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function(x) {
      if (!arguments.length) return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function() {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
  }
  function d3_scale_linearNice(domain, m) {
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    return domain;
  }
  function d3_scale_linearTickRange(domain, m) {
    if (m == null) m = 10;
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    if (format) {
      var match = d3_format_re.exec(format);
      match.shift();
      if (match[8] === "s") {
        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
        match[8] = "f";
        format = d3.format(match.join(""));
        return function(d) {
          return format(prefix.scale(d)) + prefix.symbol;
        };
      }
      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
      format = match.join("");
    } else {
      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
    }
    return d3.format(format);
  }
  var d3_scale_linearFormatSignificant = {
    s: 1,
    g: 1,
    p: 1,
    r: 1,
    e: 1
  };
  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + .01);
  }
  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
  }
  d3.scale.log = function() {
    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function(x) {
      return pow(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function(_) {
      if (!arguments.length) return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function() {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function() {
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {}
        for (j = ticks.length; ticks[j - 1] > v; j--) {}
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function(n, format) {
      if (!arguments.length) return d3_scale_logFormat;
      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(1, base * n / scale.ticks().length);
      return function(d) {
        var i = d / pow(Math.round(log(d)));
        if (i * base < base - .5) i *= base;
        return i <= k ? format(d) : "";
      };
    };
    scale.copy = function() {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
    floor: function(x) {
      return -Math.ceil(-x);
    },
    ceil: function(x) {
      return -Math.floor(-x);
    }
  };
  d3.scale.pow = function() {
    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function(x) {
      return powb(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function(x) {
      if (!arguments.length) return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function() {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function() {
    return d3.scale.pow().exponent(.5);
  };
  d3.scale.ordinal = function() {
    return d3_scale_ordinal([], {
      t: "range",
      a: [ [] ]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function(i) {
        return start + step * i;
      });
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: "range",
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
      0) : (stop - start) / (domain.length - 1 + padding);
      range = steps(start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: "rangePoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundPoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
      0) : (stop - start) / (domain.length - 1 + padding) | 0;
      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
      rangeBand = 0;
      ranger = {
        t: "rangeRoundPoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse) range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: "rangeBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
      if (reverse) range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: "rangeRoundBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function() {
      return rangeBand;
    };
    scale.rangeExtent = function() {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function() {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function() {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function() {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function() {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function() {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
  d3.scale.quantile = function() {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function() {
      return thresholds;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
    };
    scale.copy = function() {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function() {
    return d3_scale_quantize(0, 1, [ 0, 1 ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function(x) {
      if (!arguments.length) return [ x0, x1 ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [ y, y + 1 / kx ];
    };
    scale.copy = function() {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function() {
    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x) return range[d3.bisect(domain, x)];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };
    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return [ domain[y - 1], domain[y] ];
    };
    scale.copy = function() {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function() {
    return d3_scale_identity([ 0, 1 ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function() {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};
  function d3_zero() {
    return 0;
  }
  d3.svg.arc = function() {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
    function arc() {
      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
        if (!cw) p1 *= -1;
        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
      }
      if (r1) {
        x0 = r1 * Math.cos(a0 + p1);
        y0 = r1 * Math.sin(a0 + p1);
        x1 = r1 * Math.cos(a1 - p1);
        y1 = r1 * Math.sin(a1 - p1);
        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
          var h1 = (a0 + a1) / 2;
          x0 = r1 * Math.cos(h1);
          y0 = r1 * Math.sin(h1);
          x1 = y1 = null;
        }
      } else {
        x0 = y0 = 0;
      }
      if (r0) {
        x2 = r0 * Math.cos(a1 - p0);
        y2 = r0 * Math.sin(a1 - p0);
        x3 = r0 * Math.cos(a0 + p0);
        y3 = r0 * Math.sin(a0 + p0);
        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
          var h0 = (a0 + a1) / 2;
          x2 = r0 * Math.cos(h0);
          y2 = r0 * Math.sin(h0);
          x3 = y3 = null;
        }
      } else {
        x2 = y2 = 0;
      }
      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
        cr = r0 < r1 ^ cw ? 0 : 1;
        var rc1 = rc, rc0 = rc;
        if (da < π) {
          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
        }
        if (x1 != null) {
          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
          if (rc === rc1) {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
          } else {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
          }
        } else {
          path.push("M", x0, ",", y0);
        }
        if (x3 != null) {
          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
          if (rc === rc0) {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          } else {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          }
        } else {
          path.push("L", x2, ",", y2);
        }
      } else {
        path.push("M", x0, ",", y0);
        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
        path.push("L", x2, ",", y2);
        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
      }
      path.push("Z");
      return path.join("");
    }
    function circleSegment(r1, cw) {
      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
    }
    arc.innerRadius = function(v) {
      if (!arguments.length) return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function(v) {
      if (!arguments.length) return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.cornerRadius = function(v) {
      if (!arguments.length) return cornerRadius;
      cornerRadius = d3_functor(v);
      return arc;
    };
    arc.padRadius = function(v) {
      if (!arguments.length) return padRadius;
      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
      return arc;
    };
    arc.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.padAngle = function(v) {
      if (!arguments.length) return padAngle;
      padAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function() {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
      return [ Math.cos(a) * r, Math.sin(a) * r ];
    };
    return arc;
  };
  var d3_svg_arcAuto = "auto";
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  function d3_svg_arcPadAngle(d) {
    return d && d.padAngle;
  }
  function d3_svg_arcSweep(x0, y0, x1, y1) {
    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
  }
  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
  }
  function d3_svg_line(projection) {
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push("M", interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length) segment();
      return segments.length ? segments.join("") : null;
    }
    line.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return line;
    };
    line.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return line;
    };
    line.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return line;
    };
    line.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function() {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    "linear-closed": d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    "step-before": d3_svg_lineStepBefore,
    "step-after": d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    "basis-open": d3_svg_lineBasisOpen,
    "basis-closed": d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    "cardinal-open": d3_svg_lineCardinalOpen,
    "cardinal-closed": d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function(key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.length > 1 ? points.join("L") : points + "Z";
  }
  function d3_svg_lineLinearClosed(points) {
    return points.join("L") + "Z";
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
    if (n > 1) path.push("H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
    return path.join("");
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3) return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push("L", pi);
    return path.join("");
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4) return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < ε) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([ s || 0, m[i] * s || 0 ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function() {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] - halfπ;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
        return x;
      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
        return y;
      } : d3_functor(y1), x, y;
      function segment() {
        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length) segment();
      return segments.length ? segments.join("") : null;
    }
    area.x = function(_) {
      if (!arguments.length) return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function(_) {
      if (!arguments.length) return x0;
      x0 = _;
      return area;
    };
    area.x1 = function(_) {
      if (!arguments.length) return x1;
      x1 = _;
      return area;
    };
    area.y = function(_) {
      if (!arguments.length) return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function(_) {
      if (!arguments.length) return y0;
      y0 = _;
      return area;
    };
    area.y1 = function(_) {
      if (!arguments.length) return y1;
      y1 = _;
      return area;
    };
    area.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return area;
    };
    area.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? "M" : "L";
      return area;
    };
    area.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function() {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function() {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function() {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
    }
    function curve(r0, p0, r1, p1) {
      return "Q 0,0 " + p1;
    }
    chord.radius = function(v) {
      if (!arguments.length) return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function(v) {
      if (!arguments.length) return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function(v) {
      if (!arguments.length) return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function() {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
        x: p0.x,
        y: m
      }, {
        x: p3.x,
        y: m
      }, p3 ];
      p = p.map(projection);
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
    }
    diagonal.source = function(x) {
      if (!arguments.length) return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function(x) {
      if (!arguments.length) return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function(x) {
      if (!arguments.length) return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [ d.x, d.y ];
  }
  d3.svg.diagonal.radial = function() {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function(x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function() {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
      return [ r * Math.cos(a), r * Math.sin(a) ];
    };
  }
  d3.svg.symbol = function() {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function(x) {
      if (!arguments.length) return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function(x) {
      if (!arguments.length) return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return "circle";
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function(size) {
      var r = Math.sqrt(size / 5) / 2;
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },
    diamond: function(size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
    },
    square: function(size) {
      var r = Math.sqrt(size) / 2;
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
    },
    "triangle-down": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
    },
    "triangle-up": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  d3_selectionPrototype.transition = function(name) {
    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
      time: Date.now(),
      ease: d3_ease_cubicInOut,
      delay: 0,
      duration: 250
    };
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_selectionPrototype.interrupt = function(name) {
    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
  };
  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
  function d3_selection_interruptNS(ns) {
    return function() {
      var lock, activeId, active;
      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
        active.timer.c = null;
        active.timer.t = NaN;
        if (--lock.count) delete lock[activeId]; else delete this[ns];
        lock.active += .5;
        active.event && active.event.interrupt.call(this, this.__data__, active.index);
      }
    };
  }
  function d3_transition(groups, ns, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.namespace = ns;
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function(selection, name) {
    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.selectAll = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          transition = node[ns][id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o; ) {
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.namespace, this.id);
  };
  d3_transitionPrototype.tween = function(name, tween) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
    return d3_selection_each(this, tween == null ? function(node) {
      node[ns][id].tween.remove(name);
    } : function(node) {
      node[ns][id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id, ns = groups.namespace;
    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function(node) {
      node[ns][id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function(nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS) this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += "", function() {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += "", function() {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function(nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function(t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function(t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.style(priority, name[priority], value);
        return this;
      }
      priority = "";
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += "", function() {
        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function(t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, "style." + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function(name, tween, priority) {
    if (arguments.length < 3) priority = "";
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
      return f && function(t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween("style." + name, styleTween);
  };
  d3_transitionPrototype.text = function(value) {
    return d3_transition_tween(this, "text", value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null) b = "";
    return function() {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function() {
    var ns = this.namespace;
    return this.each("end.transition", function() {
      var p;
      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].ease;
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function(node) {
      node[ns][id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].delay;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function(node) {
      node[ns][id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].duration;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
    } : (value = Math.max(1, value), function(node) {
      node[ns][id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function(type, listener) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      try {
        d3_transitionInheritId = id;
        d3_selection_each(this, function(node, i, j) {
          d3_transitionInherit = node[ns][id];
          type.call(node, node.__data__, i, j);
        });
      } finally {
        d3_transitionInherit = inherit;
        d3_transitionInheritId = inheritId;
      }
    } else {
      d3_selection_each(this, function(node) {
        var transition = node[ns][id];
        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function() {
    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = node[ns][id0];
          d3_transitionNode(node, i, ns, id1, {
            time: transition.time,
            ease: transition.ease,
            delay: transition.delay + transition.duration,
            duration: transition.duration
          });
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id1);
  };
  function d3_transitionNamespace(name) {
    return name == null ? "__transition__" : "__transition_" + name + "__";
  }
  function d3_transitionNode(node, i, ns, id, inherit) {
    var lock = node[ns] || (node[ns] = {
      active: 0,
      count: 0
    }), transition = lock[id], time, timer, duration, ease, tweens;
    function schedule(elapsed) {
      var delay = transition.delay;
      timer.t = delay + time;
      if (delay <= elapsed) return start(elapsed - delay);
      timer.c = start;
    }
    function start(elapsed) {
      var activeId = lock.active, active = lock[activeId];
      if (active) {
        active.timer.c = null;
        active.timer.t = NaN;
        --lock.count;
        delete lock[activeId];
        active.event && active.event.interrupt.call(node, node.__data__, active.index);
      }
      for (var cancelId in lock) {
        if (+cancelId < id) {
          var cancel = lock[cancelId];
          cancel.timer.c = null;
          cancel.timer.t = NaN;
          --lock.count;
          delete lock[cancelId];
        }
      }
      timer.c = tick;
      d3_timer(function() {
        if (timer.c && tick(elapsed || 1)) {
          timer.c = null;
          timer.t = NaN;
        }
        return 1;
      }, 0, time);
      lock.active = id;
      transition.event && transition.event.start.call(node, node.__data__, i);
      tweens = [];
      transition.tween.forEach(function(key, value) {
        if (value = value.call(node, node.__data__, i)) {
          tweens.push(value);
        }
      });
      ease = transition.ease;
      duration = transition.duration;
    }
    function tick(elapsed) {
      var t = elapsed / duration, e = ease(t), n = tweens.length;
      while (n > 0) {
        tweens[--n].call(node, e);
      }
      if (t >= 1) {
        transition.event && transition.event.end.call(node, node.__data__, i);
        if (--lock.count) delete lock[id]; else delete node[ns];
        return 1;
      }
    }
    if (!transition) {
      time = inherit.time;
      timer = d3_timer(schedule, 0, time);
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        timer: timer,
        delay: inherit.delay,
        duration: inherit.duration,
        ease: inherit.ease,
        index: i
      };
      inherit = null;
      ++lock.count;
    }
  }
  d3.svg.axis = function() {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
    function axis(g) {
      g.each(function() {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
        d3.transition(path));
        tickEnter.append("line");
        tickEnter.append("text");
        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
        if (orient === "bottom" || orient === "top") {
          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
        } else {
          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
        }
        lineEnter.attr(y2, sign * innerTickSize);
        textEnter.attr(y1, sign * tickSpacing);
        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
        if (scale1.rangeBand) {
          var x = scale1, dx = x.rangeBand() / 2;
          scale0 = scale1 = function(d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1, scale0);
        }
        tickEnter.call(tickTransform, scale0, scale1);
        tickUpdate.call(tickTransform, scale1, scale1);
      });
    }
    axis.scale = function(x) {
      if (!arguments.length) return scale;
      scale = x;
      return axis;
    };
    axis.orient = function(x) {
      if (!arguments.length) return orient;
      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function() {
      if (!arguments.length) return tickArguments_;
      tickArguments_ = d3_array(arguments);
      return axis;
    };
    axis.tickValues = function(x) {
      if (!arguments.length) return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function(x) {
      if (!arguments.length) return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function(x) {
      var n = arguments.length;
      if (!n) return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function(x) {
      if (!arguments.length) return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function(x) {
      if (!arguments.length) return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function(x) {
      if (!arguments.length) return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function() {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
    top: 1,
    right: 1,
    bottom: 1,
    left: 1
  };
  function d3_svg_axisX(selection, x0, x1) {
    selection.attr("transform", function(d) {
      var v0 = x0(d);
      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
    });
  }
  function d3_svg_axisY(selection, y0, y1) {
    selection.attr("transform", function(d) {
      var v0 = y0(d);
      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
    });
  }
  d3.svg.brush = function() {
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {
      g.each(function() {
        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
        var background = g.selectAll(".background").data([ 0 ]);
        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
        var resize = g.selectAll(".resize").data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append("g").attr("class", function(d) {
          return "resize " + d;
        }).style("cursor", function(d) {
          return d3_svg_brushCursor[d];
        }).append("rect").attr("x", function(d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr("y", function(d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
        resize.style("display", brush.empty() ? "none" : null);
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments), extent1 = {
          x: xExtent,
          y: yExtent,
          i: xExtentDomain,
          j: yExtentDomain
        }, extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.brush", function() {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({
              type: "brushstart"
            });
          }).tween("brush:brush", function() {
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function(t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: "brush",
                mode: "resize"
              });
            };
          }).each("end.brush", function() {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          });
        } else {
          event_({
            type: "brushstart"
          });
          event_({
            type: "brush",
            mode: "resize"
          });
          event_({
            type: "brushend"
          });
        }
      });
    };
    function redraw(g) {
      g.selectAll(".resize").attr("transform", function(d) {
        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
      });
    }
    function redrawX(g) {
      g.select(".extent").attr("x", xExtent[0]);
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
    }
    function redrawY(g) {
      g.select(".extent").attr("y", yExtent[0]);
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
      if (d3.event.changedTouches) {
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
      } else {
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
      }
      g.interrupt().selectAll("*").interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey) center = origin.slice();
      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
      d3.select("body").style("cursor", eventTarget.style("cursor"));
      event_({
        type: "brushstart"
      });
      brushmove();
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = d3.mouse(target), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: "brush",
            mode: dragging ? "move" : "resize"
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i) yExtentDomain = null; else xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
        d3.select("body").style("cursor", null);
        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
        dragRestore();
        event_({
          type: "brushend"
        });
      }
    }
    brush.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function(z) {
      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
      return brush;
    };
    brush.extent = function(z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0) t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0) t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y) x0 = x0[0], x1 = x1[0];
        xExtentDomain = [ x0, x1 ];
        if (x.invert) x0 = x(x0), x1 = x(x1);
        if (x1 < x0) t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x) y0 = y0[1], y1 = y1[1];
        yExtentDomain = [ y0, y1 ];
        if (y.invert) y0 = y(y0), y1 = y(y1);
        if (y1 < y0) t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
      }
      return brush;
    };
    brush.clear = function() {
      if (!brush.empty()) {
        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function() {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
    };
    return d3.rebind(brush, event, "on");
  };
  var d3_svg_brushCursor = {
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };
  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
  var d3_time_formatUtc = d3_time_format.utc;
  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 1e3) * 1e3);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
  }, function(date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 6e4) * 6e4);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
  }, function(date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function(date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
  }, function(date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function(date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function(date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function(x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    function tickMethod(extent, count) {
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
        return d / 31536e6;
      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function(interval, skip) {
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
      if (method) interval = method[0], skip = method[1];
      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function(date) {
          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function(date) {
          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function(interval, skip) {
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
        range: interval
      }, skip ];
      if (method) interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function() {
      return format;
    };
    scale.copy = function() {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
    return d.getMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getMinutes();
  } ], [ "%I %p", function(d) {
    return d.getHours();
  } ], [ "%a %d", function(d) {
    return d.getDay() && d.getDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getDate() != 1;
  } ], [ "%B", function(d) {
    return d.getMonth();
  } ], [ "%Y", d3_true ] ]);
  var d3_time_scaleMilliseconds = {
    range: function(start, stop, step) {
      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
    },
    floor: d3_identity,
    ceil: d3_identity
  };
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
    return [ m[0].utc, m[1] ];
  });
  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
    return d.getUTCMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getUTCSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getUTCMinutes();
  } ], [ "%I %p", function(d) {
    return d.getUTCHours();
  } ], [ "%a %d", function(d) {
    return d.getUTCDay() && d.getUTCDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getUTCDate() != 1;
  } ], [ "%B", function(d) {
    return d.getUTCMonth();
  } ], [ "%Y", d3_true ] ]);
  d3_time_scaleUtcMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
  };
  d3.text = d3_xhrType(function(request) {
    return request.responseText;
  });
  d3.json = function(url, callback) {
    return d3_xhr(url, "application/json", d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function(url, callback) {
    return d3_xhr(url, "text/html", d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function(request) {
    return request.responseXML;
  });
  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === "object" && module.exports) module.exports = d3; else this.d3 = d3;
}();

/***/ },

/***/ "./node_modules/jQuery-Mapael/js/jquery.mapael.js":
/***/ function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery, Raphael) {/**
*
* Jquery Mapael - Dynamic maps jQuery plugin (based on raphael.js)
* Requires jQuery and raphael.js
*
* Version: 0.7.1 (23-01-2014)
*
* Copyright (c) 2014 Vincent Brouté (http://www.neveldo.fr/mapael)
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php).
*
*/
(function($) {

	"use strict";
	
	$.fn.mapael = function(options) {
		options = $.extend(true, {}, $.fn.mapael.defaultOptions, options);
		
		return this.each(function() {
		
			var $self = $(this)
				, $tooltip = $("<div>").addClass(options.map.tooltip.cssClass).css("display", "none")
				, $container = $('.' + options.map.cssClass, this).empty().append($tooltip)
				, mapConf = $.fn.mapael.maps[options.map.name]
				, paper = new Raphael($container[0], mapConf.width, mapConf.height)
				, elemOptions = {}
				, resizeTO = 0
				, areas = {}
				, plots = {}
				, areaLegend = {}
				, plotLegend = {}
				, id = 0;
			
			options.map.tooltip.css && $tooltip.css(options.map.tooltip.css);
			paper.setViewBox(0, 0, mapConf.width, mapConf.height, false);
			
			// Draw map areas
			for (id in mapConf.elems) {
				elemOptions = $.fn.mapael.getElemOptions(
					options.map.defaultArea
					, (options.areas[id] ? options.areas[id] : {})
					, options.legend.area
				);
				areas[id] = {'mapElem' : paper.path(mapConf.elems[id]).attr(elemOptions.attrs)};
			}
			
			// Init map areas in a second loop (prevent texts to be hidden by map elements)
			for (id in mapConf.elems) {
				elemOptions = $.fn.mapael.getElemOptions(
					options.map.defaultArea
					, (options.areas[id] ? options.areas[id] : {})
					, options.legend.area
				);
				$.fn.mapael.initElem(paper, areas[id], elemOptions, $tooltip, id);
			}
			
			// Draw plots
			for (id in options.plots) {
				plots[id] = $.fn.mapael.drawPlot(id, options, mapConf, paper, $tooltip);
			}
			
			// Enable zoom
			if (options.map.zoom.enabled)
				$.fn.mapael.initZoom($container, paper, mapConf.width, mapConf.height, options.map.zoom);
				
			// Create the legends for areas
			if (options.legend.area.slices && options.legend.area.display)
				areaLegend = $.fn.mapael.createLegend($self, options, 'area', areas, 1);
                
			/**
			* 
			* Update the current map
			* Refresh attributes and tooltips for areas and plots
			* @param updatedOptions options to update for plots and areas
			* @param newPlots new plots to add to the map
			* @param deletedPlotsplots to delete from the map
			* @param opt option for the refresh :
			*  opt.animDuration animation duration in ms (default = 0)
			*  opt.resetAreas true to reset previous areas options
			*  opt.resetPlots true to reset previous plots options
			*  opt.afterUpdate Hook that allows to add custom processing on the map
			*/
			$self.on('update', function(e, updatedOptions, newPlots, deletedPlots, opt) {
				var i = 0
					, id = 0
					, animDuration = 0
					, elemOptions = {}
					, resetHiddenElem = function(el) {
						if(typeof el.hidden != "undefined" && el.hidden == true) {
							$(el.node).trigger('click');
						}
					};
				
				areaLegend.forEach && areaLegend.forEach(resetHiddenElem);
				plotLegend.forEach && plotLegend.forEach(resetHiddenElem);
				
				if (typeof opt != 'undefined') {
					(opt.resetAreas) && (options.areas = {});
					(opt.resetPlots) && (options.plots = {});
					(opt.animDuration) && (animDuration = opt.animDuration);
				}
				
				$.extend(true, options, updatedOptions);
				
				// Delete plots
				if (typeof deletedPlots == 'object') {
					for (;i < deletedPlots.length; i++) {
						if (typeof plots[deletedPlots[i]] != 'undefined') {
							if (animDuration > 0) {
								(function(plot) {
									plot.mapElem.animate({'opacity':0}, animDuration, 'linear', function() {plot.mapElem.remove();});
									if (plot.textElem) {
										plot.textElem.animate({'opacity':0}, animDuration, 'linear', function() {plot.textElem.remove();});
									}
								})(plots[deletedPlots[i]]);
							} else {
								plots[deletedPlots[i]].mapElem.remove();
								if (plots[deletedPlots[i]].textElem) {
									plots[deletedPlots[i]].textElem.remove();
								}
							}
							delete plots[deletedPlots[i]];
						}
					}
				}
				
				// New plots
				if (typeof newPlots == 'object') {
					for (id in newPlots) {
						if (typeof plots[id] == 'undefined') {
							options.plots[id] = newPlots[id];
							plots[id] = $.fn.mapael.drawPlot(id, options, mapConf, paper, $tooltip);
							if (animDuration > 0) {
								plots[id].mapElem.attr({opacity : 0});
								plots[id].textElem.attr({opacity : 0});
								plots[id].mapElem.animate({'opacity': (typeof plots[id].mapElem.originalAttrs.opacity != 'undefined') ? plots[id].mapElem.originalAttrs.opacity : 1}, animDuration);
								plots[id].textElem.animate({'opacity': (typeof plots[id].textElem.originalAttrs.opacity != 'undefined') ? plots[id].textElem.originalAttrs.opacity : 1}, animDuration);
							} 
						}
					}
				}
				
				// Update areas attributes and tooltips
				for (id in areas) {
					elemOptions = $.fn.mapael.getElemOptions(
						options.map.defaultArea
						, (options.areas[id] ? options.areas[id] : {})
						, options.legend.area
					);
					
					$.fn.mapael.updateElem(elemOptions, areas[id], $tooltip, animDuration);
				}
				
				// Update plots attributes and tooltips
				for (id in plots) {
					elemOptions = $.fn.mapael.getElemOptions(
						options.map.defaultPlot
						, (options.plots[id] ? options.plots[id] : {})
						, options.legend.plot
					);
					
					// Update plot size
					if ("square" == elemOptions.type) {
						elemOptions.attrs.width = elemOptions.size;
						elemOptions.attrs.height = elemOptions.size;
						elemOptions.attrs.x = plots[id].mapElem.attrs.x - (elemOptions.size - plots[id].mapElem.attrs.width) / 2;
						elemOptions.attrs.y = plots[id].mapElem.attrs.y - (elemOptions.size - plots[id].mapElem.attrs.height) / 2;
					} else { // Default : circle
						elemOptions.attrs.r = elemOptions.size / 2;
					}
					
					$.fn.mapael.updateElem(elemOptions, plots[id], $tooltip, animDuration);
				}
				
				if( typeof opt != 'undefined' )
					opt.afterUpdate && opt.afterUpdate($self, paper, areas, plots, options);
			});
			
			// Handle resizing of the map
			if (options.map.width) {
				paper.setSize(options.map.width, mapConf.height * (options.map.width / mapConf.width));
				
				// Create the legends for plots taking into account the scale of the map
				if (options.legend.plot.slices && options.legend.plot.display)
					plotLegend = $.fn.mapael.createLegend($self, options, 'plot', plots, (options.map.width / mapConf.width));
			} else {
				$(window).on('resize', function() {
					clearTimeout(resizeTO);
					resizeTO = setTimeout(function(){$container.trigger('resizeEnd');}, 150);
				});
				
				// Create the legends for plots taking into account the scale of the map
				var createPlotLegend = function() {
					if (options.legend.plot.slices && options.legend.plot.display)
						plotLegend = $.fn.mapael.createLegend($self, options, 'plot', plots, ($container.width() / mapConf.width));
					
					$container.unbind('resizeEnd', createPlotLegend);
				};
				
				$container.on('resizeEnd', function() {
					var containerWidth = $container.width();
					if (paper.width != containerWidth) {
						paper.setSize(containerWidth, mapConf.height * (containerWidth / mapConf.width));
					}
				}).on('resizeEnd', createPlotLegend).trigger('resizeEnd');
			}
			
			// Hook that allows to add custom processing on the map
			options.map.afterInit && options.map.afterInit($self, paper, areas, plots, options);
			
			$(paper.desc).append(" and Mapael (http://neveldo.fr/mapael)");
		});
	};
	
	/**
	* Init the element 'elem' on the map (drawing, setting attributes, events, tooltip, ...)
	*/
	$.fn.mapael.initElem = function(paper, elem, options, $tooltip, id) {
		var bbox = {}, textPosition = {};
		$.fn.mapael.setHoverOptions(elem.mapElem, options.attrs, options.attrsHover);
		
		if (options.text && typeof options.text.content != 'undefined') {
			// Set a text label in the area
			bbox = elem.mapElem.getBBox();
			textPosition = $.fn.mapael.getTextPosition(bbox, options.text.position, options.text.margin);
			options.text.attrs['text-anchor'] = textPosition.textAnchor;
			elem.textElem = paper.text(textPosition.x, textPosition.y, options.text.content).attr(options.text.attrs);
			$.fn.mapael.setHoverOptions(elem.textElem, options.text.attrs, options.text.attrsHover);
			$.fn.mapael.setHover(paper, elem.mapElem, elem.textElem);
			options.eventHandlers && $.fn.mapael.setEventHandlers(id, options, elem.mapElem, elem.textElem);
			$(elem.textElem.node).attr('data-id', id);
		} else {
			$.fn.mapael.setHover(paper, elem.mapElem);
			options.eventHandlers && $.fn.mapael.setEventHandlers(id, options, elem.mapElem);
		}
		
		if (options.tooltip && options.tooltip.content) {
			elem.mapElem.tooltipContent = options.tooltip.content;
			$.fn.mapael.setTooltip(elem.mapElem, $tooltip);
			
			if (options.text && typeof options.text.content !='undefined') {
				elem.textElem.tooltipContent = options.tooltip.content;
				$.fn.mapael.setTooltip(elem.textElem, $tooltip);
			}
		}
		
		if (options.href) {
			elem.mapElem.href = options.href;
			$.fn.mapael.setHref(elem.mapElem);
			
			if (options.text && typeof options.text.content !='undefined') {
				elem.textElem.href = options.href;
				$.fn.mapael.setHref(elem.textElem);
			}
		}
		
		if (typeof options.value != "undefined")
			elem.value = options.value;
			
		$(elem.mapElem.node).attr('data-id', id);
	}

	/**
	* Update the element 'elem' on the map with the new elemOptions options
	*/
	$.fn.mapael.updateElem = function(elemOptions, elem, $tooltip, animDuration) {
		var bbox, textPosition, plotOffset;
		if (typeof elemOptions.value != "undefined")
			elem.value = elemOptions.value;
		
		// Update text
		if (elem.textElem) {
			if (typeof elemOptions.text != 'undefined' && typeof elemOptions.text.content != 'undefined' && elemOptions.text.content != elem.textElem.attrs.text)
				elem.textElem.attr({text : elemOptions.text.content});

			bbox = elem.mapElem.getBBox();
			if (elemOptions.size) {
				plotOffset = (elemOptions.size - bbox.height) / 2;
				bbox.x -= plotOffset;
				bbox.x2 += plotOffset;
				bbox.y -= plotOffset;
				bbox.y2 += plotOffset;
			}
			textPosition = $.fn.mapael.getTextPosition(bbox, elemOptions.text.position, elemOptions.text.margin);
			if (textPosition.x != elem.textElem.attrs.x || textPosition.y != elem.textElem.attrs.y) {
				if (animDuration > 0) {
					elem.textElem.attr({'text-anchor' : textPosition.textAnchor});
					elem.textElem.animate({x : textPosition.x, y : textPosition.y}, animDuration);
				} else
					elem.textElem.attr({x : textPosition.x, y : textPosition.y, 'text-anchor' : textPosition.textAnchor});
			}
			
			$.fn.mapael.setHoverOptions(elem.textElem, elemOptions.text.attrs, elemOptions.text.attrsHover);
			if (animDuration > 0)
				elem.textElem.animate(elemOptions.text.attrs, animDuration);
			else
				elem.textElem.attr(elemOptions.text.attrs);
		}
		
		$.fn.mapael.setHoverOptions(elem.mapElem, elemOptions.attrs, elemOptions.attrsHover);
		if (animDuration > 0)
			elem.mapElem.animate(elemOptions.attrs, animDuration);
		else
			elem.mapElem.attr(elemOptions.attrs);
		
		if (elemOptions.tooltip && typeof elemOptions.tooltip.content != 'undefined') {
			if (typeof elem.mapElem.tooltipContent == "undefined") {
				$.fn.mapael.setTooltip(elem.mapElem, $tooltip);
				(elem.textElem) && $.fn.mapael.setTooltip(elem.textElem, $tooltip);
			}
			elem.mapElem.tooltipContent = elemOptions.tooltip.content;
			(elem.textElem) && (elem.textElem.tooltipContent = elemOptions.tooltip.content);
		}
		
		if (typeof elemOptions.href != 'undefined') {
			if (typeof elem.mapElem.href == "undefined") {
				$.fn.mapael.setHref(elem.mapElem);
				(elem.textElem) && $.fn.mapael.setHref(elem.textElem);
			}
			elem.mapElem.href = elemOptions.href;
			(elem.textElem) && (elem.textElem.href = elemOptions.href);
		}
	}
	
	/**
	* Draw the plot
	*/
	$.fn.mapael.drawPlot = function(id, options, mapConf, paper, $tooltip) {
		var plot = {}
			, coords = {}
			, elemOptions = $.fn.mapael.getElemOptions(
				options.map.defaultPlot
				, (options.plots[id] ? options.plots[id] : {})
				, options.legend.plot
			);
		
		if (elemOptions.x && elemOptions.y) 
			coords = {x : elemOptions.x, y : elemOptions.y};
		else
			coords = mapConf.getCoords(elemOptions.latitude, elemOptions.longitude);
		
		if ("square" == elemOptions.type) {
			plot = {'mapElem' : paper.rect(
				coords.x - (elemOptions.size / 2)
				, coords.y - (elemOptions.size / 2)
				, elemOptions.size
				, elemOptions.size
			).attr(elemOptions.attrs)};
		} else { // Default = circle
			plot = {'mapElem' : paper.circle(coords.x, coords.y, elemOptions.size / 2).attr(elemOptions.attrs)};
		}
		
		$.fn.mapael.initElem(paper, plot, elemOptions, $tooltip, id);
		
		return plot;
	};
	
	/**
	* Set target link on elem
	*/
	$.fn.mapael.setHref = function(elem) {
		elem.attr({cursor : 'pointer'});
		$(elem.node).bind('click', function() {
			if (!$.fn.mapael.panning && elem.href)
				window.location = elem.href;
		});
	}
	
	/**
	* Set a tooltip for the areas and plots
	* @param elem area or plot element
	* @param $tooltip the tooltip container
	* @param content the content to set in the tooltip
	*/
	$.fn.mapael.setTooltip = function(elem, $tooltip) {
		var tooltipTO = 0
        	, $container = $tooltip.parent()
			, containerY2 = $container.offset().left + $container.width();
	
		$(elem.node).on("mouseover", function(e) {
			tooltipTO = setTimeout(
				function() {
					elem.tooltipContent && $tooltip.html(elem.tooltipContent).css("display", "block");
					$tooltip.css({"left" : Math.min(containerY2 - $tooltip.outerWidth() - 5, e.pageX + 12), "top" : e.pageY + 23 - $(window).scrollTop()});
				}
				, 120
			);
		}).on("mouseout", function(e) {
			clearTimeout(tooltipTO);
			$tooltip.css("display", "none");
		}).on("mousemove", function(e) {
			$tooltip.css({"left" : Math.min(containerY2 - $tooltip.outerWidth() - 5, e.pageX + 12), "top" : e.pageY + 23 - $(window).scrollTop()});
		});
	};
	
	/**
	* Set user defined handlers for events on areas and plots
	* @param id the id of the element 
	* @param elemOptions the element parameters
	* @param mapElem the map element to set callback on
	* @param textElem the optional text within the map element
	*/
	$.fn.mapael.setEventHandlers = function(id, elemOptions, mapElem, textElem) {
		for(var event in elemOptions.eventHandlers) {
			(function(event) {
				$(mapElem.node).on(event, function(e) {!$.fn.mapael.panning && elemOptions.eventHandlers[event](e, id, mapElem, textElem)});
				textElem && $(textElem.node).on(event, function(e) {!$.fn.mapael.panning && elemOptions.eventHandlers[event](e, id, mapElem, textElem)});
			})(event);
		}
	}
	
	$.fn.mapael.panning = false;
	
	/**
	* Init zoom and panning for the map
	* @param $container
	* @param paper
	* @param mapWidth
	* @param mapHeight
	* @param options
	*/
	$.fn.mapael.initZoom = function($container, paper, mapWidth, mapHeight, options) {
		var $parentContainer = $container.parent()
			, $zoomIn = $("<div>").addClass(options.zoomInCssClass).html("+")
			, $zoomOut = $("<div>").addClass(options.zoomOutCssClass).html("&#x2212;")
			, mousedown  = false
			, previousX = 0
			, previousY = 0;
		
		// Zoom
		$parentContainer.data("zoomLevel", 0);
		$container.append($zoomIn).append($zoomOut);
		
		$parentContainer.on("zoom", function(e, level, x, y) {
			var currentLevel = Math.min(Math.max(level, 0), options.maxLevel);
			$parentContainer.data("zoomLevel", currentLevel);
			
			(typeof x == "undefined") && (x = (paper._viewBox[0] + paper._viewBox[2] / 2));
			(typeof y == "undefined") && (y = (paper._viewBox[1] + paper._viewBox[3] / 2));
			
			// Update zoom level of the map
			if (currentLevel == 0) {
				paper.setViewBox(0, 0, mapWidth, mapHeight);
			} else {
				paper.setViewBox(
					Math.min(Math.max(0, x - (mapWidth / (1 + currentLevel * options.step))/2), (mapWidth - (mapWidth / (1 + currentLevel * options.step)))), 
					Math.min(Math.max(0, y - (mapHeight / (1 + currentLevel * options.step))/2), (mapHeight - (mapHeight / (1 + currentLevel * options.step)))), 
					mapWidth / (1 + currentLevel * options.step), 
					mapHeight / (1 + currentLevel * options.step)
				);
			}
		});
		
		$zoomIn.on("click", function() {$parentContainer.trigger("zoom", $parentContainer.data("zoomLevel") + 1);});
		$zoomOut.on("click", function() {$parentContainer.trigger("zoom", $parentContainer.data("zoomLevel") - 1);});
		
		// Panning
		$('body').on("mouseup", function(e) {
			mousedown  = false;
			setTimeout(function () {$.fn.mapael.panning = false;}, 50);
		});
		
		$container.on("mousedown", function(e) {
			mousedown  = true;
			previousX = e.pageX;
			previousY = e.pageY;
			return false;
		}).on("mousemove", function(e) {
			var currentLevel = $parentContainer.data("zoomLevel");
			if (mousedown  && currentLevel != 0) {
				var offsetX = (previousX - e.pageX) / (1 + (currentLevel * options.step)) * (mapWidth / paper.width)
					, offsetY = (previousY - e.pageY) / (1 + (currentLevel * options.step)) * (mapHeight / paper.height);					
				
				if (Math.abs(offsetX) > 5 || Math.abs(offsetY) > 5) {
					paper.setViewBox(
						Math.min(Math.max(0, paper._viewBox[0] + offsetX), (mapWidth - paper._viewBox[2])), 
						Math.min(Math.max(0, paper._viewBox[1] + offsetY), (mapHeight - paper._viewBox[3])),
						paper._viewBox[2],
						paper._viewBox[3]
					);
					
					previousX = e.pageX;
					previousY = e.pageY;
					$.fn.mapael.panning = true;
				}
			}
			return false;
		});
	}
	
	/**
	* Draw a legend for areas and / or plots
	* @param $container the legend container
	* @param options map options
	* @param legendType the type of the legend : 'area' or 'plot'
	*/
	$.fn.mapael.createLegend = function ($container, options, legendType, elems, scale) {
		var legendOptions = options.legend[legendType]
			, $legend = (legendType == 'plot') ? $('.' + options.legend.plot.cssClass, $container).empty() : $('.' + options.legend.area.cssClass, $container).empty()
			, paper = new Raphael($legend.get(0))
			, width = 5
			, height = 5
			, title = {}
			, defaultElemOptions = {}
			, elem = {}
			, label = {};
		
		if(legendOptions.title) {
			title = paper.text(legendOptions.marginLeftTitle, legendOptions.marginBottom, legendOptions.title)
				.attr(legendOptions.titleAttrs);
				
			width = legendOptions.marginLeftTitle + title.getBBox().width;
			height += legendOptions.marginBottom + title.getBBox().height;
		}
		
		for(var i = 0, length = legendOptions.slices.length; i < length; ++i) {
			if (typeof legendOptions.slices[i].display == 'undefined' || legendOptions.slices[i].display == true) {
				defaultElemOptions = (legendType == 'plot') ? options.map['defaultPlot'] : options.map['defaultArea'];
				legendOptions.slices[i].attrs = $.extend(
					{}
					, defaultElemOptions.attrs
					, legendOptions.slices[i].attrs
				);
				legendOptions.slices[i].attrsHover = $.extend(
					{}
					, defaultElemOptions.attrsHover
					, legendOptions.slices[i].attrsHover
				);
				
				if(legendType == 'area' || legendOptions.slices[i].type == "square") {
					// Draw a square for squared plots AND areas
					!legendOptions.slices[i].size && (legendOptions.slices[i].size = 20);
					
					elem = paper.rect(
						legendOptions.marginLeft
						, height
						, scale * (legendOptions.slices[i].size)
						, scale * (legendOptions.slices[i].size)
					).attr(legendOptions.slices[i].attrs);
				} else {
					elem = paper.circle(
						legendOptions.marginLeft + scale * (legendOptions.slices[i].size / 2)
						, height + scale * (legendOptions.slices[i].size / 2)
						, scale * (legendOptions.slices[i].size / 2)
					).attr(legendOptions.slices[i].attrs);
				} 
				
				label = paper.text(
					legendOptions.marginLeft + scale * legendOptions.slices[i].size + legendOptions.marginLeftLabel
					, height + scale * (legendOptions.slices[i].size / 2)
					, legendOptions.slices[i].label
				).attr(legendOptions.labelAttrs);
				
				height += legendOptions.marginBottom + scale * legendOptions.slices[i].size;
				width = Math.max(width, legendOptions.marginLeft + scale * legendOptions.slices[i].size + legendOptions.marginLeftLabel + label.getBBox().width);
				
				if (legendOptions.hideElemsOnClick.enabled) {
					// Hide/show elements when user clicks on a legend element
					label.attr({cursor:'pointer'});
					
					$.fn.mapael.setHoverOptions(elem, legendOptions.slices[i].attrs, legendOptions.slices[i].attrs);
					$.fn.mapael.setHoverOptions(label, legendOptions.labelAttrs, legendOptions.labelAttrsHover);
					$.fn.mapael.setHover(paper, elem, label);
					
					label.hidden = false;
					(function(i, elem, label) {
						$(label.node).on('click', function() {
							if (!label.hidden) {
								label.animate({'opacity':0.5}, 300);
							} else {
								label.animate({'opacity':1}, 300);
							}
							
							for (var id in elems) {
								if ((typeof legendOptions.slices[i].min == 'undefined' || elems[id].value >= legendOptions.slices[i].min) 
									&& (typeof legendOptions.slices[i].max == 'undefined' || elems[id].value < legendOptions.slices[i].max)
								) {
									(function(id) {
										if (!label.hidden) {
											elems[id].mapElem.animate({'opacity':legendOptions.hideElemsOnClick.opacity}, 300, 'linear', function() {(legendOptions.hideElemsOnClick.opacity == 0) && elems[id].mapElem.hide();});
											elems[id].textElem && elems[id].textElem.animate({'opacity':legendOptions.hideElemsOnClick.opacity}, 300, 'linear', function() {(legendOptions.hideElemsOnClick.opacity == 0) && elems[id].textElem.hide();});
										} else {
											if (legendOptions.hideElemsOnClick.opacity == 0) {
												elems[id].mapElem.show();
												elems[id].textElem && elems[id].textElem.show();
											}
											elems[id].mapElem.animate({'opacity':typeof elems[id].mapElem.originalAttrs.opacity != "undefined" ? elems[id].mapElem.originalAttrs.opacity : 1}, 300);
											elems[id].textElem && elems[id].textElem.animate({'opacity':typeof elems[id].textElem.originalAttrs.opacity != "undefined" ? elems[id].textElem.originalAttrs.opacity : 1}, 300);
										}
									})(id);
								}
							}
							label.hidden = !label.hidden;
						});
					})(i, elem, label);
				}
			}
		}
		
		// VMLWidth option allows you to set static width for the legend
		// only for VML render because text.getBBox() returns wrong values on IE6/7
		if (Raphael.type != 'SVG' && legendOptions.VMLWidth) 
			width = legendOptions.VMLWidth;
		
		paper.setSize(width, height)
		return paper;
	}
	
	/**
	* Set the attributes on hover and the attributes to restore for a map element
	* @param elem the map element
	* @param originalAttrs the original attributes to restore on mouseout event
	* @param attrsHover the attributes to set on mouseover event
	*/
	$.fn.mapael.setHoverOptions = function (elem, originalAttrs, attrsHover) {
		// Disable transform option on hover for VML (IE<9) because of several bugs
		if (Raphael.type != 'SVG') delete attrsHover.transform;
		elem.attrsHover = attrsHover;
		
		if (elem.attrsHover.transform) elem.originalAttrs = $.extend({transform : "s1"}, originalAttrs);
		else elem.originalAttrs = originalAttrs;
	};
	
	/**
	* Set the hover behavior (mouseover & mouseout) for plots and areas
	* @param paper Raphael paper object
	* @param mapElem the map element
	* @param textElem the optional text element (within the map element)
	*/
	$.fn.mapael.setHover = function (paper, mapElem, textElem) {
		var $mapElem = {}
			, $textElem = {}
			, hoverTO = 0
			, overBehaviour = function() {hoverTO = setTimeout(function () {$.fn.mapael.elemHover(paper, mapElem, textElem);}, 120);}
			, outBehaviour = function () {clearTimeout(hoverTO);$.fn.mapael.elemOut(paper, mapElem, textElem);};
			
		$mapElem = $(mapElem.node);
		$mapElem.on("mouseover", overBehaviour);
		$mapElem.on("mouseout", outBehaviour);
		
		if (textElem) {
			$textElem = $(textElem.node);
			$textElem.on("mouseover", overBehaviour);
			$(textElem.node).on("mouseout", outBehaviour);
		}
	};
	
	/**
	* Set he behaviour for 'mouseover' event
	* @param paper paper Raphael paper object
	* @param mapElem mapElem the map element
	* @param textElem the optional text element (within the map element)
	*/
	$.fn.mapael.elemHover = function (paper, mapElem, textElem) {
		mapElem.animate(mapElem.attrsHover, mapElem.attrsHover.animDuration);
		textElem && textElem.animate(textElem.attrsHover, textElem.attrsHover.animDuration);
		paper.safari();
	}
	
	/**
	* Set he behaviour for 'mouseout' event
	* @param paper Raphael paper object
	* @param mapElem the map element
	* @param textElem the optional text element (within the map element)
	*/
	$.fn.mapael.elemOut = function (paper, mapElem, textElem) {
		mapElem.animate(mapElem.originalAttrs, mapElem.attrsHover.animDuration);
		textElem && textElem.animate(textElem.originalAttrs, textElem.attrsHover.animDuration);
		paper.safari();
	};
	
	/**
	* Get element options by merging default options, element options and legend options
	* @param defaultOptions
	* @param elemOptions
	* @param legendOptions
	*/
	$.fn.mapael.getElemOptions = function(defaultOptions, elemOptions, legendOptions) {
		var options = $.extend(true, {}, defaultOptions, elemOptions);
		if (typeof options.value != "undefined") {
			$.extend(true, options, $.fn.mapael.getLegendSlice(options.value, legendOptions));
		}
		
		return options;
	}
	
	/**
	* Get the coordinates of the text relative to a bbox and a position
	* @param bbox the boundary box of the element
	* @param textPosition the wanted text position (inner, right, left, top or bottom)
	*/
	$.fn.mapael.getTextPosition = function(bbox, textPosition, margin) {
		var textX = 0
			, textY = 0
			, textAnchor = '';
			
		switch (textPosition) {
			case 'bottom' :
				textX = (bbox.x + bbox.x2) / 2;
				textY = bbox.y2 + margin;
				textAnchor = "middle";
				break;
			case 'top' :
				textX = (bbox.x + bbox.x2) / 2;
				textY = bbox.y - margin;
				textAnchor = "middle";
				break;
			case 'left' :
				textX = bbox.x - margin;
				textY = (bbox.y + bbox.y2) / 2;
				textAnchor = "end";
				break;
			case 'right' :
				textX = bbox.x2 + margin;
				textY = (bbox.y + bbox.y2) / 2;
				textAnchor = "start";
				break;
			default : // 'inner' position
				textX = (bbox.x + bbox.x2) / 2;
				textY = (bbox.y + bbox.y2) / 2;
				textAnchor = "middle";
		}
		return {'x' : textX, 'y' : textY, 'textAnchor' : textAnchor};
	}
	
	/**
	* Get the legend conf matching with the value
	* @param value the value to match with a slice in the legend
	* @param legend the legend params object
	* @return the legend slice matching with the value
	*/
	$.fn.mapael.getLegendSlice = function (value, legend) {
		for(var i = 0, length = legend.slices.length; i < length; ++i) {
			if ((typeof legend.slices[i].min == 'undefined' || value >= legend.slices[i].min) 
				&& (typeof legend.slices[i].max == 'undefined' || value < legend.slices[i].max)
			) {
				return legend.slices[i];
			}
		}
		return {};
	};
	
	// Default map options
	$.fn.mapael.defaultOptions = {
		map : {
			cssClass : "map"
			, tooltip : {
				cssClass : "mapTooltip"
			}
			, defaultArea : {
				attrs : {
					fill : "#343434"
					, stroke : "#5d5d5d"
					, "stroke-width" : 1
					, "stroke-linejoin" : "round"
				}
				, attrsHover : {
					fill : "#f38a03"
					, animDuration : 300
				}
				, text : {
					position : 'inner'
					, margin : 10
					, attrs : {
						"font-size" : 15
						, fill : "#c7c7c7"
					}
					, attrsHover : {
						fill : "#eaeaea"
						, "animDuration" : 300
					}
				}
			}
			, defaultPlot : {
				type : "circle"
				, size : 15
				, attrs : {
					fill : "#0088db" 
					, stroke : "#fff"
					, "stroke-width" : 0
					, "stroke-linejoin" : "round"
				}
				, attrsHover : {
					"stroke-width" : 3
					, animDuration : 300
				}
				, text : {
					position : 'right'
					, margin : 10
					, attrs : {
						"font-size" : 15
						, fill : "#c7c7c7"
					}
					, attrsHover : {
						fill : "#eaeaea"
						, animDuration : 300
					}
				}
			}
			, zoom : {
				enabled : false
				, maxLevel : 5
				, step : 0.25
				, zoomInCssClass : "zoomIn"
				, zoomOutCssClass : "zoomOut"
			}
		}
		, legend : {
			area : {
				cssClass : "areaLegend"
				, display : false
				, marginLeft : 15
				, marginLeftTitle : 5
				, marginLeftLabel : 10
				, marginBottom : 15
				, titleAttrs : {
					"font-size" : 18
					, fill : "#343434"
					, "text-anchor" : "start"
				}
				, labelAttrs : {
					"font-size" : 15
					, fill : "#343434"
					, "text-anchor" : "start"
				}
				, labelAttrsHover : {
					fill : "#787878"
					, animDuration : 300
				}
				, hideElemsOnClick : {
					enabled : true
					, opacity : 0.2
				}
				, slices : []
			}
			, plot : {
				cssClass : "plotLegend"
				, display : false
				, marginLeft : 15
				, marginLeftTitle : 5
				, marginLeftLabel : 10
				, marginBottom : 15
				, titleAttrs : {
					"font-size" : 18
					, fill : "#343434"
					, "text-anchor" : "start"
				}
				, labelAttrs : {
					"font-size" : 15
					, fill : "#343434"
					, "text-anchor" : "start"
				}
				, labelAttrsHover : {
					fill : "#787878"
					, animDuration : 300
				}
				, hideElemsOnClick : {
					enabled : true
					, opacity : 0.2
				}
				, slices : []
			}
		}
		, areas : {}
		, plots : {}
	};
})(jQuery);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js"), __webpack_require__("./node_modules/webpack-raphael/raphael-min.js")))

/***/ },

/***/ "./node_modules/jQuery-Mapael/js/maps/world_countries.js":
/***/ function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {/**
*
* Jquery Mapael - Dynamic maps jQuery plugin (based on raphael.js)
* Requires jQuery and raphael.js
*
* Map of World by country
* 
* @source http://backspace.com/mapapp/javascript_world/
*/

(function($) {
	$.extend(true, $.fn.mapael, 
		{
			maps :  {
				world_countries : {
					width : 1000,
					height : 400,
					getCoords : function (lat, lon) {
						var xfactor = 2.752;
						var xoffset = 473.75;
						var x = (lon * xfactor) + xoffset;
						
						var yfactor = -2.753;
						var yoffset = 231;
						var y = (lat * yfactor) + yoffset;
						
						return {x : x, y : y};
					},
					'elems': {
						"AE" : "M615.622,164.177l0.582,0.000l0.000,0.580l2.324,-0.289l2.326,0.000l1.455,0.000l2.033,-1.743l2.034,-1.743l1.745,-1.742l0.583,0.871l0.291,2.324l-1.456,0.000l-0.289,1.742l0.581,0.291l-1.163,0.580l0.000,1.161l-0.873,1.162l0.000,1.162l-0.580,0.580l-8.430,-1.452l-0.872,-2.613l0.291,0.871z",
						"AF" : "M642.364,132.815l2.617,1.162l2.034,-0.291l0.581,-1.452l2.325,-0.291l1.454,-0.870l0.583,-2.323l2.326,-0.291l0.580,-1.162l1.164,0.871l0.871,0.000l1.453,0.000l2.035,0.582l0.871,0.290l2.036,-0.872l0.872,0.582l0.872,-1.162l1.745,0.000l0.289,-0.291l0.290,-1.161l1.455,-1.161l1.454,0.871l-0.291,0.871l0.581,0.000l0.000,2.323l0.873,0.872l1.161,-0.581l1.162,-0.291l1.744,-1.162l1.745,0.290l2.909,0.000l0.580,0.582l-1.743,0.290l-1.454,0.581l-2.907,0.291l-3.197,0.580l-1.454,1.161l0.581,1.162l0.289,1.452l-1.450,1.161l0.289,1.162l-0.872,0.871l-2.616,0.000l1.161,1.743l-1.742,0.580l-1.162,1.743l0.000,1.743l-0.875,0.580l-1.160,0.000l-2.036,0.290l-0.292,0.581l-2.034,0.000l-1.452,1.742l-0.291,2.323l-3.488,1.161l-2.035,-0.289l-0.581,0.580l-1.455,-0.291l-2.907,0.291l-4.649,-1.452l2.615,-2.323l-0.289,-1.742l-2.036,-0.581l-0.290,-1.743l-0.873,-2.032l1.163,-1.742l-1.163,-0.291l0.873,-2.032l-1.161,3.485z",
						"AL" : "M530.451,115.973l-0.289,0.871l0.289,1.161l1.165,0.581l0.000,0.872l-0.873,0.291l-0.292,0.869l-1.160,1.453l-0.583,-0.291l0.000,-0.580l-1.454,-0.871l-0.292,-1.452l0.292,-1.742l0.292,-0.872l-0.584,-0.580l0.000,-0.872l1.163,-1.162l0.292,0.291l0.582,0.000l0.581,0.581l0.582,0.290l-0.289,-1.162z",
						"AM" : "M593.82,118.005l3.780,-0.580l0.581,0.870l0.871,0.291l-0.289,0.872l1.452,0.871l-0.871,0.871l1.163,0.871l1.162,0.290l0.000,2.032l-0.873,0.000l-1.163,-1.451l0.000,-0.581l-1.160,0.000l-0.873,-0.581l-0.582,0.000l-1.162,-0.871l-2.036,-0.580l0.292,-1.452l0.292,0.872z",
						"AO" : "M518.825,247.227l0.582,2.032l0.871,1.453l0.581,0.87l0.874,1.452h2.033l0.873-0.581l1.452,0.581l0.582-0.871l0.581-1.451l1.744-0.291v-0.29h1.452l-0.289,0.871h3.488v1.742l0.579,1.161l-0.579,1.453l0.29,1.74l0.873,1.162v3.195l0.581-0.292h1.162l1.745-0.29h1.161l0.291,0.871l-0.291,1.452l0.583,1.161l-0.292,1.161v0.873h-5.524l-0.289,8.711l2.034,2.322l1.745,1.744l-5.232,1.161l-6.396-0.582l-2.033-1.161h-11.047l-0.581,0.291l-1.745-1.161l-1.743-0.292l-1.455,0.581l-1.452,0.581l-0.29-1.742l0.581-2.612l0.871-2.324v-1.161l0.874-2.613l0.871-1.163l1.452-1.742l0.873-1.16l0.292-2.033v-1.451l-0.874-1.162l-0.871-1.742l-0.581-1.452v-0.581l0.872-1.161l-0.872-2.613l-0.291-1.742l-1.455-1.741l0.292-0.582l1.163-0.581l0.581,0.291l1.162-0.581L518.825,247.227zM508.071,246.646l-0.874,0.291l-0.581-2.031l1.163-1.163l0.87-0.581l0.874,0.871l-0.874,0.58l-0.578,0.872V246.646z",
						"AR" : "M293.546,382.836h-2.616l-1.454-0.87h-1.745h-2.907v-6.389l1.163,1.45l1.163,2.033l3.779,1.744l3.778,0.58L293.546,382.836zM295,291.656l1.452,2.033l1.163-2.323l3.198,0.29l0.291,0.581l5.232,4.356l2.326,0.29l3.198,2.033l2.906,1.161l0.291,1.162l-2.617,4.354l2.617,0.58l3.197,0.581l2.326-0.581l2.326-2.032l0.582-2.322l1.163-0.58l1.454,1.45v2.324l-2.325,1.45l-1.745,1.163l-3.198,2.612l-3.779,3.777l-0.582,2.321l-0.872,2.613l0.291,2.905l-0.872,0.58v1.741l-0.29,1.452l3.487,2.323l-0.291,2.033l1.745,1.161l-0.291,1.162l-2.616,3.773l-4.07,1.455l-5.522,0.579l-2.907-0.29l0.582,1.451l-0.582,2.033l0.291,1.452l-1.454,0.871l-2.907,0.58l-2.616-1.161l-1.163,0.871l0.583,2.613l1.744,0.872l1.452-0.872l0.873,1.453l-2.617,0.87l-2.035,1.743l-0.582,2.613l-0.58,1.451h-2.617l-2.035,1.451l-0.873,2.033l2.617,2.032l2.615,0.582l-0.872,2.613l-3.197,1.452l-1.744,3.194l-2.616,1.161l-1.163,1.163l0.872,2.902l2.035,1.742l-1.163-0.291l-2.617-0.29l-6.685-0.58l-1.163-1.453v-2.03h-1.744l-0.873-0.873l-0.291-2.904l2.035-1.161l0.873-1.741l-0.292-1.453l1.455-2.323l0.872-3.775l-0.291-1.451l1.452-0.58l-0.29-1.162l-1.454-0.289l0.873-1.162l-1.162-1.162l-0.582-3.194l1.164-0.581l-0.582-3.193l0.582-2.904l0.872-2.613l1.453-0.87l-0.581-2.615l-0.292-2.613l2.326-1.742l-0.29-2.323l1.744-2.613v-2.613l-0.873-0.58l-1.163-4.646l1.744-2.904l-0.291-2.612l0.872-2.614l2.035-2.324l1.744-1.741l-0.872-1.163l0.582-0.87v-4.646l2.907-1.451l1.163-2.613l-0.291-0.872l2.034-2.324L295,291.656z",
						"AT" : "M520.57,98.549l-0.292,1.162l-1.453,0.000l0.582,0.581l-1.164,1.742l-0.291,0.580l-2.616,0.000l-1.162,0.582l-2.326,-0.291l-4.069,-0.580l-0.582,-0.872l-2.615,0.292l-0.291,0.580l-1.746,-0.291l-1.452,0.000l-1.162,-0.581l0.289,-0.581l0.000,-0.580l0.873,-0.291l1.452,0.871l0.292,-0.871l2.326,0.291l2.034,-0.581l1.452,0.000l0.584,0.581l0.290,-0.291l-0.290,-1.742l0.872,-0.580l1.162,-1.162l2.035,0.871l1.453,-1.162l0.871,0.000l2.326,0.581l1.163,0.000l1.455,0.581l-0.292,0.291l-0.292,-0.870z",
						"AU" : "M874.039,343.054l2.616,0.871l1.454-0.29l2.325-0.581l1.453,0.291l0.291,3.193l-0.87,0.872l-0.293,2.321l-1.162-0.579l-1.744,1.741h-0.582l-1.743-0.289l-1.745-2.324l-0.289-1.742l-1.744-2.323l0.29-1.451L874.039,343.054zM868.806,268.715l1.163,2.324l1.744-1.163l0.873,1.163l1.452,1.161l-0.289,1.161l0.58,2.324l0.291,1.45l0.873,0.29l0.579,2.323l-0.289,1.453l0.871,1.741l3.198,1.453l1.744,1.451l2.034,1.161l-0.582,0.581l1.745,1.742l0.87,2.904l1.165-0.581l1.163,1.452l0.581-0.581l0.579,2.904l2.036,1.742l1.163,1.161l2.034,2.033l0.873,2.322v1.452v1.742l1.163,2.323v2.323l-0.582,1.452l-0.581,2.323v1.742l-0.582,2.033l-1.162,2.322l-2.034,1.453l-1.163,2.031l-0.872,1.453l-0.872,2.322l-0.871,1.451l-0.873,2.033l-0.292,1.743v0.87l-1.452,1.163h-3.198l-2.326,1.159l-1.452,1.163l-1.454,1.161l-2.325-1.45l-1.743-0.293l0.289-1.45l-1.452,0.58l-2.325,1.744l-2.326-0.581l-1.743-0.582h-1.454l-2.616-0.871l-1.744-1.743l-0.582-2.032l-0.58-1.452l-1.456-1.162l-2.614-0.29l0.873-1.161l-0.581-2.033l-1.455,1.744l-2.326,0.579l1.455-1.452l0.292-1.74l1.161-1.453l-0.291-2.032l-2.324,2.612l-1.745,0.873l-0.873,2.03l-2.323-1.161l0.29-1.452l-1.744-1.741l-1.455-1.161l0.583-0.581l-3.779-1.743h-1.744l-2.616-1.45l-4.942,0.29l-3.778,0.871l-2.907,1.162l-2.615-0.292l-2.908,1.451l-2.616,0.581l-0.289,1.452l-1.163,1.161h-2.325l-1.744,0.291l-2.325-0.581l-2.036,0.29l-2.034,0.291l-1.455,1.452l-0.871-0.291l-1.452,0.871l-1.163,0.873h-2.036h-2.034l-2.906-1.744l-1.452-0.58v-1.742l1.452-0.291l0.581-0.58l-0.29-1.161l0.58-1.743l-0.29-1.741l-1.454-2.614l-0.579-1.742v-1.452l-0.873-1.743l-0.29-0.87l-1.163-1.162l-0.292-2.033l-1.454-2.323l-0.579-1.161l1.163,1.161l-0.874-2.321l1.455,0.58l0.873,1.161v-1.451l-1.454-2.033l-0.292-0.87l-0.582-0.872l0.29-1.742l0.584-0.581l0.289-1.451l-0.289-1.453l1.162-2.032l0.292,2.032l1.161-1.743l2.034-1.159l1.454-1.162l2.034-0.872l1.454-0.29l0.581,0.29l2.325-0.871l1.455-0.29l0.579-0.58l0.582-0.291h1.744l2.616-0.871l1.745-1.161l0.579-1.452l1.744-1.452v-1.162v-1.45l2.036-2.324l1.163,2.324l1.163-0.292l-0.871-1.45l0.871-1.453l1.163,0.871l0.289-2.322l1.454-1.162l0.58-1.162l1.454-0.58v-0.581l1.163,0.291l0.291-0.872l1.163-0.291l1.163-0.289l2.034,1.161l1.743,1.742h1.453l1.744,0.291l-0.581-1.742l1.454-2.032l1.163-0.873l-0.291-0.581l1.162-1.452l1.744-1.161l1.165,0.291l2.323-0.291v-1.452l-2.034-0.87l1.453-0.58l2.035,0.869l1.453,1.163l2.326,0.581l0.581-0.29l1.744,0.87l1.744-0.87l0.871,0.29l0.872-0.581l1.164,1.451l-0.873,1.453l-0.872,1.16h-0.873l0.292,1.162l-0.873,1.452l-1.163,1.161l0.292,0.872l2.325,1.452l2.034,0.87l1.454,0.871l2.034,1.742h0.581l1.452,0.582l0.582,0.87l2.617,1.161l1.745-1.161l0.581-1.452l0.581-1.161l0.29-1.452l0.873-2.322l-0.291-1.161v-0.872l-0.291-1.452l0.291-2.322l0.581-0.29l-0.29-1.163l0.581-1.451l0.582-1.452v-0.872l1.163-0.869l0.58,1.45l0.291,1.743l0.581,0.291l0.291,1.16l0.871,1.163l0.292,1.74L868.806,268.715z",
						"AZ" : "M597.6,121.78l0.873,0.581h1.16v0.581l1.163,1.451l-2.033-0.29l-1.163-1.453l-0.582-0.871H597.6zM604.285,117.715h1.165l0.29-0.581l1.744-1.162l1.452,1.452l1.453,2.033h1.165l0.87,0.871h-2.325l-0.292,2.322l-0.579,0.873l-0.873,0.58v1.452l-0.582,0.291l-1.743-1.453l0.871-1.451l-0.871-0.871l-0.872,0.291l-3.488,2.032v-2.032l-1.162-0.291l-1.163-0.871l0.871-0.871l-1.452-0.871l0.289-0.871l-0.871-0.291l-0.581-0.871l0.581-0.29l2.034,0.581l1.454,0.29l0.582-0.29l-1.455-1.453l0.582-0.29h0.873L604.285,117.715z",
						"BA" : "M526.091,107.552l0.871,0.000l-0.581,1.161l1.455,1.162l-0.582,1.161l-0.581,0.291l-0.582,0.290l-0.872,0.581l-0.291,1.451l-2.614,-1.161l-0.874,-1.161l-1.162,-0.581l-1.163,-0.871l-0.579,-0.872l-1.454,-1.451l0.581,-0.872l1.162,0.581l0.582,-0.581l1.163,0.000l2.325,0.291l2.033,0.000l-1.163,-0.581z",
						"BD" : "M728.989,170.275l-0.292,2.033l-0.871,-0.291l0.291,2.033l-0.872,-1.452l-0.292,-1.452l-0.290,-1.162l-1.163,-1.742l-2.615,0.000l0.289,1.161l-0.873,1.453l-1.161,-0.581l-0.581,0.581l-0.582,-0.292l-1.164,-0.289l-0.290,-2.324l-1.160,-2.032l0.579,-1.742l-1.744,-0.582l0.582,-1.160l1.743,-0.873l-2.034,-1.451l1.163,-2.032l2.034,1.451l1.454,0.000l0.291,2.032l2.616,0.291l2.327,0.000l1.743,0.291l-1.454,2.324l-1.163,0.289l-0.872,1.452l1.454,1.452l0.581,-1.742l0.872,0.000l-1.454,-4.356z",
						"BE" : "M482.78,89.837l2.034,0.000l2.617,-0.580l1.745,1.451l1.452,0.582l-0.290,1.742l-0.583,0.291l-0.290,1.451l-2.615,-1.161l-1.162,0.000l-2.036,-1.162l-1.163,-1.161l-1.452,0.000l-0.293,-0.872l-2.036,0.581z",
						"BF" : "M465.919,204.54l-1.744,-0.872l-1.452,0.291l-0.872,0.581l-1.164,-0.581l-0.579,-0.871l-1.165,-0.582l-0.290,-1.741l0.873,-1.161l0.000,-0.871l2.034,-2.324l0.291,-1.742l0.872,-0.871l1.452,0.581l1.163,-0.581l0.291,-0.872l2.035,-1.161l0.582,-0.871l2.617,-1.162l1.452,-0.290l0.582,0.581l2.035,0.000l-0.292,1.161l0.292,1.162l1.453,2.033l0.291,1.161l3.198,0.581l-0.291,2.032l-0.583,0.872l-1.161,0.290l-0.584,1.162l-0.870,0.290l-2.616,0.000l-1.163,-0.290l-0.872,0.290l-1.163,0.000l-4.942,0.000l0.000,1.452l-0.290,-2.323z",
						"BG" : "M536.265,109.294l0.581,1.162l1.164,-0.291l2.035,0.581l4.071,0.000l1.452,-0.581l3.196,-0.581l2.035,0.872l1.454,0.290l-1.163,1.161l-1.163,2.033l0.872,1.452l-2.324,-0.290l-2.907,0.871l0.000,1.452l-2.326,0.000l-2.034,-0.872l-2.326,0.872l-2.036,-0.290l0.000,-1.743l-1.452,-0.871l0.290,-0.292l-0.290,-0.289l0.580,-0.871l1.164,-0.871l-1.454,-1.162l-0.290,-1.161l-0.871,0.581z",
						"BI" : "M554.579,243.451l-0.290,-3.484l-0.583,-1.161l1.743,0.290l0.874,-1.743l1.454,0.291l0.000,0.871l0.582,0.871l0.000,0.872l-0.582,0.580l-1.163,1.454l-0.872,0.870l1.163,-0.289z",
						"BJ" : "M481.037,213.833l-2.037,0.290l-0.872,-2.033l0.290,-6.388l-0.579,-0.289l-0.291,-1.454l-0.872,-0.871l-0.873,-0.871l0.582,-1.452l0.870,-0.290l0.584,-1.162l1.161,-0.290l0.583,-0.872l1.161,-0.871l0.874,0.000l2.034,1.453l0.000,1.160l0.580,1.453l-0.580,1.160l0.291,0.873l-1.454,1.452l-0.582,0.871l-0.581,1.743l0.000,1.741l0.289,-4.647z",
						"BN" : "M787.998,218.479l1.163,-0.872l2.324,-1.741l0.000,1.451l-0.291,1.743l-1.163,0.000l-0.580,0.870l1.453,1.451z",
						"BO" : "M300.812,291.656l-3.197,-0.290l-1.163,2.323l-1.452,-2.033l-3.781,-0.582l-2.033,2.324l-2.036,0.582l-1.163,-4.065l-1.453,-2.906l0.872,-2.612l-1.453,-1.163l-0.291,-2.031l-1.454,-2.033l1.745,-2.904l-1.163,-2.324l0.582,-0.869l-0.582,-0.872l1.163,-1.452l0.000,-2.323l0.290,-2.033l0.582,-0.873l-2.326,-4.355l2.035,0.000l1.163,0.000l0.872,-0.870l2.326,-0.872l1.453,-1.162l3.487,-0.580l-0.289,2.031l0.289,1.163l0.000,1.743l2.909,2.612l3.196,0.290l0.872,1.162l2.035,0.581l1.163,0.872l1.744,0.000l1.453,0.580l0.000,1.743l0.582,0.871l0.000,1.162l-0.582,0.000l0.872,3.195l5.233,0.000l-0.291,1.740l0.291,0.873l1.453,0.871l0.872,1.742l-0.581,2.032l-0.873,1.453l0.291,1.451l-0.872,0.580l0.000,-0.871l-2.615,-1.451l-2.616,0.000l-4.652,0.871l-1.453,2.324l0.000,1.451l-1.163,3.485l0.291,0.581z",
						"BR" : "M315.056,314.017l3.778,-3.777l3.198,-2.613l1.745,-1.163l2.325,-1.450l0.000,-2.324l-1.454,-1.450l-1.162,0.580l0.580,-1.742l0.292,-1.454l0.000,-1.741l-1.163,-0.290l-0.872,0.290l-1.163,0.000l-0.290,-1.162l-0.291,-2.613l-0.291,-0.581l-2.035,-0.871l-1.163,0.581l-2.907,-0.581l0.291,-3.776l-0.872,-1.452l0.872,-0.580l-0.291,-1.451l0.873,-1.453l0.581,-2.032l-0.872,-1.742l-1.453,-0.871l-0.291,-0.873l0.291,-1.740l-5.233,0.000l-0.872,-3.195l0.582,0.000l0.000,-1.162l-0.582,-0.871l0.000,-1.743l-1.453,-0.580l-1.744,0.000l-1.163,-0.872l-2.035,-0.581l-0.872,-1.162l-3.196,-0.290l-2.909,-2.612l0.000,-1.743l-0.289,-1.163l0.289,-2.031l-3.487,0.580l-1.453,1.162l-2.326,0.872l-0.872,0.870l-1.163,0.000l-2.035,0.000l-1.744,0.292l-1.163,-0.292l0.292,-4.066l-2.326,1.453l-2.616,0.000l-0.872,-1.453l-1.744,0.000l0.581,-1.451l-1.744,-1.451l-1.163,-2.614l0.872,-0.581l0.000,-1.162l1.744,-0.581l-0.290,-1.451l0.581,-1.162l0.291,-1.161l3.198,-2.034l2.033,-0.289l0.583,-0.580l2.324,0.290l1.163,-7.551l0.291,-1.161l-0.582,-1.743l-1.162,-0.871l0.000,-2.033l1.453,-0.581l0.582,0.290l0.291,-0.871l-1.745,-0.290l0.000,-1.742l5.233,0.000l0.871,-0.871l0.873,0.871l0.582,1.452l0.581,-0.290l1.452,1.451l2.036,-0.289l0.580,-0.582l2.036,-0.870l1.162,-0.291l0.291,-1.162l2.035,-0.871l-0.291,-0.581l-2.324,-0.289l-0.292,-1.744l0.000,-1.741l-1.163,-0.872l0.582,0.000l2.034,0.290l2.326,0.582l0.581,-0.582l2.035,-0.580l3.198,-0.871l0.872,-1.162l-0.291,-0.580l1.453,-0.291l0.582,0.582l-0.290,1.451l0.872,0.290l0.580,1.161l-0.580,1.162l-0.582,2.324l0.582,1.451l0.291,1.162l1.743,1.162l1.454,0.290l0.290,-0.581l0.872,0.000l1.163,-0.581l0.871,-0.871l1.454,0.290l0.872,0.000l1.454,0.291l0.290,-0.581l-0.581,-0.581l0.291,-0.870l1.163,0.289l1.162,-0.289l1.745,0.581l1.161,0.581l0.873,-0.873l0.582,0.292l0.290,0.581l1.453,0.000l0.872,-1.162l0.872,-2.034l1.745,-2.323l0.872,-0.290l0.581,1.452l1.744,4.936l1.453,0.291l0.000,2.032l-2.034,2.323l0.872,0.872l4.942,0.290l0.000,2.904l2.034,-2.033l3.489,1.163l4.650,1.741l1.163,1.453l-0.290,1.451l3.197,-0.872l5.232,1.453l4.070,0.000l4.069,2.322l3.780,3.196l2.034,0.582l2.326,0.289l0.872,0.870l1.162,3.485l0.291,1.452l-1.162,4.646l-1.163,1.742l-4.070,3.775l-1.744,3.194l-2.035,2.323l-0.581,0.290l-0.873,2.034l0.291,4.936l-0.872,4.357l-0.290,1.742l-0.873,1.162l-0.581,3.774l-2.615,3.483l-0.583,2.906l-2.034,1.161l-0.872,1.453l-2.907,0.000l-4.360,1.160l-1.745,1.162l-3.197,0.871l-3.198,2.324l-2.325,2.613l-0.581,2.032l0.581,1.452l-0.581,2.904l-0.581,1.163l-2.035,1.742l-2.907,4.645l-2.325,2.323l-2.036,1.162l-1.162,2.615l-1.744,1.740l-0.872,-1.740l1.163,-1.164l-1.454,-2.032l-2.325,-1.451l-2.907,-1.743l-0.872,0.000l-2.907,-2.033l1.744,-0.292z",
						"BS" : "M260.408,165.628h-0.872l-0.581-1.452l-1.163-0.871l0.872-1.743l0.581,0.291l1.164,2.033V165.628zM259.536,157.788l-2.907,0.581l-0.291-1.162l1.454-0.29l1.744,0.29V157.788zM261.86,157.788l-0.58,2.032l-0.583-0.29l0.291-1.451l-1.453-1.162v-0.291L261.86,157.788z",
						"BT" : "M726.082,154.594l1.163,0.871l0.000,1.742l-2.326,0.000l-2.326,-0.290l-1.744,0.581l-2.615,-1.162l0.000,-0.581l1.743,-2.033l1.454,-0.580l2.035,0.580l1.453,0.000l-1.163,-0.872z",
						"BW" : "M544.405,281.784l0.582,0.580l0.870,1.742l2.907,2.903l1.455,0.292l0.000,0.870l0.580,1.744l2.326,0.579l1.745,1.162l-4.071,2.033l-2.324,2.032l-0.871,1.742l-0.874,1.161l-1.452,0.293l-0.584,1.161l-0.289,0.870l-1.744,0.582l-2.327,0.000l-1.162,-0.872l-1.162,-0.290l-1.454,0.580l-0.582,1.453l-1.452,0.870l-1.164,1.162l-2.033,0.290l-0.582,-0.872l0.289,-1.741l-1.741,-2.613l-0.874,-0.580l0.000,-7.843l2.908,-0.289l0.000,-9.582l2.033,-0.291l4.361,-0.871l0.871,1.162l1.744,-1.162l0.874,0.000l1.743,-0.582l0.291,0.291l-1.163,-2.034z",
						"BY" : "M538.301,82.579l2.907,0.000l2.908,-0.872l0.578,-1.452l2.326,-1.162l-0.290,-1.160l1.745,-0.291l2.906,-1.162l2.908,0.581l0.290,0.872l1.454,-0.291l2.615,0.581l0.289,1.161l-0.578,0.871l1.743,1.743l1.163,0.581l-0.292,0.290l2.036,0.580l0.872,0.872l-1.163,0.580l-2.326,-0.290l-0.581,0.290l0.871,0.872l0.583,2.033l-2.328,0.000l-0.870,0.580l-0.290,1.451l-0.873,-0.289l-2.615,0.000l-0.583,-0.581l-1.162,0.581l-1.163,-0.291l-2.036,-0.290l-3.196,-0.581l-2.615,-0.291l-2.035,0.291l-1.746,0.581l-1.163,0.000l0.000,-1.161l-0.871,-1.162l1.453,-0.582l0.000,-1.161l-0.582,-0.870l0.289,1.452z",
						"BZ" : "M228.433,181.89l0.000,-0.290l0.290,-0.290l0.582,0.580l0.872,-1.742l0.580,0.000l0.000,0.290l0.581,0.000l-0.289,0.872l-0.292,1.162l0.292,0.289l-0.292,1.162l0.000,0.291l-0.290,1.161l-0.582,0.872l-0.291,0.000l-0.581,0.870l-0.872,0.000l0.292,-2.903l0.000,2.324z",
						"CA" : "M298.487,102.905l2.035,0.291h2.617l-1.454,1.162l-0.872,0.29l-3.488-1.162l-0.873-1.161l1.163-0.872L298.487,102.905zM303.719,95.937h-1.454l-3.488-0.872l-2.616-1.162l0.872-0.291l3.779,0.581l2.616,1.162L303.719,95.937zM133.669,97.679l-1.163,0.291l-4.651-1.162l-0.872-1.162l-2.324-0.871l-0.582-0.871l-2.907-0.581l-0.872-1.452V91.29l2.907,0.581l1.744,0.58l2.617,0.291l0.872,0.872l1.454,1.162l2.615,1.162L133.669,97.679zM319.125,91.581l-1.744,2.323l1.744-0.871l2.035,0.581l-1.163,0.871l2.617,0.873l1.163-0.582l2.906,0.871l-0.872,1.742l1.744-0.291l0.292,1.452l0.872,1.742l-1.164,2.323h-1.162l-1.744-0.29l0.582-2.323l-0.872-0.29l-3.198,2.323h-1.453l1.744-1.452l-2.617-0.581h-2.907h-5.232l-0.58-0.872l1.744-0.871l-1.164-0.871l2.326-1.451l2.906-4.356l1.745-1.743l2.325-0.87h1.163l-0.582,0.87L319.125,91.581zM108.38,82.289l2.616-0.291l-0.58,3.195l2.324,2.323h-1.163l-1.744-1.453l-0.871-1.161l-1.454-0.871l-0.582-1.162l0.291-0.871L108.38,82.289zM255.466,59.928l-0.872,1.453l-1.453-0.291l-0.582-0.58v-0.291l1.163-0.872h1.163L255.466,59.928zM248.198,58.477l-3.197,1.451h-1.744l-0.581-0.581l2.034-1.452h3.779L248.198,58.477zM239.478,50.346l0.291,1.161l1.454-0.29l1.744,0.581l2.906,1.162l3.198,0.871l0.29,1.162l2.035-0.29l1.745,0.871l-2.326,0.872l-4.361-0.581l-1.453-1.161l-2.617,1.452l-4.069,1.451l-0.872-1.742l-3.779,0.291l2.325-1.162l0.291-2.323l1.163-2.613L239.478,50.346zM265.058,46.28l-3.198,0.291l-0.58-1.453l1.162-1.451l2.326-0.581l2.326,0.871v1.161l-0.291,0.292L265.058,46.28zM210.41,40.763l-1.744,1.162l-3.488-0.872l-2.325,0.291l-3.779-1.162l2.325-0.872l2.035-1.162l2.907,0.581l1.744,0.581l0.581,0.581L210.41,40.763zM224.653,39.891v2.614l3.488-2.032l3.197,1.742l-0.581,2.033l2.616,2.032l2.907-2.032l2.035-2.324v-3.195l4.069,0.292l4.07,0.29l3.488,1.452l0.291,1.452l-2.035,1.452l1.744,1.451l-0.291,1.162l-5.231,2.033l-3.779,0.291l-2.907-0.581l-0.872,1.161l-2.617,2.323l-0.872,1.453l-3.196,1.743l-3.78,0.29l-2.325,1.162l-0.292,1.741l-3.197,0.291l-3.198,2.324l-2.907,2.904l-1.162,2.323l-0.292,3.194l4.07,0.291l1.454,2.614l1.163,2.033l3.779-0.582l5.232,1.453l2.616,0.871l2.035,1.452l3.489,0.582l2.907,1.162l4.651,0.29l2.906,0.291l-0.581,2.323l0.872,2.614l2.035,3.194l4.07,2.613l2.326-0.871l1.452-2.903l-1.452-4.357l-2.035-1.452l4.36-1.162l3.197-2.033l1.455-1.742l-0.292-2.032l-1.744-2.324L257.5,69.22l3.489-2.904l-1.162-2.323l-1.163-4.355l2.034-0.582l4.651,0.582l2.907,0.29l2.326-0.581l2.616,0.872l3.198,1.451l0.872,1.162l4.941,0.291v2.323l0.872,3.484l2.616,0.291l1.745,1.742l4.07-1.742l2.616-2.904l1.744-1.161l2.325,2.323l3.488,3.484l3.198,3.195l-1.163,1.742l3.487,1.742l2.616,1.451l4.36,0.872l1.744,0.871l1.163,2.324l2.035,0.29l1.163,0.872l0.291,3.194l-2.035,1.161l-2.035,0.872l-4.65,0.871l-3.198,2.323l-4.942,0.582l-5.814-0.582h-4.07h-2.906l-2.326,2.033l-3.488,1.162l-3.779,3.775l-3.197,2.613l2.325-0.58l4.36-3.486l5.814-2.322l4.069-0.291l2.326,1.162l-2.616,2.032l0.872,2.905l0.872,2.032l3.779,1.452l4.361-0.581l2.906-2.903l0.292,2.032l1.744,0.871l-3.489,1.742l-6.104,1.743l-2.616,1.161l-3.198,2.033l-2.034-0.291l-0.29-2.323l4.94-2.324h-4.36l-3.197,0.291l-1.744-1.452v-3.775l-1.163-0.87l-2.035,0.581l-0.872-0.581l-2.035,2.032l-0.873,2.033l-0.872,1.162l-1.162,0.58h-0.872l-0.292,0.871h-5.232h-4.07l-1.163,0.581l-2.907,1.743l-0.291,0.29l-0.872,1.162h-2.616h-2.616l-1.454,0.291l0.582,0.581l0.291,0.871l-0.291,0.291l-3.488,1.453l-2.907,0.29l-3.197,1.452h-0.581l-0.872-0.29l-0.292-0.581v-0.29l0.581-0.873l1.163-1.451l0.872-1.742l-0.58-2.323l-0.583-2.613l-2.906-1.162l0.581-0.581l-0.581-0.29h-0.581l-0.583-0.291l-0.29-0.871l-0.583,0.291h-0.58v-0.291l-0.582-0.291l-0.291-0.58l-2.035-0.871l-2.326-0.872l-2.616-1.162l-2.617-1.161l-2.326,0.87h-0.872l-3.488-0.581l-2.325,0.291l-2.616-0.871l-2.907-0.291l-1.744-0.291l-0.871-0.581l-0.582-1.452h-0.873v1.161h-5.813h-9.302h-9.302h-8.43h-8.138h-8.14h-8.43h-2.616h-8.139h-7.849h-0.582l-5.231-2.613l-2.036-1.452l-4.941-0.871l-1.454-2.614l0.291-1.742l-3.488-1.161l-0.291-2.033l-3.488-2.033v-1.452l1.454-1.452v-1.743l-4.65-1.742l-2.908-2.903l-1.744-2.033l-2.616-1.162l-1.744-1.162l-1.454-1.451l-2.616,0.871L95.3,68.93l-2.326-1.741l-2.035-1.162l-2.616-0.872h-2.616V49.475V39.311l5.232,0.581l4.069,1.453h2.907l2.616-0.871l3.198-0.871l4.07,0.29l4.069-1.162l4.651-0.87l1.744,1.162l2.035-0.581l0.872-1.452l1.744,0.29l4.651,2.613l3.778-1.742l0.292,2.033l3.487-0.581l0.872-0.872l3.487,0.292l4.071,1.161l6.395,0.871l3.779,0.582l2.907-0.291l3.488,1.452l-3.779,1.453l4.94,0.581l7.559-0.291l2.325-0.581l2.906,1.742l2.908-1.451l-2.616-1.162l1.744-0.871l3.196-0.291l2.326-0.29l2.035,0.871l2.907,1.452l3.197-0.291l4.65,1.162l4.361-0.291h4.07l-0.291-1.742l2.326-0.581l4.36,1.162v2.614l1.744-2.324h2.035l1.454-2.614l-3.198-1.742l-3.196-1.162l0.291-2.903l3.198-2.033l3.778,0.29l2.617,1.453l3.779,2.904l-2.326,1.451L224.653,39.891zM159.54,29.728l-1.453,1.453l6.104-0.871l3.779,1.451l3.197-1.451l2.617,0.871l2.035,2.613l1.454-1.161l-1.745-2.615l2.327-0.581l2.615,0.581l3.198,1.162l1.744,2.613l0.872,2.033l4.651,1.162l4.941,1.452l-0.29,1.162l-4.651,0.29l1.744,0.872l-0.873,1.162l-4.941-0.581l-4.651-0.581h-3.198l-5.231,1.162l-6.977,0.291l-4.941,0.29l-1.454-1.452l-3.778-0.58l-2.617,0.29l-3.198-2.323l1.744-0.291l4.36-0.29h3.778l3.488-0.291l-5.233-0.871l-5.813,0.291h-4.069l-1.454-1.162l6.396-0.871h-4.07l-4.941-0.872l2.325-2.033l2.036-1.162l7.267-1.452L159.54,29.728zM185.993,29.147l-2.326,1.742l-4.361-2.032l1.163-0.291h3.488L185.993,29.147zM263.604,30.018l0.291,0.582h-2.907h-2.906l-3.197,0.29l-0.582-0.29l-3.198-1.452l0.291-0.872l1.163-0.291l6.396,0.291L263.604,30.018zM235.409,29.728l2.325,1.743l2.326-2.323l6.977-0.872l4.941,2.614l-0.582,2.033l5.523-0.871l2.616-1.162l6.104,1.451l3.78,1.162l0.29,1.162l5.233-0.581l2.906,1.742l6.687,1.162l2.326,1.161l2.616,2.614l-5.233,1.162l6.687,1.742l4.359,0.582l3.779,2.613l4.36,0.29l-0.872,1.743l-4.651,3.194l-3.488-1.162l-4.36-2.613l-3.488,0.291l-0.291,1.742l2.907,1.452l3.778,1.452l0.872,0.581l2.036,2.904l-1.164,1.743l-3.488-0.582l-6.685-2.323l3.779,2.323l2.906,1.743l0.292,0.871l-7.268-0.871l-6.104-1.743l-3.198-1.161l0.872-0.871l-4.07-1.451l-4.07-1.453v0.871l-7.848,0.582L257.5,53.25l1.745-2.033h5.232l5.814-0.291l-1.163-0.871l1.163-1.452l3.488-2.613l-0.872-1.162l-0.873-1.162l-4.36-1.162l-5.522-1.161l1.743-0.581l-2.907-1.742h-2.325l-2.326-1.162l-1.453,0.87l-4.942,0.292l-9.883-0.581l-5.814-0.581l-4.651-0.582l-2.325-0.871l2.908-1.451h-3.78l-0.872-2.615l2.036-2.613l2.906-0.87l6.977-0.872L235.409,29.728zM197.62,27.985l3.198,0.582l4.942-0.582l0.582,0.872l-2.617,1.452l4.361,1.162l-0.582,2.323l-4.361,1.162l-2.907-0.291l-1.744-0.871l-6.976-2.323l0.29-0.871l5.523,0.29l-3.196-1.742L197.62,27.985zM217.096,30.89l-2.907,2.033h-3.197l-1.454-2.613v-1.452l1.454-1.162l2.616-0.581h5.814l5.232,0.871l-4.069,2.324L217.096,30.89zM142.099,34.665l-7.267,1.162l-1.453-1.162l-6.396-1.452l1.455-1.162l1.743-2.033l2.326-1.742l-2.615-1.742l9.301-0.29l4.07,0.581h6.976l2.616,0.871l2.907,1.162l-3.488,0.87l-6.686,1.743l-3.488,2.032V34.665zM216.224,24.792l-1.744,1.162l-3.778-0.291l-3.489-0.871l1.453-1.162l4.07-0.58l2.326,0.871L216.224,24.792zM202.562,19.855l2.035,1.452l0.291,1.452l-1.454,2.033l-4.36,0.291l-2.908-0.582v-1.452h-4.65v-2.033h2.906l4.07-0.871l4.07,0.291V19.855zM175.819,21.307l1.163,1.162l2.324-0.582l2.907,0.291l0.582,1.161l-1.745,1.453l-9.301,0.291l-6.977,1.162h-4.07l-0.291-0.873l5.523-1.16l-12.208,0.29l-4.07-0.29l3.779-2.904l2.616-0.581l7.848,0.871l4.942,1.453l4.651,0.29l-3.779-2.613l2.326-0.871l2.907,0.29L175.819,21.307zM213.026,18.984l3.198,0.872h5.523l2.326,0.871l-0.582,1.161l2.906,0.582l1.744,0.58h3.779l4.069,0.29l4.361-0.58l5.522-0.29l4.651,0.29l2.907,0.871l0.582,1.162l-1.744,0.871l-4.07,0.582l-3.488-0.291l-7.848,0.291h-5.813l-4.36-0.291l-7.268-0.871l-0.872-1.453l-0.582-1.451l-2.617-1.162l-5.814-0.291l-3.196-0.871l1.163-1.162L213.026,18.984zM154.018,17.532l-0.582,2.033l-2.035,0.871l-2.616,0.29l-4.941,1.161l-4.65,0.291l-3.488-0.582l4.651-2.032l5.523-1.742h4.36L154.018,17.532zM215.351,17.823h-1.163l-5.231-0.291l-0.582-0.581h5.522l1.744,0.581L215.351,17.823zM170.586,17.243l-5.232,0.87l-4.071-0.87l2.326-0.873l3.779-0.29l4.07,0.29L170.586,17.243zM172.04,14.919l-3.488,0.291H163.9v-0.291l2.907-0.872l1.453,0.29L172.04,14.919zM210.12,16.37l-4.07,0.581l-2.326-0.87l-1.163-0.871l-0.291-1.162h3.488l1.744,0.29l3.198,0.872L210.12,16.37zM198.201,15.499l1.163,1.162l-4.361-0.291l-4.65-0.871h-6.104l2.616-0.871l-3.198-0.581l-0.291-1.162l5.524,0.291l7.266,1.161L198.201,15.499zM234.246,12.015l3.198,0.871l-3.779,0.582l-4.942,2.322h-4.942l-5.813-0.291l-2.907-1.162v-0.87l2.325-0.872h-4.941l-3.198-0.872l-1.744-1.162l2.034-1.161l1.744-0.871l2.907-0.291l-1.163-0.581l6.395-0.29l3.489,1.452l4.651,0.871l4.36,0.29L234.246,12.015zM285.116,2.432l7.558,0.29l5.813,0.291l4.942,0.58v0.873l-6.685,1.161l-6.687,0.581l-2.616,0.582h6.104L287.15,8.53l-4.651,0.581l-4.651,2.324l-5.813,0.58l-1.744,0.581l-8.139,0.291l3.778,0.291l-2.035,0.58l2.326,1.162l-2.616,1.162l-4.36,0.581l-1.162,1.162l-3.779,0.871l0.291,0.581h4.65v0.581l-7.267,1.741l-7.268-0.871l-7.848,0.291l-4.361-0.291h-4.941l-0.581-1.452l5.231-0.581l-1.454-2.033h1.744l7.268,1.162l-3.779-1.742l-4.36-0.582l2.326-1.162l4.651-0.581l0.872-0.871l-3.779-1.162l-1.163-1.451h7.558l2.034,0.29l4.361-0.87l-6.105-0.291h-9.883L227.85,8.53l-2.325-1.162l-3.197-0.581l-0.582-1.162l4.07-0.291l3.197-0.29l5.232-0.291l4.07-1.162l3.488,0.291l2.906,0.582l2.327-1.453l3.487-0.291l4.942-0.29l8.429-0.291l1.454,0.291l7.849-0.291h6.104L285.116,2.432z",
						"CD" : "M558.648,221.382l-0.289,3.196l1.162,0.289l-0.873,0.871l-0.871,0.872l-1.163,1.451l-0.581,1.161l-0.291,2.324l-0.582,0.871l0.000,2.324l-0.871,0.580l0.000,1.742l-0.290,0.290l-0.293,1.453l0.583,1.161l0.290,3.484l0.581,2.324l-0.290,1.452l0.290,1.742l1.744,1.452l1.455,3.485l-1.163,-0.290l-3.490,0.581l-0.873,0.290l-0.873,1.742l0.873,1.161l-0.580,3.195l-0.293,2.904l0.584,0.291l2.035,1.160l0.581,-0.581l0.289,2.904l-2.033,0.000l-1.163,-1.451l-0.872,-1.162l-2.325,-0.291l-0.581,-1.452l-1.745,0.873l-2.036,-0.291l-0.871,-1.452l-1.743,-0.291l-1.454,0.291l0.000,-0.872l-1.164,-0.290l-1.161,0.000l-1.745,0.290l-1.162,0.000l-0.581,0.292l0.000,-3.196l-0.873,-1.162l-0.290,-1.740l0.579,-1.453l-0.579,-1.161l0.000,-1.743l-3.488,0.000l0.289,-0.871l-1.452,0.000l0.000,0.290l-1.745,0.291l-0.581,1.452l-0.582,0.871l-1.452,-0.581l-0.873,0.581l-2.033,0.000l-0.874,-1.452l-0.581,-0.871l-0.871,-1.453l-0.582,-2.032l-8.140,-0.290l-1.162,0.581l-0.581,-0.291l-1.163,0.581l-0.582,-0.871l0.874,-0.291l0.000,-1.161l0.578,-0.872l0.874,-0.580l0.871,0.291l0.873,-0.873l1.452,0.000l0.292,0.582l0.871,0.580l1.744,-1.741l1.456,-1.454l0.870,-0.870l-0.289,-2.033l1.162,-2.903l1.453,-1.162l1.746,-1.452l0.290,-0.871l0.000,-1.162l0.581,-0.871l-0.292,-1.451l0.292,-2.614l0.579,-1.451l0.874,-1.744l0.291,-1.452l0.289,-2.032l0.874,-1.452l1.452,-0.870l2.326,0.870l1.745,1.162l2.033,0.290l2.036,0.580l0.871,-1.742l0.291,-0.290l1.454,0.290l2.907,-1.160l1.163,0.579l0.871,-0.290l0.291,-0.580l1.163,-0.291l2.034,0.291l1.744,0.000l0.873,-0.291l1.743,2.323l1.161,0.291l0.873,-0.291l1.166,0.000l1.450,-0.581l0.874,1.162l-2.325,-2.032z",
						"CF" : "M515.918,210.638l2.325,-0.290l0.293,-0.871l0.579,0.291l0.582,0.580l3.488,-1.162l1.163,-1.161l1.454,-0.872l-0.292,-0.870l0.871,-0.291l2.618,0.291l2.617,-1.452l2.034,-2.905l1.452,-1.161l1.744,-0.581l0.292,1.162l1.452,1.742l0.000,1.162l-0.289,1.163l0.000,0.870l0.871,0.870l2.327,1.162l1.452,1.162l0.000,0.871l1.743,1.452l1.163,1.161l0.873,1.743l2.034,0.871l0.292,0.871l-0.873,0.291l-1.744,0.000l-2.034,-0.291l-1.163,0.291l-0.291,0.580l-0.871,0.290l-1.163,-0.579l-2.907,1.160l-1.454,-0.290l-0.291,0.290l-0.871,1.742l-2.036,-0.580l-2.033,-0.290l-1.745,-1.162l-2.326,-0.870l-1.452,0.870l-0.874,1.452l-0.289,2.032l-1.744,-0.290l-2.036,-0.290l-1.452,1.451l-1.455,2.325l-0.289,-0.581l-0.292,-1.453l-1.163,-0.872l-1.161,-1.452l0.000,-0.870l-1.454,-1.452l0.289,-0.870l-0.289,-1.162l0.289,-2.033l0.581,-0.581l-1.455,2.614z",
						"CG" : "M509.523,244.033l-0.874,-0.871l-0.870,0.581l-1.163,1.163l-2.325,-2.906l2.035,-1.742l-0.872,-1.743l0.872,-0.580l1.745,-0.291l0.289,-1.451l1.454,1.451l2.616,0.000l0.581,-1.162l0.582,-1.741l-0.291,-2.324l-1.454,-1.452l1.163,-3.194l-0.581,-0.580l-2.036,0.000l-0.871,-1.162l0.291,-1.451l3.488,0.289l2.034,0.581l2.327,0.871l0.289,-1.741l1.455,-2.325l1.452,-1.451l2.036,0.290l1.744,0.290l-0.291,1.452l-0.874,1.744l-0.579,1.451l-0.292,2.614l0.292,1.451l-0.581,0.871l0.000,1.162l-0.290,0.871l-1.746,1.452l-1.453,1.162l-1.162,2.903l0.289,2.033l-0.870,0.870l-1.456,1.454l-1.744,1.741l-0.871,-0.580l-0.292,-0.582l-1.452,0.000l-0.873,0.873l0.871,0.291z",
						"CH" : "M500.22,100.292l0.000,0.580l-0.289,0.581l1.162,0.581l1.452,0.000l-0.289,1.162l-1.163,0.290l-2.034,-0.290l-0.583,1.161l-1.453,0.000l-0.291,-0.290l-1.744,0.871l-1.160,0.000l-1.165,-0.581l-0.871,-1.161l-1.454,0.580l0.000,-1.451l2.034,-1.453l0.000,-0.580l1.163,0.291l0.873,-0.582l2.324,0.000l0.582,-0.580l-2.906,-0.871z",
						"CI" : "M465.919,217.317l-1.162,0.000l-2.034,-0.580l-1.744,0.000l-3.197,0.580l-2.036,0.581l-2.615,1.162l-0.582,0.000l0.289,-2.323l0.293,-0.291l-0.293,-1.162l-1.162,-1.161l-0.871,-0.290l-0.582,-0.581l0.582,-1.452l-0.291,-1.162l0.000,-0.870l0.581,0.000l0.000,-1.162l-0.290,-0.581l0.290,-0.290l1.162,-0.290l-0.871,-2.323l-0.581,-1.163l0.290,-0.871l0.581,-0.290l0.292,-0.292l0.870,0.582l2.037,0.000l0.582,-0.871l0.581,0.000l0.582,-0.291l0.579,1.162l0.583,-0.290l1.161,-0.292l1.165,0.582l0.579,0.871l1.164,0.581l0.872,-0.581l1.452,-0.291l1.744,0.872l0.874,3.775l-1.164,2.323l-0.872,3.195l1.162,2.323l0.000,-1.161z",
						"CL" : "M284.825,375.578v6.389h2.907h1.745l-0.872,1.162l-2.326,0.87l-1.454-0.291l-1.744-0.289l-1.744-0.582l-2.907-0.58l-3.487-1.451l-2.907-1.453l-3.779-3.193l2.326,0.58l3.778,2.033l3.78,0.87l1.453-1.16l0.872-2.033l2.326-1.162L284.825,375.578zM285.987,289.915l1.163,4.065l2.035-0.582l0.291,0.872l-1.163,2.613l-2.907,1.451v4.646l-0.582,0.87l0.872,1.163l-1.744,1.741l-2.035,2.324l-0.872,2.614l0.291,2.612l-1.744,2.904l1.163,4.646l0.873,0.58v2.613l-1.744,2.613l0.29,2.323l-2.326,1.742l0.292,2.613l0.581,2.615l-1.453,0.87l-0.872,2.613l-0.582,2.904l0.582,3.193l-1.164,0.581l0.582,3.194l1.162,1.162l-0.873,1.162l1.454,0.289l0.29,1.162l-1.452,0.58l0.291,1.451l-0.872,3.775l-1.455,2.323l0.292,1.453l-0.873,1.741l-2.035,1.161l0.291,2.904l0.873,0.873h1.744v2.03l1.163,1.453l6.685,0.58l2.617,0.29h-2.617l-1.163,0.581l-2.616,1.162l-0.291,2.612h-1.162l-3.198-0.87l-3.198-2.032l-3.488-1.453l-0.872-1.74l0.872-1.744l-1.454-1.742l-0.291-4.646l1.163-2.614l2.907-2.323l-4.07-0.581l2.617-2.612l0.872-4.357l2.907,0.873l1.453-5.808l-1.744-0.581l-0.872,3.484l-1.744-0.582l0.872-3.773l0.872-5.228l1.454-1.742l-0.872-2.905l-0.291-2.902l1.163-0.29l1.744-4.356l1.744-4.356l1.162-4.064l-0.581-4.065l0.872-2.323l-0.292-3.485l1.744-3.192l0.292-5.518l0.872-5.519l0.871-6.388v-4.356l-0.582-3.774l1.163-0.872l0.872-1.45l1.454,2.032l0.291,2.031l1.454,1.163l-0.872,2.612L285.987,289.915z",
						"CM" : "M509.814,224.578l-0.291,0.000l-1.744,0.289l-1.744,-0.289l-1.163,0.000l-4.652,0.000l0.582,-2.034l-1.163,-1.742l-1.163,-0.582l-0.581,-1.160l-0.872,-0.581l0.000,-0.581l0.872,-2.032l1.164,-2.614l0.872,0.000l1.743,-1.743l0.871,0.000l1.746,1.161l1.744,-0.870l0.291,-1.162l0.580,-1.161l0.581,-1.452l1.455,-1.161l0.581,-1.742l0.582,-0.582l0.289,-1.452l0.873,-1.742l2.326,-2.323l0.000,-0.872l0.289,-0.580l-1.163,-0.871l0.292,-0.871l0.582,-0.291l1.162,1.742l0.292,1.743l-0.292,2.032l1.453,2.324l-1.453,0.000l-0.581,0.289l-1.455,-0.289l-0.579,1.161l1.742,1.743l1.165,0.581l0.289,1.161l0.872,1.743l-0.290,0.870l-1.455,2.614l-0.581,0.581l-0.289,2.033l0.289,1.162l-0.289,0.870l1.454,1.452l0.000,0.870l1.161,1.452l1.163,0.872l0.292,1.453l0.289,0.581l-0.289,1.741l-2.327,-0.871l-2.034,-0.581l3.488,0.289z",
						"CN" : "M777.533,179.567l-2.325,1.451l-2.326-0.871v-2.323l1.163-1.453l3.196-0.581h1.455l0.581,0.872l-1.163,1.451L777.533,179.567zM825.204,94.194l4.651,0.871l3.488,1.742l0.871,2.614h4.361l2.325-0.872l4.651-0.871l-1.454,2.323l-1.163,1.162l-0.871,2.904l-2.034,2.613l-3.198-0.291l-2.325,0.871l0.581,2.324l-0.29,3.194l-1.454,0.291v1.161l-1.744-1.451l-1.163,1.451l-4.067,1.162l0.289,1.453h-2.325l-1.452-0.872l-1.745,2.032l-3.198,1.453l-2.033,1.742l-3.781,0.871l-2.033,1.162l-3.197,0.871l1.452-1.453l-0.58-1.16l2.325-1.742l-1.455-1.453l-2.324,1.162l-3.197,1.742l-1.745,1.742l-2.615,0.291l-1.452,1.16l1.452,1.743l2.326,0.581v1.162l2.325,0.872l2.906-2.033l2.616,1.162h1.744l0.289,1.452l-3.777,0.871l-1.454,1.452l-2.615,1.453l-1.453,1.742l3.196,1.742l0.872,2.614l1.743,2.613l1.745,2.033v2.033l-1.745,0.581l0.873,1.453l1.455,0.87l-0.292,2.324l-0.873,2.323h-1.452l-2.034,3.194l-2.326,3.484l-2.327,3.195l-3.778,2.613l-4.069,2.323l-2.905,0.291l-1.744,1.162l-0.873-0.871l-1.743,1.452l-3.779,1.451l-2.906,0.291l-0.872,2.904l-1.454,0.29l-0.873-2.033l0.584-1.162l-3.488-0.872l-1.455,0.581l-2.615-0.87l-1.454-0.873l0.581-1.742l-2.615-0.581l-1.452-0.871l-2.328,1.451l-2.615,0.291h-2.034l-1.454,0.58l-1.453,0.582l0.29,2.903h-1.455l-0.289-0.581v-1.161l-2.034,0.87l-1.163-0.581l-2.035-1.162l0.872-2.033l-1.743-0.581l-0.873-2.613l-2.905,0.58l0.29-3.484l2.615-2.323l0.291-2.033l-0.291-2.323l-1.161-0.581l-0.873-1.452h-1.455l-3.194-0.291l1.161-1.161l-1.455-1.743l-2.034,1.162l-2.033-0.581l-3.198,1.742l-2.615,2.033l-2.326,0.29l-1.162-0.872h-1.453l-2.035-0.58l-1.454,0.58l-1.743,2.033l-0.292-2.033l-1.744,0.582L713,154.013l-2.906-0.581l-2.326-1.162l-2.034-0.581l-1.162-1.452l-1.454-0.291l-2.615-1.742l-2.326-0.871l-1.162,0.581l-3.781-2.033l-2.615-1.742l-0.873-2.904l2.036,0.291v-1.453l-1.163-1.161l0.293-2.324l-2.908-3.194l-4.361-1.161l-0.87-2.033l-2.036-1.451l-0.58-0.582l-0.292-1.742v-1.161l-1.743-0.582l-0.874,0.291l-0.579-2.324l0.579-0.871l-0.289-0.581l2.615-1.162l2.036-0.58l2.906,0.291l0.871-1.744l3.489-0.29l1.162-1.162l4.362-1.451l0.289-0.581l-0.289-1.743l2.033-0.581l-2.617-4.646l5.524-1.162l1.452-0.58l2.034-4.938l5.232,0.873l1.744-1.162v-2.904l2.328-0.291l2.033-1.742l1.163-0.29l0.581,2.032l2.326,1.452l4.067,0.872l1.746,2.323l-0.873,3.194l0.873,1.162l3.197,0.582l3.778,0.29l3.488,1.742l1.743,0.291l1.163,2.613l1.455,1.453h3.196l5.522,0.58l3.78-0.291l2.615,0.291l4.069,1.743h3.489l1.162,0.871l3.197-1.451l4.361-0.873l4.359-0.29l3.198-0.871l1.745-1.452l2.033-0.871l-0.581-0.872l-0.873-1.161l1.454-1.742l1.745,0.29l2.614,0.581l2.908-1.452l4.069-1.162l2.034-1.742l2.035-0.872l4.07-0.29l2.034,0.29l0.291-1.162l-2.325-1.741l-2.326-0.872l-2.036,0.872l-2.904-0.291l-1.455,0.291l-0.581-1.162l1.744-2.613l1.453-2.324l3.197,1.162l4.068-1.742v-1.162l2.328-2.903l1.452-0.872v-1.452l-1.452-0.871l2.325-1.162l3.486-0.58h3.491l4.067,0.58l2.617,1.162l1.744,2.903l0.871,1.161l0.874,1.453L825.204,94.194z",
						"CO" : "M266.221,231.256l-1.163,-0.582l-1.163,-0.870l-0.871,0.290l-2.326,-0.290l-0.582,-1.161l-0.580,0.000l-2.907,-1.452l-0.291,-0.872l1.162,-0.290l-0.290,-1.451l0.582,-0.873l1.452,-0.289l1.164,-1.744l1.161,-1.452l-1.161,-0.580l0.580,-1.452l-0.580,-2.613l0.580,-0.580l-0.580,-2.325l-1.164,-1.451l0.582,-1.451l0.872,0.289l0.582,-0.871l-0.872,-1.741l0.290,-0.292l1.454,0.000l2.034,-2.031l1.163,-0.291l0.000,-0.872l0.581,-2.322l1.744,-1.162l1.745,0.000l0.000,-0.582l2.325,0.291l2.035,-1.451l1.163,-0.582l1.454,-1.451l0.872,0.290l0.580,0.581l-0.290,0.871l-2.035,0.581l-0.581,1.452l-1.163,0.580l-0.581,1.162l-0.582,2.033l-0.581,1.452l1.453,0.290l0.291,1.161l0.580,0.582l0.292,1.161l-0.292,1.161l0.000,0.581l0.583,0.000l0.872,1.162l3.488,-0.291l1.453,0.291l2.035,2.323l1.163,-0.290l2.034,0.290l1.454,-0.290l0.872,0.290l-0.291,1.452l-0.872,0.871l0.000,2.033l0.581,2.033l0.582,0.580l0.291,0.580l-1.454,1.453l0.872,0.580l0.873,1.162l0.872,2.614l-0.581,0.290l-0.582,-1.452l-0.873,-0.871l-0.871,0.871l-5.233,0.000l0.000,1.742l1.745,0.290l-0.291,0.871l-0.582,-0.290l-1.453,0.581l0.000,2.033l1.162,0.871l0.582,1.743l-0.291,1.161l-1.163,7.551l-1.452,-1.454l-0.582,-0.290l1.744,-2.613l-2.326,-1.452l-1.452,0.290l-1.164,-0.579l-1.453,0.870l-2.035,-0.291l-1.744,-2.903l-1.163,-0.870l-0.872,-1.163l-1.744,-1.452l0.872,-0.291z",
						"CR" : "M245.292,208.315l-1.453,-0.580l-0.582,-0.582l0.291,-0.580l0.000,-0.581l-0.872,-0.579l-0.872,-0.582l-1.163,-0.291l0.000,-0.872l-0.872,-0.580l0.291,0.871l-0.582,0.581l-0.581,-0.581l-0.872,-0.291l-0.291,-0.580l0.000,-0.871l0.291,-0.871l-0.872,-0.291l0.581,-0.580l0.581,-0.291l1.745,0.581l0.581,-0.290l0.871,0.290l0.583,0.581l0.872,0.000l0.581,-0.581l0.580,1.452l1.164,1.162l1.162,1.161l-0.872,0.291l0.000,1.161l0.583,0.291l-0.583,0.581l0.291,0.289l-0.291,0.582l0.290,-0.580z",
						"CU" : "M247.326,167.081l2.326,0.290l2.326,0.000l2.325,0.871l1.163,1.161l2.616,-0.290l0.873,0.581l2.325,1.743l1.744,1.161l0.871,0.000l1.744,0.581l-0.290,0.871l2.035,0.000l2.325,1.161l-0.581,0.581l-1.744,0.291l-1.745,0.290l-2.035,-0.290l-3.778,0.290l1.743,-1.452l-1.161,-0.871l-1.744,0.000l-0.872,-0.871l-0.582,-1.742l-1.744,0.289l-2.616,-0.870l-0.582,-0.581l-3.779,-0.291l-0.872,-0.581l0.872,-0.580l-2.616,-0.290l-2.034,1.451l-1.163,0.000l-0.292,0.580l-1.452,0.292l-1.163,0.000l1.454,-0.872l0.581,-1.161l1.453,-0.581l1.163,-0.581l2.325,-0.290l-0.581,0.290z",
						"CY" : "M567.37,134.557l0.000,0.291l-2.909,1.161l-1.162,-0.581l-0.874,-1.161l1.456,0.000l0.580,0.290l0.582,-0.290l0.582,0.000l0.290,0.290l0.581,0.000l0.581,0.000l-0.293,0.000z",
						"CZ" : "M520.57,97.388l-1.455,-0.581l-1.163,0.000l-2.326,-0.581l-0.871,0.000l-1.453,1.162l-2.035,-0.871l-1.744,-1.161l-1.163,-0.582l-0.289,-1.161l-0.584,-0.872l2.036,-0.580l0.871,-0.871l2.036,-0.291l0.581,-0.581l0.871,0.290l1.165,-0.290l1.453,0.872l2.036,0.291l-0.293,0.580l1.454,0.580l0.581,-0.580l1.746,0.290l0.290,0.872l2.034,0.290l1.454,1.161l-0.874,0.000l-0.580,0.582l-0.582,0.000l-0.292,0.581l-0.289,0.289l-0.290,0.291l-0.871,0.290l-1.165,0.000l0.289,-0.581z",
						"DE" : "M501.093,79.674l0.000,1.161l2.906,0.582l0.000,0.872l2.617,-0.291l1.744,-0.872l2.907,1.163l1.452,0.870l0.583,1.452l-0.872,0.581l1.163,1.162l0.581,1.452l-0.292,0.870l1.165,1.742l-1.165,0.290l-0.871,-0.290l-0.581,0.581l-2.036,0.291l-0.871,0.871l-2.036,0.580l0.584,0.872l0.289,1.161l1.163,0.582l1.744,1.161l-1.162,1.162l-0.872,0.580l0.290,1.742l-0.290,0.291l-0.584,-0.581l-1.452,0.000l-2.034,0.581l-2.326,-0.291l-0.292,0.871l-1.452,-0.871l-0.873,0.291l-2.906,-0.871l-0.582,0.580l-2.324,0.000l0.290,-2.032l1.455,-1.743l-4.070,-0.580l-1.166,-0.581l0.000,-1.452l-0.579,-0.581l0.290,-1.742l-0.290,-2.904l1.454,0.000l0.871,-1.162l0.581,-2.323l-0.581,-1.161l0.581,-0.581l2.327,0.000l0.582,0.581l1.742,-1.451l-0.581,-0.872l0.000,-1.743l2.035,0.581l-1.744,0.581z",
						"DJ" : "M592.368,196.119l0.581,0.871l0.000,1.161l-1.453,0.582l1.161,0.580l-1.161,1.452l-0.583,-0.290l-0.581,0.000l-1.743,0.000l0.000,-0.871l0.000,-0.581l0.871,-1.452l0.872,-1.162l1.164,0.291l-0.872,0.581z",
						"DK" : "M508.649,77.933l-1.743,2.323l-2.615-1.452l-0.582-1.162l4.07-0.872L508.649,77.933zM503.708,75.609l-0.581,1.162l-0.871-0.291l-2.036,2.033l0.873,1.161l-1.744,0.582l-2.035-0.582l-1.161-1.451v-2.904l0.289-0.581l0.872-0.871h2.325l1.163-0.871l2.035-0.871v1.453l-0.872,0.87l0.291,0.871L503.708,75.609z",
						"DO" : "M276.396,176.664l0.290,-0.291l2.034,0.000l1.744,0.580l0.872,0.000l0.291,0.872l1.454,0.000l0.000,0.871l1.162,0.000l1.454,1.162l-0.872,1.161l-1.453,-0.871l-1.164,0.290l-0.872,-0.290l-0.581,0.581l-1.163,0.290l-0.290,-0.871l-0.873,0.581l-1.161,1.743l-0.872,-0.291l0.000,-0.871l0.000,-0.872l-0.582,-0.580l0.582,-0.582l0.290,-1.161l0.290,1.451z",
						"DZ" : "M506.906,166.5l-9.592,5.226l-7.849,5.227l-4.070,1.453l-2.906,0.000l0.000,-1.742l-1.452,-0.291l-1.454,-0.872l-0.873,-1.161l-9.301,-6.098l-9.301,-6.098l-10.176,-6.679l0.000,-0.291l0.000,-0.290l0.000,-3.194l4.361,-2.032l2.906,-0.581l2.036,-0.581l1.162,-1.452l3.197,-1.162l0.000,-2.032l1.744,-0.291l1.162,-0.870l3.782,-0.582l0.289,-0.871l-0.582,-0.580l-0.871,-2.905l-0.291,-1.742l-1.163,-1.742l2.907,-1.452l2.907,-0.581l1.744,-1.161l2.617,-0.872l4.650,-0.289l4.651,-0.291l1.162,0.291l2.615,-1.162l2.911,0.000l1.160,0.871l2.035,-0.290l-0.581,1.451l0.290,2.614l-0.579,2.323l-1.745,1.451l0.290,2.034l2.325,1.742l0.000,0.581l1.745,1.162l1.163,4.936l0.871,2.322l0.000,1.453l-0.291,2.033l0.000,1.451l-0.291,1.452l0.291,1.743l-1.162,1.161l1.744,2.033l0.000,1.162l1.163,1.451l1.163,-0.580l2.035,1.451l-1.452,-1.743z",
						"EC" : "M252.85,240.258l1.453,-2.033l-0.581,-1.162l-1.163,1.162l-1.744,-1.162l0.581,-0.581l-0.291,-2.613l0.873,-0.580l0.581,-1.454l0.872,-2.031l0.000,-0.872l1.454,-0.581l1.744,-1.160l2.907,1.452l0.580,0.000l0.582,1.161l2.326,0.290l0.871,-0.290l1.163,0.870l1.163,0.582l0.581,2.324l-0.872,1.741l-3.198,2.904l-3.196,0.871l-1.744,2.613l-0.582,1.742l-1.454,1.162l-1.162,-1.451l-1.163,-0.290l-1.163,0.290l0.000,-1.162l0.873,-0.582l0.291,1.160z",
						"EE" : "M540.626,72.125l0.291,-1.743l-0.872,0.290l-1.744,-0.870l-0.291,-1.743l3.489,-0.581l3.488,-0.582l2.906,0.582l2.906,0.000l0.291,0.291l-1.745,1.742l0.582,2.614l-1.163,0.871l-2.034,0.000l-2.614,-1.162l-1.165,-0.290l2.325,-0.581z",
						"EG" : "M569.987,149.947l-0.874,0.872l-0.581,2.323l-0.873,1.162l-0.582,0.580l-0.870,-0.871l-1.164,-1.161l-2.034,-4.066l-0.291,0.291l1.163,2.903l1.744,2.904l2.034,4.065l0.873,1.743l0.871,1.452l2.618,2.904l-0.584,0.580l0.000,1.743l3.198,2.613l0.581,0.580l-10.755,0.000l-10.755,0.000l-11.045,0.000l0.000,-10.162l0.000,-9.873l-0.871,-2.324l0.579,-1.451l-0.289,-1.162l0.871,-1.452l3.779,0.000l2.615,0.581l2.615,0.871l1.456,0.580l2.033,-0.870l1.165,-0.872l2.323,-0.290l2.036,0.290l0.872,1.452l0.580,-0.870l2.036,0.580l2.327,0.290l1.161,-0.870l-2.038,-4.935z",
						"ER" : "M590.332,196.409l-0.872,-0.871l-1.162,-1.452l-1.163,-1.162l-0.871,-0.870l-2.326,-1.162l-1.744,0.000l-0.873,-0.580l-1.453,0.870l-1.743,-1.452l-0.873,2.033l-3.198,-0.581l-0.290,-0.870l1.161,-4.065l0.291,-2.033l0.874,-0.873l2.035,-0.289l1.454,-1.742l1.452,3.193l0.871,2.614l1.454,1.452l3.779,2.613l1.454,1.453l1.453,1.742l0.871,0.871l1.455,0.871l-0.872,0.581l1.164,0.291z",
						"ES" : "M448.769,115.683l0.292,-1.743l-1.163,-1.452l3.778,-1.742l3.489,0.290l3.778,0.000l2.908,0.581l2.324,-0.290l4.362,0.290l1.163,0.871l4.940,1.452l1.163,-0.580l2.907,1.161l3.197,-0.292l0.292,1.454l-2.616,2.032l-3.489,0.580l-0.291,0.872l-1.744,1.451l-1.162,2.324l1.162,1.451l-1.453,1.162l-0.581,1.742l-2.325,0.581l-1.744,2.323l-3.489,0.000l-2.616,0.000l-1.743,0.872l-1.165,1.161l-1.452,-0.291l-0.871,-0.870l-0.874,-1.742l-2.615,-0.291l0.000,-1.162l0.871,-0.871l0.291,-0.871l-0.873,-0.581l0.873,-2.032l-1.162,-1.452l1.162,-0.291l0.000,-1.451l0.582,-0.291l0.000,-2.033l1.163,-0.870l-0.581,-1.452l-1.746,0.000l-0.291,0.290l-1.744,0.000l-0.581,-1.162l-1.163,0.291l1.163,-0.581z",
						"ET" : "M578.125,189.73l1.743,1.452l1.453,-0.870l0.873,0.580l1.744,0.000l2.326,1.162l0.871,0.870l1.163,1.162l1.162,1.452l0.872,0.871l-0.872,1.162l-0.871,1.452l0.000,0.581l0.000,0.871l1.743,0.000l0.581,0.000l0.583,0.290l-0.583,1.161l1.163,1.453l0.873,1.452l1.163,0.871l9.010,3.194l2.328,0.000l-7.850,8.421l-3.780,0.000l-2.324,2.033l-1.744,0.000l-0.874,0.870l-1.743,0.000l-1.161,-0.870l-2.618,1.162l-0.581,1.160l-2.036,-0.290l-0.580,-0.290l-0.580,0.000l-0.874,0.000l-3.489,-2.323l-2.033,0.000l-0.873,-0.871l0.000,-1.742l-1.452,-0.290l-1.455,-3.196l-1.454,-0.580l-0.290,-1.161l-1.452,-1.161l-1.746,-0.291l0.872,-1.452l1.455,0.000l0.582,-0.872l0.000,-2.613l0.579,-2.903l1.454,-0.582l0.292,-1.162l1.163,-2.322l1.743,-1.162l0.872,-2.904l0.581,-2.323l3.198,0.581l-0.873,2.033z",
						"FI" : "M552.544,41.053l-0.584,2.033l4.363,1.743l-2.617,2.032l3.198,3.194l-1.744,2.324l2.325,2.033l-1.162,1.742l4.069,2.032l-0.871,1.161l-2.617,1.742l-5.814,3.485l-4.941,0.291l-4.941,0.871l-4.362,0.580l-1.744,-1.451l-2.615,-0.871l0.581,-2.614l-1.452,-2.613l1.452,-1.453l2.616,-1.742l6.106,-3.193l2.033,-0.582l-0.289,-1.160l-4.072,-1.162l-0.872,-1.162l0.000,-4.065l-4.361,-2.033l-3.486,-1.452l1.453,-0.581l3.198,1.452l3.488,0.000l2.908,0.581l2.615,-1.162l1.452,-2.032l4.362,-1.162l3.487,1.162l1.162,-2.032z",
						"FJ" : "M964.732,278.588l0.873,0.871l-0.292,1.452l-1.744,0.291l-1.452-0.291l-0.292-1.162l0.873-0.87l1.455,0.291L964.732,278.588zM969.382,276.557l-1.741,0.579l-2.036,0.582l-0.292-1.161l1.455-0.291l0.873-0.291l1.741-0.871h-0.01h0.58l-0.29,1.162l-0.29,0.291H969.382z",
						"FK" : "M305.173,373.544l3.488,-1.741l2.326,0.870l1.744,-1.161l2.034,1.161l-0.872,0.871l-3.778,0.872l-1.164,-0.872l-2.325,1.162l1.453,1.162z",
						"FR" : "M329.008,223.997l-0.873,1.162h-1.453l-0.29-0.581l-0.582-0.292l-0.872,0.873l-1.162-0.581l0.581-1.162l0.291-1.162l0.582-1.161l-1.164-1.742l-0.289-1.743l1.453-2.612l0.872,0.289l2.034,0.872l2.907,2.323l0.582,1.161l-1.744,2.323L329.008,223.997zM500.22,115.102l-1.161,2.033l-1.164-0.582l-0.581-1.742l0.581-1.162l1.744-0.871L500.22,115.102zM483.652,92.451l2.036,1.162h1.162l2.615,1.162l0.581,0.291h0.871l1.165,0.581l4.07,0.58l-1.455,1.744l-0.29,2.032l-0.873,0.581l-1.163-0.291v0.581l-2.033,1.453v1.452l1.453-0.581l0.871,1.162l-0.291,0.871l0.872,1.162l-0.872,0.871l0.582,2.033l1.454,0.291l-0.291,1.162l-2.325,1.452l-5.523-0.581l-4.069,0.872l-0.292,1.741l-3.196,0.292l-2.907-1.162l-1.163,0.58l-4.94-1.452l-1.163-0.872l1.452-1.742l0.582-5.517l-2.907-2.905l-2.034-1.451l-4.36-0.872v-2.033l3.488-0.581l4.651,0.581l-0.872-2.903l2.615,1.162l6.396-2.324l0.87-2.324l2.325-0.29l0.293,0.872h1.452L483.652,92.451z",
						"GA" : "M504.291,242l-2.908,-2.904l-1.744,-2.322l-1.744,-2.905l0.291,-0.871l0.582,-0.871l0.581,-2.033l0.582,-2.033l0.871,0.000l4.070,0.000l0.000,-3.483l1.163,0.000l1.744,0.289l1.744,-0.289l0.291,0.000l-0.291,1.451l0.871,1.162l2.036,0.000l0.581,0.580l-1.163,3.194l1.454,1.452l0.291,2.324l-0.582,1.741l-0.581,1.162l-2.616,0.000l-1.454,-1.451l-0.289,1.451l-1.745,0.291l-0.872,0.580l0.872,1.743l2.035,-1.742z",
						"GB" : "M458.072,80.835l-1.452,2.033l-2.036-0.58h-1.745l0.582-1.453l-0.582-1.451l2.326-0.291L458.072,80.835zM465.629,69.802l-3.198,2.903l2.907-0.289h2.907l-0.582,2.032l-2.615,2.613h2.907l0.29,0.291l2.325,3.484l2.035,0.291l1.745,3.195l0.581,1.161l3.486,0.291l-0.29,2.033l-1.452,0.58l1.163,1.452l-2.617,1.453h-3.488l-4.94,0.871l-1.164-0.581l-1.744,1.161l-2.616-0.291l-2.034,1.162l-1.453-0.581l4.069-2.904l2.616-0.581l-4.359-0.581l-0.873-0.872l2.906-0.871l-1.454-1.451l0.582-2.033l4.069,0.291l0.291-1.452l-1.744-1.743l-3.488-0.58l-0.582-0.871l0.872-1.162l-0.872-0.581l-1.452,1.162V76.19l-1.454-1.453l0.873-2.904l2.326-2.032h2.033H465.629z",
						"GE" : "M588.298,116.844l0.291,-1.161l-0.582,-2.034l-1.743,-0.871l-1.455,-0.580l-1.162,-0.581l0.581,-0.581l2.325,0.581l3.779,0.581l3.780,1.162l0.581,0.580l1.745,-0.580l2.614,0.580l0.581,1.162l1.745,0.871l-0.582,0.290l1.455,1.452l-0.582,0.290l-1.454,-0.290l-2.034,-0.580l-0.581,0.290l-3.780,0.580l-2.615,-1.452l2.907,-0.291z",
						"GH" : "M476.676,214.704l-4.361,1.452l-1.452,1.161l-2.617,0.581l-2.327,-0.581l0.000,-1.161l-1.162,-2.323l0.872,-3.195l1.164,-2.323l-0.874,-3.775l-0.290,-2.323l0.000,-1.452l4.942,0.000l1.163,0.000l0.872,-0.290l1.163,0.290l0.000,0.872l0.871,1.161l0.000,2.033l0.292,2.322l0.871,0.872l-0.581,2.613l0.000,1.162l0.872,1.742l-0.582,-1.162z",
						"GL" : "M344.996,3.593l9.302,-1.451l9.593,0.000l3.488,-0.871l9.883,-0.291l21.800,0.291l17.442,2.322l-5.232,0.872l-10.465,0.290l-14.824,0.291l1.453,0.289l9.593,-0.289l8.429,0.871l5.232,-0.582l2.326,0.872l-2.907,1.452l6.977,-0.871l13.370,-1.162l8.139,0.581l1.455,1.162l-11.047,2.032l-1.743,0.580l-8.721,0.581l6.395,0.000l-3.196,2.033l-2.326,1.742l0.290,3.195l3.198,1.742l-4.361,0.000l-4.361,0.872l4.943,1.451l0.581,2.323l-2.908,0.291l3.781,2.323l-6.106,0.291l2.906,1.160l-0.871,0.872l-3.780,0.581l-3.777,0.000l3.488,1.742l0.000,1.161l-5.522,-1.161l-1.455,0.871l3.778,0.582l3.488,1.741l1.163,2.324l-4.940,0.580l-2.034,-1.162l-3.489,-1.742l0.871,2.033l-3.197,1.452l7.267,0.000l3.780,0.290l-7.269,2.324l-7.557,2.322l-7.848,0.872l-3.198,0.000l-2.907,0.871l-3.779,2.903l-5.814,2.034l-2.034,0.290l-3.489,0.581l-4.069,0.580l-2.326,1.742l0.000,2.034l-1.453,1.742l-4.360,2.033l0.872,2.323l-1.162,2.323l-1.454,2.613l-3.779,0.000l-4.069,-2.033l-5.524,0.000l-2.615,-1.742l-2.036,-2.614l-4.650,-3.484l-1.454,-1.742l-0.291,-2.324l-3.778,-2.613l0.872,-2.033l-1.744,-0.871l2.617,-3.194l4.359,-1.162l0.872,-1.161l0.582,-2.034l-3.198,0.873l-1.454,0.289l-2.325,0.582l-3.488,-0.871l0.000,-2.034l0.871,-1.452l2.617,0.000l5.523,0.872l-4.651,-1.742l-2.325,-1.162l-2.907,0.581l-2.326,-0.872l3.198,-2.322l-1.744,-1.162l-2.035,-2.033l-3.489,-2.904l-3.488,-0.871l0.000,-1.162l-7.266,-1.742l-5.814,0.000l-7.558,0.000l-6.685,0.290l-3.199,-0.870l-4.649,-1.743l7.266,-0.871l5.523,-0.291l-11.917,-0.580l-6.105,-1.162l0.291,-1.161l10.464,-1.162l10.173,-1.452l0.872,-0.871l-7.266,-1.162l2.326,-1.161l9.592,-1.742l4.070,-0.290l-1.163,-1.162l6.395,-0.872l8.429,-0.289l8.430,0.000l3.199,0.580l7.266,-1.453l6.395,1.162l4.070,0.291l5.523,0.871l-6.395,-1.451l-0.290,1.453z",
						"GM" : "M427.549,194.667l0.291,-1.162l2.909,0.000l0.581,-0.581l0.871,0.000l1.163,0.581l0.873,0.000l0.870,-0.581l0.582,0.872l-1.163,0.581l-1.162,0.000l-1.163,-0.581l-1.163,0.581l-0.582,0.000l-0.580,0.581l2.327,0.291z",
						"GN" : "M450.514,209.768l-0.871,0.000l-0.582,1.161l-0.581,0.000l-0.582,-0.581l0.290,-1.162l-1.162,-1.741l-0.872,0.290l-0.581,0.000l-0.581,0.290l0.000,-1.161l-0.582,-0.581l0.000,-0.870l-0.581,-1.163l-0.582,-0.871l-2.326,0.000l-0.581,0.580l-0.871,0.000l-0.292,0.581l-0.289,0.582l-1.455,1.451l-1.453,-1.742l-0.873,-1.163l-0.870,-0.289l-0.582,-0.581l-0.291,-1.161l-0.582,-0.582l-0.581,-0.580l1.163,-1.162l0.873,0.000l0.581,-0.580l0.582,0.000l0.580,-0.291l-0.291,-0.871l0.291,-0.291l0.000,-0.871l1.453,0.000l2.036,0.581l0.581,0.000l0.000,-0.290l1.744,0.290l0.289,-0.290l0.293,1.162l0.290,0.000l0.581,-0.582l0.582,0.291l0.871,0.580l1.165,0.291l0.579,-0.580l0.873,-0.582l0.871,-0.290l0.581,0.000l0.582,0.581l0.292,0.871l1.162,1.162l-0.582,0.580l-0.291,1.162l0.582,-0.291l0.581,0.291l-0.290,0.871l0.871,0.581l-0.581,0.290l-0.290,0.871l0.581,1.163l0.871,2.323l-1.162,0.290l-0.290,0.290l0.290,0.581l0.000,1.162l0.581,0.000z",
						"GQ" : "M499.931,228.061l-0.582,-0.290l0.871,-3.193l4.652,0.000l0.000,3.483l-4.070,0.000l0.871,0.000z",
						"GR" : "M538.882,132.815l1.744,0.871l2.034-0.29l2.033,0.29v0.582l1.455-0.291l-0.292,0.581l-4.067,0.291v-0.291l-3.199-0.581L538.882,132.815zM547.02,116.553l-0.871,1.742l-0.581,0.291h-1.745l-1.454-0.291l-3.196,0.872l1.744,1.451l-1.454,0.291h-1.452l-1.454-1.16l-0.582,0.58l0.582,1.452l1.454,1.453l-0.872,0.58l1.452,1.162l1.455,0.871v1.452l-2.617-0.581l0.873,1.452l-1.745,0.291l0.872,2.323h-1.744l-2.326-1.161l-0.871-2.324l-0.581-1.742l-1.163-1.162l-1.452-1.742v-0.58l1.16-1.453l0.292-0.87l0.873-0.291v-0.871l1.742-0.291l1.164-0.58h1.452l0.582-0.291l0.29-0.29l2.036,0.29l2.325-0.872l2.034,0.872h2.326v-1.452L547.02,116.553z",
						"GT" : "M225.816,193.215l-1.453,-0.580l-1.744,0.000l-1.163,-0.581l-1.454,-1.162l0.000,-0.871l0.291,-0.581l-0.291,-0.580l1.164,-2.033l3.487,0.000l0.292,-0.871l-0.582,-0.291l-0.291,-0.581l-1.162,-0.581l-0.872,-0.870l1.163,0.000l0.000,-1.743l2.615,0.000l2.617,0.000l0.000,2.324l-0.292,2.903l0.872,0.000l0.872,0.581l0.292,-0.291l0.872,0.291l-1.455,1.162l-1.161,0.580l-0.292,0.581l0.292,0.581l-0.583,0.580l-0.581,0.291l0.000,0.290l-0.580,0.291l-0.873,0.581l0.000,-0.580z",
						"GW" : "M432.201,200.475l-1.452,-1.162l-1.164,0.000l-0.582,-0.871l0.000,-0.291l-0.871,-0.580l-0.292,-0.581l1.453,-0.581l0.874,0.000l0.871,-0.290l4.942,0.290l0.000,0.871l-0.291,0.291l0.291,0.871l-0.580,0.291l-0.582,0.000l-0.581,0.580l-0.873,0.000l1.163,-1.162z",
						"GY" : "M309.243,208.025l1.744,0.871l1.744,1.742l0.000,1.452l1.162,0.000l1.453,1.452l1.163,0.873l-0.582,2.613l-1.453,0.579l0.000,0.872l-0.581,1.161l1.453,2.032l0.872,0.000l0.291,1.744l1.744,2.322l-0.872,0.000l-1.454,-0.290l-0.871,0.871l-1.163,0.581l-0.872,0.000l-0.290,0.581l-1.454,-0.290l-1.743,-1.162l-0.291,-1.162l-0.582,-1.451l0.582,-2.324l0.580,-1.162l-0.580,-1.161l-0.872,-0.290l0.290,-1.451l-0.582,-0.582l-1.453,0.291l-2.035,-2.322l0.873,-0.582l0.000,-1.163l1.743,-0.580l0.582,-0.581l-0.872,-0.871l0.290,-1.161l-2.036,1.452z",
						"HN" : "M233.374,195.248l-0.291,-0.871l-0.872,-0.291l0.000,-1.162l-0.291,-0.289l-0.582,0.000l-1.161,0.289l0.000,-0.289l-0.872,-0.581l-0.582,-0.581l-0.873,-0.291l0.583,-0.580l-0.292,-0.581l0.292,-0.581l1.161,-0.580l1.455,-1.162l0.289,0.000l0.582,-0.291l0.581,0.000l0.291,0.000l0.582,0.000l1.163,0.291l1.162,-0.291l0.873,-0.290l0.581,-0.290l0.872,0.290l0.581,0.000l0.582,0.000l0.581,-0.290l1.454,0.580l0.289,0.000l0.872,0.582l0.873,0.580l0.871,0.291l0.873,0.870l-1.162,0.000l-0.291,0.291l-0.872,0.291l-0.872,0.000l-0.581,0.290l-0.582,0.000l-0.290,-0.290l-0.291,0.000l-0.291,0.580l-0.291,0.000l0.000,0.581l-1.163,0.871l-0.581,0.291l-0.291,0.289l-0.581,-0.580l-0.581,0.871l-0.582,-0.291l-0.871,0.291l0.290,1.162l-0.581,0.000l-0.291,0.871l0.872,0.000z",
						"HR" : "M525.51,104.647l0.871,1.163l0.873,0.870l-1.163,0.872l-1.163,-0.581l-2.033,0.000l-2.325,-0.291l-1.163,0.000l-0.582,0.581l-1.162,-0.581l-0.581,0.872l1.454,1.451l0.579,0.872l1.163,0.871l1.162,0.581l0.874,1.161l2.614,1.161l-0.289,0.580l-2.615,-1.160l-1.746,-0.871l-2.326,-0.871l-2.326,-2.033l0.582,-0.291l-1.453,-1.162l0.000,-0.870l-1.744,-0.291l-0.871,1.161l-0.873,-1.161l0.292,-0.870l1.743,0.000l0.580,-0.291l0.873,0.291l1.163,0.000l0.000,-0.582l0.871,-0.290l0.293,-1.162l2.325,-0.580l0.871,0.290l2.036,1.161l2.325,0.581l-0.871,0.581z",
						"HT" : "M272.326,176.083l1.744,0.290l2.326,0.291l0.290,1.451l-0.290,1.161l-0.582,0.582l0.582,0.580l0.000,0.872l-1.745,-0.581l-1.453,0.290l-1.744,-0.290l-1.163,0.581l-1.454,-0.872l0.291,-0.871l2.326,0.291l2.325,0.290l0.872,-0.581l-1.163,-1.161l0.000,-1.161l-1.744,-0.292l-0.582,0.870z",
						"HU" : "M518.243,102.034l1.164,-1.742l-0.582,-0.581l1.453,0.000l0.292,-1.162l1.454,0.872l0.871,0.290l2.324,-0.581l0.291,-0.291l1.163,-0.290l1.163,-0.290l0.289,0.000l1.455,-0.290l0.582,-0.581l0.870,-0.291l2.908,0.872l0.582,-0.290l1.452,0.870l0.291,0.581l-1.743,0.581l-1.164,2.034l-1.742,1.741l-2.325,0.581l-1.455,0.000l-2.326,0.580l-0.871,0.581l-2.325,-0.581l-2.036,-1.161l-0.871,-0.290l-0.582,-1.162l0.582,0.000z",
						"ID" : "M806.019,259.132h-1.163l-3.488-2.033l2.326-0.289l1.454,0.58l1.162,0.871L806.019,259.132zM816.193,258.842l-2.323,0.581l-0.292-0.291l0.292-0.871l1.16-1.742l2.617-1.16l0.29,0.58l0.29,0.871L816.193,258.842zM798.17,253.326l1.163,0.58l1.745-0.29l0.581,1.161l-3.198,0.582l-1.745,0.58l-1.743-0.291l1.162-1.451h1.455L798.17,253.326zM812.123,253.326l-0.579,1.451l-4.072,0.871l-3.486-0.58v-0.871l2.034-0.581l1.745,0.871l1.743-0.29L812.123,253.326zM772.881,249.55l5.232,0.29l0.582-1.161l4.94,1.452l1.163,1.742l4.07,0.58l3.487,1.452l-3.196,1.162l-3.199-1.162h-2.325h-2.907l-2.615-0.58l-3.199-1.162l-2.033-0.29l-1.163,0.29l-4.942-0.871l-0.58-1.452h-2.325l1.745-2.613h3.488l2.033,1.163l1.162,0.289L772.881,249.55zM844.679,248.098l-1.452,1.742l-0.292-2.032l0.583-0.871l0.58-1.162l0.581,0.871V248.098zM824.043,240.548l-1.163,0.87l-1.745-0.58l-0.581-1.162h2.907L824.043,240.548zM833.053,239.386l0.871,2.032l-2.325-0.87l-2.324-0.29h-1.454h-2.034l0.582-1.452l3.486-0.291L833.053,239.386zM842.935,234.16l0.874,4.355l2.906,1.743l2.325-2.905l3.199-1.741h2.323l2.326,0.87l2.033,1.162l2.909,0.581v8.712l0.29,9.002l-2.615-2.323l-2.91-0.29l-0.578,0.58l-3.489,0.291l1.161-2.323l1.744-0.871l-0.579-2.904l-1.454-2.323l-5.233-2.324l-2.323-0.289l-4.069-2.613L840.901,242l-1.162,0.292l-0.581-1.163v-1.161l-2.034-1.161l2.906-1.162h2.034l-0.289-0.581h-4.072l-1.161-1.742l-2.327-0.58l-1.161-1.161l3.778-0.872l1.455-0.872l4.359,1.162L842.935,234.16zM818.518,226.9l-2.325,2.904l-2.034,0.58l-2.615-0.58h-4.651l-2.325,0.58l-0.292,2.033l2.326,2.323l1.454-1.161l5.23-0.872l-0.29,1.161l-1.162-0.289l-1.163,1.451l-2.326,1.162l2.615,3.483l-0.581,0.872l2.326,3.194v1.742l-1.452,0.872l-0.874-0.872l1.165-2.323l-2.617,1.162l-0.871-0.873l0.579-0.869l-2.033-1.743l0.291-2.613l-2.036,0.871l0.292,3.195v3.773l-1.744,0.581l-1.165-0.871l0.874-2.613l-0.291-2.613h-1.162l-0.871-2.033l1.161-1.741l0.289-2.033l1.455-4.356l0.581-0.871l2.326-2.032l2.033,0.58l3.488,0.582l3.199-0.292l2.615-2.032L818.518,226.9zM828.111,227.771l-0.29,2.323h-1.452l-0.292,1.452l1.162,1.451l-0.87,0.291l-1.165-1.742l-0.871-3.485l0.581-2.032l0.873-1.162l0.29,1.452l1.744,0.291L828.111,227.771zM798.17,226.029l3.197,2.322l-3.197,0.292l-1.162,2.031l0.292,2.614l-2.618,1.742v2.613L793.52,242l-0.581-0.871l-2.908,1.163l-1.161-1.743l-2.034-0.29l-1.163-0.872l-3.488,1.162l-0.871-1.452l-1.744,0.29l-2.328-0.29l-0.581-3.775l-1.163-0.871l-1.452-2.322l-0.292-2.323l0.292-2.613l1.452-1.743l0.584,1.743l2.033,1.741l1.744-0.581h1.744l1.453-1.16l1.454-0.291l2.615,0.581l2.036-0.581l1.452-3.774l1.163-0.872l0.871-3.193h3.198l2.325,0.58l-1.454,2.323l2.036,2.614L798.17,226.029zM765.034,246.937l-2.907,0.29l-2.325-2.321l-3.779-2.324l-1.162-1.743l-2.033-2.323l-1.165-2.033l-2.325-3.774l-2.326-2.323l-0.871-2.323l-0.873-2.032l-2.615-1.743l-1.454-2.322l-2.034-1.743l-2.908-2.903l-0.289-1.451h1.745l4.358,0.58l2.618,2.614l2.033,2.032l1.453,1.161l2.615,2.905h2.908l2.325,2.032l1.454,2.322l2.033,1.161l-0.871,2.323l1.454,0.871h0.872l0.581,2.033l0.873,1.451l2.034,0.291l1.452,1.742l-0.871,3.485V246.937z",
						"IE" : "M456.62,82.869l0.579,2.032l-2.034,2.323l-4.942,1.743l-3.779,-0.581l2.036,-2.904l-1.454,-2.613l3.779,-2.323l2.033,-1.162l0.582,1.451l-0.582,1.454l1.745,0.000l-2.037,-0.580z",
						"IL" : "M572.021,140.946l-0.293,0.870l-1.163,-0.289l-0.578,1.743l0.871,0.289l-0.871,0.581l0.000,0.581l1.160,-0.291l0.000,0.872l-1.160,4.645l-2.038,-4.935l0.873,-0.872l0.581,-1.451l0.584,-2.033l0.289,-0.582l0.289,0.000l0.872,0.000l0.291,-0.580l0.582,0.000l0.000,1.162l-0.289,0.290l0.000,0.000z",
						"IN" : "M688.002,133.396l2.909,3.194l-0.293,2.324l1.163,1.160l0.000,1.453l-2.036,-0.291l0.873,2.904l2.615,1.742l3.781,2.034l-1.745,1.161l-1.163,2.613l2.908,1.162l2.614,1.161l3.490,1.742l3.779,0.291l1.453,1.452l2.325,0.290l3.197,0.581l2.326,0.000l0.291,-1.162l-0.291,-1.742l0.000,-1.161l1.744,-0.582l0.292,2.033l0.000,0.581l2.615,1.162l1.744,-0.581l2.326,0.290l2.326,0.000l0.000,-1.742l-1.163,-0.871l2.326,-0.290l2.615,-2.033l3.198,-1.742l2.033,0.580l2.035,-1.162l1.455,1.743l-1.161,1.162l3.194,0.290l0.000,1.162l-0.871,0.580l0.291,1.452l-2.034,-0.290l-3.489,1.742l0.000,1.742l-1.453,2.323l-0.292,1.162l-1.163,2.322l-2.033,-0.580l-0.290,2.904l-0.583,0.872l0.291,1.161l-1.162,0.581l-1.454,-4.356l-0.872,0.000l-0.581,1.742l-1.454,-1.452l0.872,-1.452l1.163,-0.289l1.454,-2.324l-1.743,-0.291l-2.327,0.000l-2.616,-0.291l-0.291,-2.032l-1.454,0.000l-2.034,-1.451l-1.163,2.032l2.034,1.451l-1.743,0.873l-0.582,1.160l1.744,0.582l-0.579,1.742l1.160,2.032l0.290,2.324l-0.290,1.162l-2.034,-0.291l-3.197,0.580l0.000,2.033l-1.455,1.742l-4.069,1.744l-2.904,3.484l-2.038,1.743l-2.906,1.742l0.000,1.161l-1.163,0.581l-2.615,1.161l-1.162,0.000l-0.874,2.323l0.582,3.484l0.000,2.324l-1.163,2.614l0.000,4.644l-1.454,0.000l-1.160,2.325l0.870,0.871l-2.615,0.581l-0.874,2.032l-1.163,0.581l-2.615,-2.323l-1.163,-4.067l-1.162,-2.613l-0.874,-1.451l-1.452,-2.613l-0.581,-3.485l-0.581,-1.742l-2.618,-3.775l-1.161,-5.227l-0.584,-3.485l0.000,-3.194l-0.581,-2.613l-4.068,1.451l-2.035,-0.290l-3.488,-3.194l1.454,-1.162l-0.873,-0.871l-3.198,-2.323l1.745,-2.033l6.106,0.000l-0.583,-2.324l-1.455,-1.451l-0.579,-2.032l-1.745,-1.162l3.197,-2.904l3.199,0.291l2.904,-2.904l1.745,-2.904l2.618,-2.614l0.000,-2.032l2.325,-1.743l-2.325,-1.161l-0.874,-2.032l-1.160,-2.324l1.453,-1.162l4.069,0.581l3.196,-0.290l-2.617,2.323z",
						"IQ" : "M598.763,131.943l1.744,0.872l0.289,1.742l-1.452,0.871l-0.581,2.033l2.033,2.613l3.200,1.453l1.454,2.323l-0.292,1.742l0.872,0.000l0.000,1.742l1.454,1.452l-1.744,-0.290l-1.744,-0.291l-2.037,2.614l-5.230,0.000l-7.561,-5.517l-4.067,-2.032l-3.488,-0.873l-1.163,-3.193l6.103,-2.904l1.163,-3.195l-0.292,-2.032l1.454,-0.872l1.454,-1.742l1.164,-0.291l3.197,0.291l0.873,0.872l1.452,-0.581l-1.745,-3.193z",
						"IR" : "M622.309,128.75l2.323,-0.582l2.036,-1.742l1.745,0.291l1.162,-0.581l2.034,0.290l2.907,1.452l2.325,0.290l3.200,2.324l2.034,0.000l0.289,2.323l-1.161,3.485l-0.873,2.032l1.163,0.291l-1.163,1.742l0.873,2.032l0.290,1.743l2.036,0.581l0.289,1.742l-2.615,2.323l1.453,1.452l1.162,1.742l2.617,1.162l0.000,2.613l1.453,0.291l0.290,1.452l-4.070,1.162l-1.161,3.193l-4.943,-0.580l-3.197,-0.871l-2.906,-0.291l-1.454,-3.194l-1.163,-0.581l-2.034,0.581l-2.908,1.162l-3.196,-0.872l-2.907,-2.033l-2.617,-0.870l-1.745,-2.614l-2.034,-3.774l-1.744,0.580l-1.744,-0.871l-0.871,1.161l-1.454,-1.452l0.000,-1.742l-0.872,0.000l0.292,-1.742l-1.454,-2.323l-3.200,-1.453l-2.033,-2.613l0.581,-2.033l1.452,-0.871l-0.289,-1.742l-1.744,-0.872l-1.745,-3.193l-1.452,-2.324l0.579,-0.871l-0.870,-2.904l1.743,-0.871l0.582,0.871l1.163,1.453l2.033,0.289l0.873,0.000l3.489,-2.032l0.872,-0.290l0.871,0.871l-0.871,1.451l1.743,1.453l0.582,-0.291l0.873,2.033l2.615,0.580l1.744,1.453l4.069,0.291l4.360,-0.581l-0.293,0.581z",
						"IS" : "M433.944,48.313l-0.870,1.742l3.196,1.742l-3.488,2.033l-8.138,2.033l-2.326,0.581l-3.488,-0.581l-7.849,-0.871l2.906,-1.162l-6.103,-1.451l4.940,-0.291l0.000,-0.871l-5.811,-0.580l1.744,-2.033l4.067,-0.291l4.362,1.742l4.360,-1.451l3.198,0.871l4.649,-1.452l-4.651,-0.290z",
						"IT" : "M516.5,125.846l-0.873,2.033l0.292,0.872l-0.582,1.451l-2.034-0.871l-1.454-0.291l-3.777-1.451l0.289-1.452l3.199,0.29l2.904-0.29L516.5,125.846zM499.059,117.715l1.743,1.742l-0.291,3.775l-1.452-0.291l-1.164,0.871l-0.872-0.58l-0.291-3.195l-0.579-1.742l1.452,0.291L499.059,117.715zM507.779,102.325l4.069,0.581l-0.289,1.452l0.581,1.161l-2.326-0.291l-2.035,0.872v1.452l-0.292,0.871l0.873,1.162l2.615,1.452l1.455,2.324l2.906,2.323h2.326l0.58,0.58l-0.872,0.582l2.617,0.871l2.036,0.871l2.324,1.451l0.291,0.581l-0.581,0.873l-1.455-1.453l-2.325-0.289l-1.163,1.742l2.036,1.16l-0.581,1.453h-0.873l-1.745,2.323l-0.87,0.291v-0.871l0.289-1.453l0.872-0.58l-1.161-1.742l-0.873-1.162l-1.161-0.58l-0.873-1.162l-1.744-0.29l-1.163-1.162l-2.034-0.291l-2.036-1.162l-2.615-1.741l-1.744-1.743l-0.872-2.614l-1.454-0.29l-2.325-0.872l-1.163,0.291l-1.743,1.162l-1.163,0.291l0.291-1.162l-1.454-0.291l-0.582-2.033l0.872-0.871l-0.872-1.162l0.291-0.871l1.165,0.581h1.16l1.744-0.871l0.291,0.29h1.453l0.583-1.162l2.034,0.29l1.163-0.29l0.289-1.162l1.745,0.291l0.291-0.58l2.615-0.292L507.779,102.325z",
						"JM" : "M260.116,180.148l2.036,0.290l1.452,0.581l0.291,0.871l-1.743,0.000l-0.872,0.291l-1.454,-0.291l-1.744,-1.161l0.290,-0.581l1.164,-0.290l-0.580,-0.290z",
						"JO" : "M571.728,141.816l0.293,-0.870l3.195,1.161l5.234,-2.903l1.163,3.193l-0.582,0.582l-5.522,1.451l2.905,2.614l-0.872,0.581l-0.581,0.871l-2.036,0.290l-0.581,1.161l-1.161,0.582l-3.196,-0.291l0.000,-0.291l1.160,-4.645l0.000,-0.872l0.581,-0.871l0.000,1.743z",
						"JP" : "M844.39,137.17l0.289,0.871l-1.452,1.742l-1.163-1.161l-1.454,0.871l-0.58,1.452l-2.035-0.581l0.292-1.452l1.452-1.743l1.452,0.291l1.165-1.161L844.39,137.17zM861.832,128.75l-1.165,2.323l0.584,1.162l-1.455,2.033l-3.488,1.452h-4.94l-3.78,3.195l-1.742-1.162l-0.292-2.033l-4.651,0.582l-3.488,1.451h-3.198l2.909,2.032l-1.745,4.646l-1.743,1.162l-1.454-1.162l0.582-2.323l-1.745-0.871l-1.163-1.742l2.617-0.871l1.452-1.742l2.907-1.453l2.035-2.033l5.523-0.581l2.907,0.291l2.904-4.646l1.746,1.162l4.07-2.614l1.452-1.161l1.744-3.484l-0.292-2.904l1.164-1.742l2.906-0.581l1.454,3.774v2.324l-2.615,2.613V128.75zM869.969,109.584l1.744,0.58l2.036-1.162l0.58,2.904l-4.068,0.871l-2.326,2.613l-4.36-1.742l-1.453,2.904h-3.199l-0.29-2.613l1.454-2.033l2.906-0.291l0.873-3.775l0.581-2.032l3.488,2.613L869.969,109.584z",
						"KE" : "M586.553,233.289l1.745,2.323l-2.034,1.162l-0.582,1.161l-1.163,0.000l-0.291,2.032l-0.872,1.161l-0.581,1.744l-1.162,0.871l-3.780,-2.615l-0.291,-1.742l-9.883,-5.517l-0.582,-0.289l0.000,-2.906l0.872,-1.161l1.164,-1.742l1.163,-2.033l-1.163,-3.194l-0.291,-1.452l-1.452,-1.742l1.743,-1.743l1.745,-1.741l1.452,0.290l0.000,1.742l0.873,0.871l2.033,0.000l3.489,2.323l0.874,0.000l0.580,0.000l0.580,0.290l2.036,0.290l0.581,-1.160l2.618,-1.162l1.161,0.870l1.743,0.000l-2.325,3.196l0.000,-9.873z",
						"KG" : "M669.108,114.811l0.581,-1.162l1.745,-0.580l4.649,0.871l0.292,-1.452l1.745,-0.581l3.779,1.162l1.161,-0.291l4.361,0.000l4.068,0.291l1.455,0.871l1.744,0.581l-0.289,0.581l-4.362,1.451l-1.162,1.162l-3.490,0.290l-0.871,1.744l-2.906,-0.291l-2.036,0.580l-2.615,1.162l0.289,0.580l-0.579,0.871l-5.233,0.291l-3.488,-0.871l-2.908,0.290l0.291,-1.743l2.906,0.582l0.873,-0.871l2.326,0.289l3.488,-2.032l-3.199,-1.451l-2.034,0.580l-2.035,-0.871l2.326,-1.742l0.872,0.291z",
						"KH" : "M758.638,201.637l-1.162,-1.453l-1.454,-2.613l-0.580,-3.485l1.741,-2.323l3.781,-0.581l2.326,0.581l2.326,0.872l1.160,-1.743l2.617,0.871l0.581,2.033l-0.289,3.194l-4.651,2.033l1.162,1.742l-2.906,0.290l-2.326,1.162l2.326,0.580z",
						"KO" : "M531.032,115.392l-0.289,0.581l-0.292,0.000l-0.289,-1.162l-0.582,-0.290l-0.581,-0.581l0.581,-0.871l0.582,0.000l0.289,-0.871l0.581,-0.291l0.293,0.291l0.581,0.290l0.290,0.581l0.583,0.000l0.579,0.580l0.292,0.000l-0.292,0.580l-0.290,0.292l0.000,0.290l-0.581,0.000l1.455,-0.581z",
						"KP" : "M833.343,114.229l0.292,0.582l-0.872,0.000l-1.164,0.872l-0.872,0.870l0.000,2.033l-1.452,0.581l-0.291,0.582l-1.163,0.580l-1.744,0.580l-1.163,0.582l-0.292,1.451l-0.289,0.291l1.163,0.290l1.452,1.161l-0.290,0.871l-1.162,0.000l-2.035,0.291l-0.874,1.161l-1.452,0.000l-1.454,-0.290l-0.289,0.290l-0.874,0.290l0.000,-0.580l-0.581,0.000l-0.871,-0.581l0.871,-1.161l0.581,-0.291l-0.291,-0.580l0.583,-1.453l0.000,-0.580l-1.744,-0.291l-1.162,-0.580l2.033,-1.742l3.198,-1.453l1.745,-2.032l1.453,0.871l2.325,0.000l-0.289,-1.452l4.067,-1.163l1.163,-1.451l-1.744,-1.451z",
						"KR" : "M826.948,124.684l2.617,3.194l0.582,2.034l0.000,2.903l-1.163,1.742l-2.326,0.582l-2.325,0.870l-2.326,0.291l-0.292,-1.452l0.292,-2.033l-1.163,-2.903l2.036,-0.291l-1.745,-2.614l1.452,0.000l0.874,-1.161l2.035,-0.291l1.162,0.000l-0.290,0.871z",
						"KW" : "M605.74,148.496l0.581,1.162l-0.291,0.580l0.871,2.323l-1.743,0.000l-0.873,-1.452l-2.326,-0.290l2.037,-2.614l-1.744,-0.291z",
						"KZ" : "M669.108,114.811l-1.454,0.291l-3.779,2.033l-1.163,2.032l-1.163,0.000l-0.580,-1.452l-3.489,0.000l-0.581,-2.323l-1.453,0.000l0.290,-2.614l-3.196,-2.032l-4.944,0.290l-3.196,0.291l-2.618,-2.614l-2.324,-0.872l-4.071,-2.031l-0.580,-0.291l-6.976,1.742l0.000,10.164l-1.455,0.000l-1.744,-2.033l-2.034,-0.871l-3.199,0.581l-1.160,0.871l0.000,-0.581l0.582,-1.163l-0.582,-0.869l-3.197,-1.162l-1.165,-2.323l-1.453,-0.581l-0.291,-1.161l2.909,0.289l0.000,-2.032l2.324,-0.290l2.326,0.290l0.581,-2.614l-0.581,-1.742l-2.616,0.291l-2.326,-0.872l-3.196,1.452l-2.618,0.581l-1.452,-0.581l0.289,-1.452l-1.743,-1.742l-2.034,0.000l-2.327,-1.742l1.453,-2.323l-0.580,-0.290l2.036,-3.195l2.906,1.742l0.289,-2.032l5.814,-3.195l4.362,0.000l5.812,2.032l3.489,1.163l2.906,-1.163l4.360,-0.290l3.488,1.453l0.871,-0.872l3.781,0.291l0.581,-1.453l-4.362,-1.742l2.618,-1.451l-0.581,-0.582l2.617,-0.870l-2.036,-1.743l1.454,-1.160l10.172,-0.872l1.454,-0.582l6.976,-1.161l2.326,-1.161l4.942,0.580l0.872,2.905l2.906,-0.581l3.488,0.872l-0.290,1.451l2.618,0.000l6.974,-2.614l-0.871,0.872l3.488,2.033l6.104,6.968l1.453,-1.451l3.780,1.742l4.070,-0.872l1.455,0.581l1.160,1.452l2.034,0.581l1.163,1.162l3.488,-0.291l1.455,1.743l-2.034,1.742l-2.328,0.291l0.000,2.904l-1.744,1.162l-5.232,-0.873l-2.034,4.938l-1.453,0.580l-5.524,1.162l2.617,4.646l-2.033,0.580l0.289,1.743l-1.744,-0.581l-1.455,-0.871l-4.068,-0.291l-4.361,0.000l-1.161,0.291l-3.779,-1.162l-1.745,0.581l-0.292,1.452l-4.649,-0.871l-1.745,0.580l0.581,-1.162z",
						"LA" : "M763.29,191.763l0.872,-1.451l0.291,-2.323l-2.327,-2.324l0.000,-2.613l-2.325,-2.323l-2.036,0.000l-0.582,0.871l-1.452,0.000l-0.871,-0.581l-2.907,1.742l0.000,-2.323l0.579,-2.904l-1.743,-0.289l-0.290,-1.744l-1.163,-0.580l0.581,-1.162l2.326,-1.742l0.289,0.581l1.455,0.000l-0.290,-2.904l1.453,-0.581l1.454,2.324l1.161,2.322l3.488,0.000l1.165,2.614l-1.747,0.580l-0.870,0.872l3.197,1.742l2.325,3.194l1.745,2.614l2.036,1.742l0.870,2.032l-0.581,2.614l-2.617,-0.871l-1.160,1.743l2.326,0.872z",
						"LB" : "M572.31,139.494l-0.582,0.000l-0.291,0.580l-0.872,0.000l0.872,-2.323l1.454,-2.032l1.163,0.000l0.581,1.162l-1.452,1.161l0.873,-1.452z",
						"LK" : "M699.047,210.348l-0.579,2.904l-1.165,0.581l-2.323,0.582l-1.455,-2.034l-0.292,-4.066l1.166,-4.356l2.033,1.454l1.162,2.032l-1.453,-2.903z",
						"LR" : "M452.549,219.06l-0.873,0.000l-2.615,-1.453l-2.617,-2.032l-2.324,-1.452l-1.744,-1.742l0.580,-0.872l0.000,-0.871l1.454,-1.452l1.163,-1.451l0.581,0.000l0.872,-0.290l1.162,1.741l-0.290,1.162l0.582,0.581l0.581,0.000l0.582,-1.161l0.871,0.000l0.000,0.870l0.291,1.162l-0.582,1.452l0.582,0.581l0.871,0.290l1.162,1.161l0.293,1.162l-0.293,0.291l0.289,-2.323z",
						"LS" : "M553.416,310.531l1.163,0.872l-0.873,1.451l-0.581,0.871l-1.454,0.292l-0.581,0.869l-0.871,0.291l-2.036,-2.032l1.454,-1.742l1.453,-1.163l1.163,-0.579l-1.163,-0.870z",
						"LT" : "M536.265,81.417l-0.291,-0.582l0.582,-0.870l-1.454,-0.291l-2.906,-0.581l-0.580,-2.322l3.197,-0.871l4.649,0.290l2.618,-0.290l0.581,0.580l1.455,0.291l2.614,1.162l0.290,1.160l-2.326,1.162l-0.578,1.452l-2.908,0.872l-2.907,0.000l-0.582,-0.872l1.454,0.290z",
						"LU" : "M490.338,93.032l0.579,0.581l0.000,1.452l-0.871,0.000l-0.581,-0.291l0.290,-1.451l-0.583,0.291z",
						"LV" : "M531.616,76.771l0.290,-2.033l1.162,-1.742l2.616,-0.871l2.326,2.033l2.035,0.000l0.581,-2.033l2.325,-0.581l1.165,0.290l2.614,1.162l2.034,0.000l1.455,0.581l0.291,1.161l0.871,1.742l-2.906,1.162l-1.745,0.291l-2.614,-1.162l-1.455,-0.291l-0.581,-0.580l-2.618,0.290l-4.649,-0.290l3.197,-0.871z",
						"LY" : "M514.755,167.951l-2.036,1.162l-1.452,-1.452l-4.361,-1.161l-1.452,-1.743l-2.035,-1.451l-1.163,0.580l-1.163,-1.451l0.000,-1.162l-1.744,-2.033l1.162,-1.161l-0.291,-1.743l0.291,-1.452l0.000,-1.451l0.291,-2.033l0.000,-1.453l-0.871,-2.322l1.162,-0.581l0.290,-1.162l-0.290,-1.161l2.034,-1.162l0.872,-0.870l1.164,-0.873l0.291,-2.032l3.195,0.872l1.165,0.000l2.326,0.290l3.486,1.161l1.456,2.614l2.325,0.581l4.067,1.161l2.907,1.162l1.165,-0.581l1.453,-1.452l-0.582,-2.033l0.874,-1.162l1.741,-1.451l2.036,-0.290l3.778,0.580l0.873,1.161l1.163,0.000l0.871,0.582l2.616,0.291l0.582,0.870l-0.871,1.452l0.289,1.162l-0.579,1.451l0.871,2.324l0.000,9.873l0.000,10.162l0.000,5.228l-3.199,0.291l0.000,0.870l-11.045,-5.227l-11.046,-5.226l2.616,-1.451z",
						"MA" : "M459.526,132.525l1.743,1.161l2.616,0.000l2.615,0.581l1.164,0.000l1.163,1.742l0.291,1.742l0.871,2.905l0.582,0.580l-0.289,0.871l-3.782,0.582l-1.162,0.870l-1.744,0.291l0.000,2.032l-3.197,1.162l-1.162,1.452l-2.036,0.581l-2.906,0.581l-4.361,2.032l0.000,3.194l-0.581,0.000l0.292,1.452l-1.745,0.000l-0.872,0.871l-1.161,0.000l-1.165,-0.581l-2.324,0.291l-0.873,2.323l-0.872,0.000l-1.162,3.485l-4.069,3.194l-0.874,3.775l-1.162,1.162l-0.290,0.870l-6.107,0.291l0.000,-1.161l1.165,-0.872l0.871,-1.451l-0.291,-0.872l1.164,-2.033l1.454,-1.742l0.871,-0.291l0.873,-1.742l0.000,-1.451l0.870,-1.742l2.036,-0.872l1.745,-2.904l1.452,-1.162l2.326,-0.289l2.326,-1.743l1.452,-0.871l2.036,-2.323l-0.582,-3.194l1.163,-2.323l0.290,-1.452l1.744,-2.033l2.906,-1.162l2.037,-1.162l1.745,-2.903l0.871,-1.742l-2.035,0.000z",
						"MD" : "M547.02,98.259l0.584,-0.290l2.033,-0.290l2.034,0.870l1.162,0.000l1.166,0.872l-0.293,0.871l1.164,0.580l0.290,1.162l0.873,0.580l0.000,0.291l0.290,0.291l-0.581,0.290l-1.743,0.000l-0.293,-0.581l-0.581,0.291l0.291,0.580l-0.872,0.871l-0.291,0.872l-0.872,0.291l-0.291,-1.163l0.291,-1.161l-0.291,-1.161l-1.453,-1.742l-0.873,-1.162l-0.871,-0.872l0.873,0.290z",
						"ME" : "M528.417,113.94l-0.292,-0.291l-1.163,1.162l0.000,0.872l-0.581,0.000l-0.579,-0.872l-1.163,-0.582l0.289,-0.580l0.291,-1.451l0.872,-0.581l0.582,-0.290l0.873,0.290l0.290,0.581l0.872,0.290l1.162,0.581l-0.290,0.000l-0.581,0.871l0.582,0.000z",
						"MG" : "M610.099,265.23l0.873,1.163l0.582,1.742l0.579,3.485l0.584,1.160l-0.293,1.454l-0.581,0.579l-0.871,-1.451l-0.583,0.872l0.583,2.032l-0.291,1.160l-0.582,0.581l-0.292,2.325l-1.162,3.194l-1.161,3.775l-1.744,5.226l-1.162,3.775l-1.165,3.195l-2.325,0.581l-2.325,1.162l-1.455,-0.582l-2.324,-0.871l-0.872,-1.453l0.000,-2.613l-1.163,-2.032l0.000,-2.033l0.292,-2.032l1.452,-0.582l0.000,-0.871l1.163,-2.032l0.289,-1.742l-0.579,-1.453l-0.582,-1.451l-0.291,-2.614l1.163,-1.743l0.289,-1.742l1.455,0.000l1.452,-0.581l0.872,-0.579l1.454,0.000l1.455,-1.454l2.325,-1.740l0.872,-1.454l-0.580,-1.160l1.161,0.289l1.744,-1.743l0.000,-1.742l0.873,-1.160l-0.871,-1.160z",
						"MK" : "M530.451,115.973l0.292,0.000l0.289,-0.581l1.455,-0.581l0.581,0.000l1.161,-0.290l1.165,0.000l1.452,0.871l0.000,1.743l-0.290,0.290l-0.582,0.290l-1.452,0.000l-1.164,0.580l-1.742,0.291l-1.165,-0.581l-0.289,-1.161l-0.289,0.871z",
						"ML" : "M440.34,190.602l0.871,-0.290l0.583,-1.743l0.872,0.000l1.744,0.871l1.455,-0.580l1.161,0.000l0.581,-0.581l11.046,0.000l0.582,-2.032l-0.582,-0.291l-1.454,-11.906l-1.161,-11.615l4.070,-0.291l9.301,6.098l9.301,6.098l0.873,1.161l1.454,0.872l1.452,0.291l0.000,1.742l2.906,0.000l0.000,6.097l-1.452,2.034l-0.291,1.452l-2.326,0.580l-3.778,0.291l-0.872,0.870l-1.744,0.291l-2.035,0.000l-0.582,-0.581l-1.452,0.290l-2.617,1.162l-0.582,0.871l-2.035,1.161l-0.291,0.872l-1.163,0.581l-1.452,-0.581l-0.872,0.871l-0.291,1.742l-2.034,2.324l0.000,0.871l-0.873,1.161l0.290,1.741l-1.161,0.292l-0.583,0.290l-0.579,-1.162l-0.582,0.291l-0.581,0.000l-0.582,0.871l-2.037,0.000l-0.870,-0.582l-0.292,0.292l-0.871,-0.581l0.290,-0.871l-0.581,-0.291l-0.582,0.291l0.291,-1.162l0.582,-0.580l-1.162,-1.162l-0.292,-0.871l-0.582,-0.581l-0.581,0.000l-0.871,0.290l-0.873,0.582l-0.579,0.580l-1.165,-0.291l-0.871,-0.580l-0.582,-0.291l-0.581,0.582l-0.290,0.000l-0.293,-1.162l0.000,-0.871l0.000,-1.162l-1.162,-0.581l-0.581,-1.742l0.000,1.742z",
						"MM" : "M747.882,175.501l-1.743,1.163l-2.034,0.000l-1.163,3.194l-1.165,0.290l1.455,2.613l1.744,1.742l1.163,2.034l-1.163,2.323l-0.871,0.580l0.582,1.162l1.741,2.322l0.582,1.453l-0.290,1.452l1.162,2.322l-1.454,2.614l-1.452,2.903l-0.289,-2.031l0.870,-2.033l-0.870,-1.742l0.289,-2.904l-1.163,-1.453l-0.871,-3.484l-0.581,-3.484l-1.164,-2.034l-1.743,1.162l-3.200,2.033l-1.454,-0.291l-1.741,-0.580l0.870,-3.486l-0.579,-2.612l-2.036,-2.904l0.290,-1.161l-1.744,-0.291l-1.743,-2.323l-0.291,-2.033l0.871,0.291l0.292,-2.033l1.162,-0.581l-0.291,-1.161l0.583,-0.872l0.290,-2.904l2.033,0.580l1.163,-2.322l0.292,-1.162l1.453,-2.323l0.000,-1.742l3.489,-1.742l2.034,0.290l-0.291,-1.452l0.871,-0.580l0.000,-1.162l1.455,0.000l0.873,1.452l1.161,0.580l0.291,2.324l-0.291,2.032l-2.615,2.323l-0.290,3.484l2.905,-0.580l0.873,2.614l1.743,0.580l-0.872,2.033l2.035,1.162l1.163,0.580l2.035,-0.870l0.000,1.161l-2.326,1.742l-0.581,1.162l1.454,-0.580z",
						"MN" : "M715.327,95.356l2.907,-0.582l5.232,-2.323l4.069,-1.161l2.616,0.871l2.908,0.000l1.741,1.162l2.617,0.290l4.071,0.581l2.617,-2.033l-1.163,-1.453l2.907,-2.902l3.196,1.161l2.327,0.290l3.488,0.580l0.290,2.324l4.069,1.162l2.617,-0.582l3.487,-0.290l2.618,0.290l2.615,1.162l1.743,1.453l2.616,0.000l3.490,0.581l2.616,-0.872l3.488,-0.291l4.070,-2.033l1.745,0.291l1.452,0.871l3.197,-0.290l-1.453,2.324l-1.744,2.612l0.581,1.162l1.455,-0.290l2.904,0.290l2.036,-0.872l2.327,0.872l2.325,1.742l-0.291,1.161l-2.034,-0.289l-4.071,0.289l-2.035,0.872l-2.034,1.742l-4.069,1.162l-2.909,1.451l-2.614,-0.580l-1.745,-0.290l-1.454,1.742l0.873,1.162l0.581,0.871l-2.033,0.871l-1.745,1.452l-3.199,0.871l-4.359,0.289l-4.361,0.873l-3.197,1.451l-1.163,-0.870l-3.489,0.000l-4.069,-1.743l-2.615,-0.291l-3.781,0.291l-5.522,-0.580l-3.196,0.000l-1.456,-1.453l-1.163,-2.613l-1.743,-0.291l-3.488,-1.742l-3.778,-0.290l-3.198,-0.581l-0.873,-1.162l0.873,-3.194l-1.746,-2.323l-4.067,-0.872l-2.326,-1.451l0.581,2.032z",
						"MR" : "M440.34,190.602l-2.034,-1.742l-1.454,-2.033l-2.034,-0.580l-1.163,-0.872l-1.454,0.000l-1.452,0.581l-1.456,-0.291l-0.871,0.872l-0.290,-1.453l0.871,-1.451l0.290,-2.614l-0.290,-2.613l-0.291,-1.453l0.291,-1.161l-0.871,-1.452l-1.454,-1.161l0.582,-0.871l11.046,0.000l-0.581,-4.066l0.581,-1.451l2.615,0.000l0.000,-7.261l9.011,0.290l0.000,-4.355l10.176,6.679l-4.070,0.291l1.161,11.615l1.454,11.906l0.582,0.291l-0.582,2.032l-11.046,0.000l-0.581,0.581l-1.161,0.000l-1.455,0.580l-1.744,-0.871l-0.872,0.000l-0.583,1.743l0.871,-0.290z",
						"MW" : "M568.822,262.618l-0.582,2.032l0.582,3.776l1.165,-0.291l0.871,0.871l1.163,2.034l0.289,3.483l-1.163,0.581l-0.871,2.032l-1.744,-1.742l-0.292,-2.032l0.582,-1.161l-0.290,-1.161l-0.873,-0.582l-0.871,0.291l-1.455,-1.454l-1.452,-0.580l0.580,-2.612l0.872,-0.873l-0.290,-2.323l0.290,-2.322l0.582,-0.582l-0.582,-2.322l-1.452,-1.452l2.907,0.581l0.289,0.871l1.163,1.161l-0.582,-3.776z",
						"MX" : "M206.341,159.82l-1.163,2.324l-0.291,2.033l-0.290,3.774l-0.291,1.162l0.581,1.743l0.872,1.161l0.582,2.033l1.744,2.323l0.581,1.452l1.163,1.451l2.906,0.582l1.163,1.161l2.326,-0.871l2.034,-0.290l2.035,-0.291l1.745,-0.581l1.743,-1.161l0.872,-1.452l0.000,-2.323l0.582,-0.871l2.034,-0.581l2.908,-0.872l2.324,0.291l1.745,-0.291l0.582,0.582l0.000,1.161l-1.454,1.742l-0.873,1.742l0.582,0.581l-0.291,1.162l-0.872,2.033l-0.582,-0.581l-0.581,0.000l-0.580,0.000l-0.872,1.742l-0.582,-0.580l-0.290,0.290l0.000,0.290l-2.617,0.000l-2.615,0.000l0.000,1.743l-1.163,0.000l0.872,0.870l1.162,0.581l0.291,0.581l0.582,0.291l-0.292,0.871l-3.487,0.000l-1.164,2.033l0.291,0.580l-0.291,0.581l0.000,0.871l-3.197,-2.903l-1.454,-0.872l-2.325,-0.870l-1.453,0.290l-2.325,1.161l-1.163,0.291l-2.035,-0.872l-2.035,-0.580l-2.617,-1.162l-2.034,-0.291l-3.198,-1.451l-2.325,-1.161l-0.582,-0.872l-1.453,0.000l-2.906,-0.871l-1.163,-1.453l-2.907,-1.451l-1.454,-1.742l-0.581,-1.453l0.872,-0.290l-0.291,-0.581l0.582,-0.871l0.000,-0.871l-0.873,-1.161l-0.290,-1.162l-0.872,-1.452l-2.325,-2.614l-2.908,-2.322l-1.453,-1.453l-2.325,-1.161l-0.290,-0.872l0.290,-1.451l-1.454,-0.871l-1.453,-1.162l-0.872,-2.032l-1.454,-0.291l-1.453,-1.452l-1.454,-1.161l0.000,-0.871l-1.453,-2.033l-1.162,-2.324l0.290,-0.870l-2.035,-1.162l-0.872,0.000l-1.744,-0.581l-0.290,1.162l0.290,1.161l0.290,2.034l0.872,1.161l2.036,2.032l0.581,0.581l0.291,0.290l0.581,0.872l0.291,0.000l0.581,1.742l0.872,0.580l0.581,1.162l1.745,1.162l0.872,2.613l0.872,1.162l0.872,1.452l0.000,1.452l1.453,0.000l0.872,1.160l1.164,1.454l0.000,0.290l-1.164,1.161l-0.581,0.000l-0.581,-1.742l-2.035,-1.452l-1.744,-1.453l-1.454,-0.580l0.000,-2.033l-0.291,-1.452l-1.453,-0.870l-1.744,-1.453l-0.581,0.581l-0.582,-0.871l-1.743,-0.581l-1.745,-1.742l0.291,0.000l1.163,0.000l1.162,-0.872l0.000,-1.451l-2.034,-1.742l-1.744,-0.871l-0.873,-1.742l-1.162,-1.744l-1.163,-2.322l-1.163,-2.323l3.198,-0.291l3.487,-0.290l-0.290,0.581l4.070,1.452l6.395,1.742l5.232,0.000l2.326,0.000l0.000,-1.162l4.650,0.000l1.163,1.162l1.453,0.871l1.454,1.162l0.872,1.451l0.872,1.453l1.454,0.871l2.325,0.871l1.744,-2.323l2.035,0.000l2.034,1.161l1.454,1.742l0.872,1.742l1.744,1.452l0.582,2.033l0.581,1.162l2.326,0.871l1.744,0.580l-1.163,0.000z",
						"MY" : "M751.953,213.833l0.29,1.451l1.744-0.289l0.873-1.162l0.582,0.29l1.741,1.743l1.165,1.741l0.29,1.743l-0.29,1.452v0.87l0.29,1.453l0.871,0.871l1.162,2.322v1.162h-2.033l-2.616-2.033l-3.195-2.032l-0.295-1.452l-1.452-1.743l-0.581-2.322l-0.871-1.452l0.289-2.031l-0.58-1.162l0.291-0.582L751.953,213.833zM800.205,218.769l-2.034,0.871l-2.325-0.58h-3.198l-0.871,3.193l-1.163,0.872l-1.452,3.774l-2.036,0.581l-2.615-0.581l-1.454,0.291l-1.453,1.16h-1.744l-1.744,0.581l-2.033-1.741l-0.584-1.743l2.036,0.871l2.325-0.581l0.581-2.322l1.163-0.29l3.197-0.581l2.036-2.324l1.162-1.741l1.453,1.451l0.58-0.87h1.163l0.291-1.743v-1.451l2.327-1.743l1.161-2.322h1.162l1.455,1.452v1.162l2.034,0.869l2.325,0.872l-0.29,0.872l-1.744,0.289L800.205,218.769z",
						"MZ" : "M568.822,262.618l2.036,-0.292l3.486,0.872l0.581,-0.291l2.036,-0.289l0.872,-0.581l1.746,0.000l2.907,-1.162l2.323,-1.452l0.292,1.162l0.000,2.613l0.289,2.614l0.000,4.064l0.584,1.453l-0.873,2.033l-0.873,1.742l-1.742,1.742l-2.618,1.161l-3.199,1.163l-2.905,3.194l-1.163,0.290l-2.036,2.033l-1.162,0.580l0.000,2.034l1.162,2.032l0.582,1.741l0.000,0.874l0.581,-0.292l-0.291,2.614l-0.290,1.451l0.581,0.290l-0.291,1.162l-1.161,1.161l-2.327,0.873l-3.198,1.451l-1.452,1.162l0.289,1.161l0.873,0.000l-0.291,1.452l-2.034,0.000l-0.291,-1.162l-0.580,-1.161l0.000,-1.162l0.290,-2.904l-0.582,-2.033l-1.452,-3.774l2.904,-3.195l0.874,-2.033l0.289,-0.290l0.293,-1.452l-0.293,-0.870l0.000,-2.033l0.582,-2.032l0.000,-3.486l-1.452,-0.871l-1.163,-0.289l-0.582,-0.582l-1.452,-0.581l-2.325,0.000l0.000,-0.870l-0.292,-2.033l8.429,-2.325l1.455,1.454l0.871,-0.291l0.873,0.582l0.290,1.161l-0.582,1.161l0.292,2.032l1.744,1.742l0.871,-2.032l1.163,-0.581l-0.289,-3.483l-1.163,-2.034l-0.871,-0.871l-1.165,0.291l-0.582,-3.776l-0.582,2.032z",
						"NA" : "M518.825,309.661l-2.036,-2.325l-1.163,-2.033l-0.579,-2.613l-0.584,-2.032l-1.161,-4.065l0.000,-3.485l-0.291,-1.452l-1.163,-1.162l-1.454,-2.034l-1.452,-3.483l-0.582,-1.743l-2.034,-2.613l-0.291,-2.033l1.452,-0.581l1.455,-0.581l1.743,0.292l1.745,1.161l0.581,-0.291l11.047,0.000l2.033,1.162l6.396,0.582l5.232,-1.162l2.326,-0.582l1.745,0.000l0.871,0.582l0.290,0.289l-1.743,0.582l-0.874,0.000l-1.744,1.162l-0.871,-1.162l-4.361,0.871l-2.033,0.291l0.000,9.582l-2.908,0.289l0.000,7.843l0.000,10.163l-2.326,1.451l-1.452,0.290l-1.744,-0.581l-1.162,-0.290l-0.582,-1.162l-1.163,-0.580l1.163,-1.453z",
						"NC" : "M930.142,289.042l2.325,1.452l1.452,1.454l-1.162,0.579l-1.453,-0.871l-2.036,-1.162l-1.744,-1.452l-1.742,-1.741l-0.582,-1.162l1.161,0.000l1.745,1.162l1.162,0.870l-0.874,-0.871z",
						"NCY" : "M563.881,134.267l0.289,0.000l0.291,-0.581l2.035,0.000l2.326,-0.871l-1.745,1.162l0.293,0.580l-0.293,0.000l-0.581,0.000l-0.581,0.000l-0.290,-0.290l-0.582,0.000l-0.582,0.290l0.580,0.290z",
						"NE" : "M479.583,198.151l0.291,-2.032l-3.198,-0.581l-0.291,-1.161l-1.453,-2.033l-0.292,-1.162l0.292,-1.161l1.744,-0.291l0.872,-0.870l3.778,-0.291l2.326,-0.580l0.291,-1.452l1.452,-2.034l0.000,-6.097l4.070,-1.453l7.849,-5.227l9.592,-5.226l4.361,1.161l1.452,1.452l2.036,-1.162l0.581,4.357l1.164,0.871l0.000,0.871l1.163,0.871l-0.581,1.162l-1.164,5.517l-0.292,3.484l-3.486,2.614l-1.165,3.775l1.165,0.871l0.000,1.742l1.742,0.291l-0.289,1.161l-0.582,0.291l-0.292,0.871l-0.289,0.000l-2.036,-2.904l-0.580,-0.291l-2.327,1.453l-2.033,-0.581l-1.455,-0.291l-0.872,0.291l-1.453,0.000l-1.743,1.161l-1.455,0.000l-3.196,-1.161l-1.452,0.581l-1.165,0.000l-1.163,-1.162l-2.617,-0.872l-3.195,0.291l-0.582,0.581l-0.292,1.452l-0.871,1.161l-0.291,2.324l-2.034,-1.453l-0.874,0.000l1.161,-0.871z",
						"NG" : "M497.023,217.898l-2.615,0.871l-1.164,0.000l-1.161,0.581l-2.037,0.000l-1.452,-1.743l-0.873,-2.032l-2.033,-1.742l-2.036,0.000l-2.615,0.000l0.289,-4.647l0.000,-1.741l0.581,-1.743l0.582,-0.871l1.454,-1.452l-0.291,-0.873l0.580,-1.160l-0.580,-1.453l0.000,-1.160l0.291,-2.324l0.871,-1.161l0.292,-1.452l0.582,-0.581l3.195,-0.291l2.617,0.872l1.163,1.162l1.165,0.000l1.452,-0.581l3.196,1.161l1.455,0.000l1.743,-1.161l1.453,0.000l0.872,-0.291l1.455,0.291l2.033,0.581l2.327,-1.453l0.580,0.291l2.036,2.904l0.289,0.000l1.163,0.871l-0.289,0.580l0.000,0.872l-2.326,2.323l-0.873,1.742l-0.289,1.452l-0.582,0.582l-0.581,1.742l-1.455,1.161l-0.581,1.452l-0.580,1.161l-0.291,1.162l-1.744,0.870l-1.746,-1.161l-0.871,0.000l-1.743,1.743l-0.872,0.000l-1.164,2.614l0.872,-2.032z",
						"NI" : "M237.734,200.475l-0.872,-0.871l-1.163,-1.162l-0.581,-0.871l-1.163,-0.871l-1.454,-1.162l0.291,-0.580l0.291,0.580l0.291,-0.290l0.872,0.000l0.291,-0.871l0.581,0.000l-0.290,-1.162l0.871,-0.291l0.582,0.291l0.581,-0.871l0.581,0.580l0.291,-0.289l0.581,-0.291l1.163,-0.871l0.000,-0.581l0.291,0.000l0.291,-0.580l0.291,0.000l0.290,0.290l0.582,0.000l0.581,-0.290l0.872,0.000l0.872,-0.291l0.291,-0.291l1.162,0.000l-0.291,0.291l-0.290,0.581l0.290,0.871l-0.582,1.162l-0.289,0.870l0.000,1.453l0.000,0.580l0.289,1.162l-0.580,0.290l-0.291,1.161l0.291,0.872l-0.581,0.581l0.000,0.871l0.581,0.290l-0.581,0.581l-0.872,0.000l-0.583,-0.581l-0.871,-0.290l-0.581,0.290l-1.745,-0.581l0.581,-0.291z",
						"NL" : "M490.628,83.74l2.035,0.000l0.581,1.161l-0.581,2.323l-0.871,1.162l-1.454,0.000l0.290,2.904l-1.452,-0.582l-1.745,-1.451l-2.617,0.580l-2.034,0.000l1.452,-0.870l2.618,-4.066l-3.778,1.161z",
						"NO" : "M551.381,35.246l8.43,2.032l-3.488,0.582l3.198,1.742l-4.942,1.161l-2.034,0.29l1.161-2.032l-3.486-1.162l-4.362,1.162l-1.452,2.032l-2.615,1.162l-2.907-0.581h-3.488l-3.198-1.452l-1.453,0.581l-1.744,0.29l-0.582,1.743l-5.231-0.291l-0.582,1.452h-2.615l-1.745,2.033l-2.906,2.903l-4.361,3.775l1.165,1.162l-0.873,0.872h-2.907l-1.744,2.613l0.29,3.775l1.743,1.162l-1.162,3.484l-2.033,1.742l-1.455,1.742l-1.742-1.742l-5.524,3.194l-3.488,0.582l-3.778-1.452l-1.163-2.905l-0.871-6.387l2.615-1.743l7.268-2.323l5.523-2.904l4.941-3.774l6.685-5.228l4.651-2.033l7.559-3.484l5.813-1.162h4.651l4.069-2.324l5.231,0.291L551.381,35.246zM541.79,16.951l-6.105,1.162l-4.941-0.87l2.036-0.582l-1.747-0.872l5.814-0.58l0.873,1.161L541.79,16.951zM524.058,11.724l9.01,2.033l-6.977,1.162l-1.452,2.032l-2.325,0.581l-1.455,2.324h-3.196l-6.104-1.743l2.615-0.87l-4.069-0.873l-5.523-2.323l-2.036-2.033l7.56-1.162l1.454,1.162l3.777-0.291l1.163-0.871h4.07L524.058,11.724zM543.823,9.692l5.522,1.161l-4.358,1.452l-7.849,0.29l-8.14-0.581l-0.582-0.58h-3.777l-3.199-1.453l8.722-0.58l3.778,0.58l2.906-0.871L543.823,9.692z",
						"NP" : "M716.198,154.304l0.000,1.161l0.291,1.742l-0.291,1.162l-2.326,0.000l-3.197,-0.581l-2.325,-0.290l-1.453,-1.452l-3.779,-0.291l-3.490,-1.742l-2.614,-1.161l-2.908,-1.162l1.163,-2.613l1.745,-1.161l1.162,-0.582l2.326,0.871l2.616,1.742l1.454,0.291l1.162,1.452l2.034,0.581l2.326,1.162l2.906,0.580l-3.198,-0.291z",
						"NZ" : "M949.907,343.345l0.873,1.161l1.745-1.161l0.87,1.161v1.161l-0.87,1.452l-2.036,2.033l-1.163,1.161l0.873,1.162h-2.034l-2.327,1.162l-0.871,1.74l-1.455,2.904l-2.323,1.161l-1.165,0.871l-2.615-0.289l-1.742-0.872h-3.198l-0.292-1.162l1.453-2.033l3.49-2.613l1.744-0.58l2.034-1.16l2.325-1.452l1.744-1.453l1.162-2.032l0.872-0.58l0.58-1.452l1.745-1.451L949.907,343.345zM954.559,330.277l1.743,2.904l0.292-1.743l1.16,0.58l0.293,2.324l2.324,0.872h1.745l1.743-0.872l1.453,0.289l-0.871,2.326l-0.873,1.74h-2.033l-0.582,0.581v1.452l-0.289,0.291l-1.165,1.452l-1.163,2.032l-2.325,1.161l-0.29-0.87l-1.162-0.291l1.452-2.322l-0.871-1.453l-2.907-1.16v-0.873l2.035-1.159l0.58-2.034l-0.289-1.743l-1.164-1.743l0.292-0.58l-1.454-1.161l-2.034-2.323l-1.162-2.032l0.87-0.291l1.455,1.453l2.325,0.87L954.559,330.277z",
						"OM" : "M635.678,172.888l-0.871,1.742h-1.163l-0.58,0.581l-0.582,1.452l0.29,1.742l-0.29,0.581l-1.163-0.29l-1.744,1.162l-0.291,1.452l-0.58,0.581h-1.743l-1.165,0.582v1.162l-1.163,0.581l-1.452-0.291l-2.034,1.162h-1.163l-0.873-1.743l-2.325-4.645l8.431-2.613l1.745-5.519l-1.165-2.032v-1.162l0.873-1.162v-1.161l1.162-0.581l-0.581-0.291l0.289-1.742h1.456l1.161,1.742l1.745,1.161l2.036,0.291l1.45,0.581l1.165,1.452l0.871,0.872l0.872,0.58v0.582l-0.872,1.451l-0.582,0.872L635.678,172.888zM628.995,159.82l-0.291,0.291l-0.583-0.871l0.874-0.872l0.289,0.291L628.995,159.82z",
						"PA" : "M259.244,211.219l-0.872,-0.871l-0.580,-1.452l0.872,-0.871l-0.872,-0.290l-0.582,-0.871l-1.163,-0.581l-1.162,0.000l-0.582,1.162l-1.162,0.580l-0.582,0.000l-0.291,0.581l1.163,1.451l-0.581,0.581l-0.582,0.291l-1.163,0.290l-0.581,-1.742l-0.291,0.291l-0.872,0.000l-0.581,-1.162l-1.163,-0.291l-0.580,-0.290l-1.164,0.000l-0.291,0.581l-0.290,-0.291l0.290,-0.580l0.291,-0.582l-0.291,-0.289l0.583,-0.581l-0.583,-0.291l0.000,-1.161l0.872,-0.291l1.163,1.162l0.000,0.581l0.872,0.000l0.291,-0.291l0.872,0.872l1.163,-0.291l1.163,-0.581l1.744,-0.579l0.872,-0.873l1.744,0.000l-0.291,0.291l1.745,0.291l1.163,0.291l0.871,0.870l0.872,0.870l-0.290,0.292l0.872,1.741l-0.582,0.871l-0.872,-0.289l0.582,-1.451z",
						"PE" : "M282.208,279.17l-0.872,1.451l-1.163,0.872l-2.905,-1.743l-0.292,-1.162l-5.232,-2.613l-4.942,-3.195l-2.325,-1.451l-1.163,-2.323l0.581,-0.871l-2.326,-3.485l-2.905,-5.227l-2.326,-5.517l-1.163,-1.161l-0.872,-2.033l-2.325,-1.743l-1.745,-1.161l0.872,-1.162l-1.453,-2.613l0.872,-2.033l2.326,-1.742l0.291,1.160l-0.873,0.582l0.000,1.162l1.163,-0.290l1.163,0.290l1.162,1.451l1.454,-1.162l0.582,-1.742l1.744,-2.613l3.196,-0.871l3.198,-2.904l0.872,-1.741l-0.581,-2.324l0.872,-0.291l1.744,1.452l0.872,1.163l1.163,0.870l1.744,2.903l2.035,0.291l1.453,-0.870l1.164,0.579l1.452,-0.290l2.326,1.452l-1.744,2.613l0.582,0.290l1.452,1.454l-2.324,-0.290l-0.583,0.580l-2.033,0.289l-3.198,2.034l-0.291,1.161l-0.581,1.162l0.290,1.451l-1.744,0.581l0.000,1.162l-0.872,0.581l1.163,2.614l1.744,1.451l-0.581,1.451l1.744,0.000l0.872,1.453l2.616,0.000l2.326,-1.453l-0.292,4.066l1.163,0.292l1.744,-0.292l2.326,4.355l-0.582,0.873l-0.290,2.033l0.000,2.323l-1.163,1.452l0.582,0.872l-0.582,0.869l1.163,2.324l1.745,-2.904z",
						"PG" : "M902.817,249.55l-0.873,0.29l-1.163-0.871l-1.162-1.742l-0.581-2.032l0.581-0.289l0.29,0.579l0.583,0.872l1.452,1.741l1.163,0.871L902.817,249.55zM892.063,246.065l-1.455,0.292l-0.29,0.58l-1.454,0.871l-1.452,0.582h-1.452l-2.328-0.872l-1.453-0.872v-0.871l2.616,0.582l1.454-0.292l0.289-1.159l0.582-0.293l0.292,1.452h1.452l0.873-1.159l1.452-0.873l-0.289-1.741h1.741l0.584,0.58l-0.291,1.452L892.063,246.065zM878.982,251.292l2.326,1.742l1.741,2.904h1.745v1.16l2.035,0.582l-0.87,0.291l2.904,1.16l-0.29,0.871l-1.744,0.292l-0.87-0.872l-2.328-0.291l-2.616-0.29l-2.325-1.743l-1.452-1.451l-1.454-2.613l-3.488-1.161l-2.326,0.871l-1.744,0.871l0.292,2.032l-2.034,0.871l-1.744-0.29l-2.617-0.29l-0.29-9.002v-8.712l4.94,1.742l4.941,1.451l2.036,1.453l1.452,1.452l0.292,1.741l4.649,1.743l0.583,1.451l-2.328,0.291L878.982,251.292zM895.259,243.451l-0.873,0.582l-0.582-1.741l-0.579-0.873l-1.162-0.87l-1.455-1.162l-2.034-0.871l0.579-0.58l1.455,0.58l1.163,0.581l1.163,0.871l0.87,1.161l1.165,0.871L895.259,243.451z",
						"PH" : "M821.715,207.735l0.292,2.033v1.451l-0.872,2.322l-0.871-2.612l-1.454,1.452l0.871,2.033l-0.871,1.16l-3.199-1.452l-0.581-2.032l0.874-1.452l-1.745-1.161l-0.873,1.161l-1.452-0.29l-2.034,1.742l-0.292-0.871l0.871-2.323l1.744-0.871l1.455-0.872l1.163,1.162l2.035-0.87l0.29-1.162h2.033v-2.323l2.036,1.453l0.29,1.451L821.715,207.735zM815.03,202.798l-0.871,0.87l-0.873,1.744l-0.871,0.579l-1.744-1.741l0.582-0.871l0.581-0.581l0.289-1.743l1.455-0.29l-0.292,2.033l2.036-2.614L815.03,202.798zM799.916,205.413l-3.488,2.612l1.163-2.033l2.034-1.741l1.743-1.744l1.454-2.902l0.291,2.322l-1.745,1.453L799.916,205.413zM809.216,198.151l1.743,0.872h1.745v1.161l-1.452,1.162l-1.745,0.871v-1.162l0.292-1.451L809.216,198.151zM819.099,197.571l0.874,2.904l-2.036-0.582v0.872l0.581,1.741l-1.162,0.582l-0.29-2.033h-0.584l-0.578-1.742l1.743,0.291v-1.162l-1.743-2.033h2.614L819.099,197.571zM808.344,194.958l-0.873,2.323l-1.161-1.162l-1.454-2.323l2.615,0.291L808.344,194.958zM807.764,180.148l1.743,0.581l0.871-0.581v0.581l-0.289,1.162l0.87,2.033l-0.581,2.324l-1.744,0.87l-0.29,2.323l0.582,2.033l1.452,0.29l1.165-0.29l3.486,1.451l-0.289,1.743l0.87,0.581l-0.289,1.161l-2.036-1.161l-1.163-1.452l-0.579,0.871l-1.744-1.743l-2.617,0.581l-1.454-0.581l0.291-1.162l0.873-0.871l-0.873-0.58l-0.291,1.162l-1.453-1.743l-0.29-1.161l-0.291-2.613l1.162,0.871l0.292-4.355l0.871-2.324H807.764z",
						"PK" : "M680.735,128.75l2.036,1.451l0.870,2.033l4.361,1.162l-2.617,2.323l-3.196,0.290l-4.069,-0.581l-1.453,1.162l1.160,2.324l0.874,2.032l2.325,1.161l-2.325,1.743l0.000,2.032l-2.618,2.614l-1.745,2.904l-2.904,2.904l-3.199,-0.291l-3.197,2.904l1.745,1.162l0.579,2.032l1.455,1.451l0.583,2.324l-6.106,0.000l-1.745,2.033l-2.033,-0.871l-0.873,-2.033l-2.034,-2.033l-5.234,0.580l-4.360,0.000l-4.068,0.291l1.161,-3.193l4.070,-1.162l-0.290,-1.452l-1.453,-0.291l0.000,-2.613l-2.617,-1.162l-1.162,-1.742l-1.453,-1.452l4.649,1.452l2.907,-0.291l1.455,0.291l0.581,-0.580l2.035,0.289l3.488,-1.161l0.291,-2.323l1.452,-1.742l2.034,0.000l0.292,-0.581l2.036,-0.290l1.160,0.000l0.875,-0.580l0.000,-1.743l1.162,-1.743l1.742,-0.580l-1.161,-1.743l2.616,0.000l0.872,-0.871l-0.289,-1.162l1.450,-1.161l-0.289,-1.452l-0.581,-1.162l1.454,-1.161l3.197,-0.580l2.907,-0.291l1.454,-0.581l-1.743,0.290z",
						"PL" : "M515.047,90.418l-1.165,-1.742l0.292,-0.870l-0.581,-1.452l-1.163,-1.162l0.872,-0.581l-0.583,-1.452l1.744,-0.870l4.362,-1.163l3.489,-1.161l2.614,0.581l0.291,0.580l2.617,0.291l3.489,0.290l4.940,-0.290l1.454,0.290l0.582,0.872l0.289,1.452l0.582,0.870l0.000,1.161l-1.453,0.582l0.871,1.162l0.000,1.161l1.455,2.614l-0.292,0.580l-1.452,0.580l-2.617,2.033l0.872,1.452l-0.582,-0.289l-2.616,-1.163l-2.033,0.582l-1.455,-0.291l-1.453,0.581l-1.455,-1.163l-1.160,0.582l0.000,-0.291l-1.454,-1.161l-2.034,-0.290l-0.290,-0.872l-1.746,-0.290l-0.581,0.580l-1.454,-0.580l0.293,-0.580l-2.036,-0.291l1.453,0.872z",
						"PR" : "M291.219,180.148l1.455,0.000l0.581,0.581l-0.872,0.871l-2.035,0.000l-1.453,0.000l-0.291,-1.162l0.582,-0.290l-2.033,0.000z",
						"PS" : "M571.728,141.816l0.000,1.743l-0.581,0.871l-1.160,0.291l0.000,-0.581l0.871,-0.581l-0.871,-0.289l0.578,-1.743l-1.163,-0.289z",
						"PT" : "M448.769,115.683l1.163,-0.581l1.163,-0.291l0.581,1.162l1.744,0.000l0.291,-0.290l1.746,0.000l0.581,1.452l-1.163,0.870l0.000,2.033l-0.582,0.291l0.000,1.451l-1.162,0.291l1.162,1.452l-0.873,2.032l0.873,0.581l-0.291,0.871l-0.871,0.871l0.000,1.162l-0.874,0.581l-1.452,-0.290l-1.454,0.290l0.292,-2.324l-0.292,-1.451l-1.163,-0.291l-0.581,-1.162l0.291,-1.742l0.871,-1.160l0.292,-0.873l0.582,-1.741l0.000,-1.162l-0.582,-0.871l0.292,1.161z",
						"PY" : "M301.103,292.237l1.163,-3.485l0.000,-1.451l1.453,-2.324l4.652,-0.871l2.616,0.000l2.615,1.451l0.000,0.871l0.872,1.452l-0.291,3.776l2.907,0.581l1.163,-0.581l2.035,0.871l0.291,0.581l0.291,2.613l0.290,1.162l1.163,0.000l0.872,-0.290l1.163,0.290l0.000,1.741l-0.292,1.454l-0.580,1.742l-0.582,2.322l-2.325,2.032l-2.326,0.581l-3.197,-0.581l-2.617,-0.580l2.617,-4.354l-0.291,-1.162l-2.906,-1.161l-3.198,-2.034l-2.326,-0.290l5.232,4.356z",
						"QA" : "M613.587,162.725l0.000,-1.743l0.582,-1.452l0.873,-0.290l0.871,0.871l0.000,1.451l-0.581,1.744l-0.872,0.000l0.873,0.581z",
						"RO" : "M536.265,99.13l1.163,-0.581l1.744,0.581l1.745,0.000l1.163,0.581l1.162,-0.581l2.036,-0.291l0.579,-0.580l1.163,0.000l0.873,0.290l0.871,0.872l0.873,1.162l1.453,1.742l0.291,1.161l-0.291,1.161l0.291,1.163l1.452,0.580l1.166,-0.580l1.161,0.580l0.289,0.581l-1.450,0.581l-0.874,0.000l-0.872,3.194l-1.454,-0.290l-2.035,-0.872l-3.196,0.581l-1.452,0.581l-4.071,0.000l-2.035,-0.581l-1.164,0.291l-0.581,-1.162l-0.581,-0.581l0.581,-0.291l-0.581,-0.289l-0.871,0.580l-1.745,-0.872l-0.289,-1.161l-1.454,-0.580l-0.293,-0.872l-1.741,-1.161l2.325,-0.581l1.742,-1.741l1.164,-2.034l-1.743,0.581z",
						"RS" : "M531.325,106.1l1.454,0.580l0.289,1.161l1.745,0.872l0.871,-0.580l0.581,0.289l-0.581,0.291l0.581,0.581l-0.871,0.581l0.290,1.161l1.454,1.162l-1.164,0.871l-0.580,0.871l0.290,0.289l-0.290,0.292l-1.165,0.000l-1.161,0.290l0.000,-0.290l0.290,-0.292l0.292,-0.580l-0.292,0.000l-0.579,-0.580l-0.583,0.000l-0.290,-0.581l-0.581,-0.290l-0.293,-0.291l-0.581,0.291l-0.289,0.871l-0.582,0.000l0.290,0.000l-1.162,-0.581l-0.872,-0.290l-0.290,-0.581l-0.873,-0.290l0.581,-0.291l0.582,-1.161l-1.455,-1.162l0.581,-1.161l-0.871,0.000l1.163,-0.872l-0.873,-0.870l-0.871,-1.163l2.326,-0.580l1.455,0.000l1.741,1.161l-0.293,-0.872z",
						"RU" : "M869.098,91.29l2.907,4.936l-4.07-0.87l-1.743,4.065l2.614,2.613v2.033l-2.034-1.743l-1.743,2.323l-0.582-2.323l0.292-2.904l-0.292-2.904l0.582-2.033v-3.775l-1.454-2.613l0.291-3.774l2.326-1.162l-0.872-1.452l1.163-0.29l0.58,1.742l1.162,2.614l-0.29,2.903L869.098,91.29zM536.265,81.417l-4.94,0.29l-3.488-0.29l0.58-1.452l3.779-0.872l2.906,0.581l1.454,0.291l-0.582,0.871L536.265,81.417zM969.382,36.116l-3.196,0.291l-0.581-0.871l3.777-1.162h-0.01l0.58-0.29h2.326l3.779,0.872v0.29l-2.907,0.871h-3.778H969.382zM869.098,29.728h-4.069l-5.814-0.29l-0.582-0.29l2.618-1.162h3.488l4.067,0.872L869.098,29.728zM888.574,24.501l-3.198,1.162l-4.36-0.291l-4.942-1.16l0.582-0.873l5.232,0.291L888.574,24.501zM873.167,23.049l-2.324,2.033h-9.884l-4.651,0.58l-5.521-1.742l1.454-1.742l3.778-0.582h7.266L873.167,23.049zM632.19,36.407l-1.743,0.291l-9.012-0.291l-0.581-1.161l-4.941-0.872l-0.581-1.452l2.907-0.582V30.89l5.232-2.323l-2.325-0.291l6.393-2.613l-0.578-1.162l6.104-1.452l9.011-1.742l9.3-0.581l4.653-0.871l5.23-0.581l2.036,1.162l-1.745,0.871l-9.883,1.452l-8.43,1.162l-8.43,2.613l-4.069,2.614l-4.361,2.904l0.584,2.033L632.19,36.407zM969.382,52.379h-0.291l-3.486,1.161l-3.488-0.29l2.615,1.452l1.454,2.323l1.455,0.58l0.289,1.162l-0.873,0.872l-4.94-0.582l-7.849,2.033l-2.325,0.291l-4.362,2.033l-4.069,1.742l-0.871,1.161l-4.069-2.033l-6.977,2.324l-1.452-1.162l-2.618,1.162l-3.488-0.291l-0.871,1.742l-3.486,2.613l0.29,1.162l2.906,0.582l-0.291,4.064h-2.615l-1.163,2.324l1.163,1.161l-4.651,1.452l-1.163,3.194l-4.07,0.582l-0.87,2.903l-3.781,2.613l-1.162-2.032l-1.163-3.775l-1.454-6.389l1.164-3.775l2.324-1.453l0.291-1.451l4.36-0.581l4.942-3.484l4.649-2.904l4.943-2.033l2.326-3.775h-3.489l-1.744,2.324l-6.977,3.194l-2.034-3.485l-7.269,0.872l-6.975,4.646l2.325,1.742l-6.105,0.58l-4.359,0.291l0.291-2.032l-4.358-0.292l-3.199,1.453l-8.431-0.581l-9.01,0.871l-9.013,5.227l-10.463,6.679l4.357,0.29l1.165,1.743l2.615,0.581l1.744-1.452l3.196,0.291l3.78,2.904l0.29,2.323l-2.326,2.904v3.194l-1.452,4.356l-4.07,4.066l-0.87,1.741l-3.781,3.194l-3.777,3.194l-1.744,1.742l-3.488,1.452l-1.744,0.291l-1.744-1.453l-3.78,2.033l-0.579,0.871l-0.292-0.582v-1.161l1.454-0.291l0.29-3.194l-0.581-2.324l2.325-0.871l3.198,0.291l2.034-2.613l0.871-2.904l1.163-1.162l1.454-2.323l-4.651,0.871l-2.325,0.872h-4.361l-0.871-2.614l-3.488-1.742l-4.651-0.871l-1.16-2.904l-0.874-1.453l-0.871-1.161l-1.744-2.903l-2.617-1.162l-4.067-0.58h-3.491l-3.486,0.58l-2.325,1.162l1.452,0.871v1.452l-1.452,0.872l-2.328,2.903v1.162l-4.068,1.742l-3.197-1.162l-3.197,0.291l-1.452-0.871l-1.745-0.291l-4.069,2.033l-3.488,0.291l-2.616,0.872l-3.49-0.581h-2.615l-1.743-1.453l-2.615-1.162l-2.618-0.291l-3.486,0.291l-2.617,0.582l-4.069-1.162l-0.29-2.324l-3.488-0.58l-2.326-0.29l-3.196-1.162l-2.907,2.903l1.163,1.453l-2.617,2.033l-4.07-0.581l-2.617-0.29l-1.741-1.162h-2.908l-2.616-0.871l-4.068,1.161l-5.232,2.324l-2.907,0.582l-1.163,0.29l-1.454-1.742l-3.488,0.291l-1.163-1.162l-2.034-0.582l-1.16-1.452l-1.455-0.581l-4.069,0.872l-3.78-1.742l-1.453,1.451l-6.104-6.968l-3.488-2.033l0.871-0.871l-6.975,2.613h-2.617l0.29-1.451l-3.488-0.872l-2.906,0.581l-0.872-2.904l-4.941-0.581l-2.326,1.161l-6.977,1.162l-1.454,0.582l-10.172,0.872l-1.454,1.161l2.036,1.743l-2.617,0.87l0.581,0.581l-2.617,1.452l4.361,1.742l-0.581,1.453l-3.78-0.291l-0.871,0.872l-3.488-1.452l-4.36,0.29l-2.906,1.162l-3.488-1.162l-5.812-2.032h-4.361l-5.814,3.194l-0.289,2.033l-2.906-1.742l-2.036,3.195l0.58,0.29l-1.452,2.324l2.326,1.742h2.034l1.743,1.741l-0.289,1.453l1.452,0.581l-1.163,1.452l-2.906,0.581l-2.615,2.614l2.615,2.613l-0.289,2.032l2.906,3.194l-1.744,1.162l-0.29,0.581h-1.165l-2.033-1.743h-0.873l-1.745-0.871l-0.581-1.162l-2.614-0.58l-1.745,0.58l-0.581-0.58l-3.78-1.162l-3.778-0.581l-2.325-0.581l-0.581,0.581l-3.488-2.323l-3.197-1.161l-2.326-1.743l2.034-0.29l2.328-2.324l-1.455-1.162l4.07-1.162l-0.292-0.581l-2.323,0.581v-1.161l1.452-0.871l2.615-0.291l0.582-0.871l-0.582-1.452l1.163-1.451l-0.29-0.873l-4.07-0.871h-1.454l-1.744-1.162l-2.034,0.291l-3.488-0.871V91.29l-0.871-1.162h-2.327l-0.29-0.871l0.873-0.581l-1.744-1.742l-2.906,0.29h-0.872l-0.584,0.582h-1.16l-0.583-2.033l-0.871-0.872l0.581-0.291l2.326,0.291l1.163-0.58l-0.872-0.872l-2.036-0.581l0.292-0.29l-1.163-0.581l-1.743-1.742l0.578-0.871l-0.289-1.162l-2.615-0.581l-1.454,0.291l-0.29-0.872l-2.907-0.581l-0.871-1.742l-0.291-1.161l-1.455-0.582l1.163-0.871l-0.582-2.613l1.745-1.742l-0.291-0.291l3.199-1.742l-2.908-1.162l5.813-3.485l2.617-1.742l0.871-1.162l-4.069-2.032l1.162-1.742l-2.325-2.033l1.744-2.324l-3.198-3.194l2.617-2.033l-4.362-1.743l0.584-2.033l2.034-0.29l4.942-1.161l2.615-0.872l4.651,1.743l7.557,0.58l10.465,3.195l2.035,1.162v1.741l-2.906,1.453l-4.651,0.871l-12.21-2.033l-2.033,0.291l4.651,2.033v1.161l0.292,2.904l3.486,0.872l2.036,0.58l0.581-1.161l-1.746-1.162l1.746-1.162l6.685,1.742l2.326-0.581l-1.745-2.033l6.396-2.903l2.323,0.29l2.617,0.871l1.745-1.742l-2.326-1.742l1.163-1.742l-2.034-1.452l7.848,0.872l1.453,1.452l-3.489,0.289v1.453l2.326,1.162l4.361-0.582l0.581-2.033l5.812-1.161l9.594-2.323h2.034l-2.907,1.742l3.488,0.29l2.034-0.871h5.232l4.069-1.161l3.197,1.452l2.906-1.742l-2.906-1.453l1.454-1.162l8.14,0.872l3.778,0.871l10.176,3.194l1.742-1.452l-2.907-1.452v-0.581l-3.197-0.291l0.874-1.162l-1.455-2.323v-0.871l4.943-2.323l1.742-2.613l2.035-0.582l7.268,0.872l0.581,1.451l-2.615,2.324l1.743,0.871l0.872,1.742l-0.581,3.775l3.198,1.743l-1.165,1.742l-5.521,4.066l3.197,0.29l1.161-0.871l2.907-0.872l0.874-1.161l2.325-1.453l-1.744-1.452l1.454-1.742l-3.198-0.291l-0.582-1.451l2.326-2.904l-3.778-2.324l4.94-1.741l-0.581-2.033h1.453l1.454,1.452l-1.163,2.613l2.907,0.581l-1.162-2.033l4.65-0.872l5.522-0.29l5.232,1.451l-2.617-2.032l-0.29-3.195l4.94-0.291h6.688l5.812-0.29l-2.324-1.451l3.197-1.743l3.197-0.29l5.521-1.162l7.27-0.58l0.872-0.582l7.268-0.291l2.325,0.582l6.104-1.452h4.94l0.873-1.161l2.615-1.162l6.396-1.161l4.651,0.87l-3.489,0.872l6.104,0.291l0.874,1.452l2.324-0.871h8.141l6.104,1.452l2.325,1.162l-0.873,1.451l-2.907,0.581l-7.267,1.743l-2.036,0.581l3.49,0.58l4.068,0.581l2.326-0.581l1.452,1.743l1.165-0.581l4.359-0.582l9.013,0.582l0.579,1.161l11.628,0.582v-2.033l5.814,0.291h4.359l4.651,1.451l1.163,1.742l-1.745,1.162l3.488,2.323l4.36,1.161l2.615-2.904l4.653,1.162l4.65-0.871l5.233,0.871l2.034-0.581l4.648,0.29l-2.033-2.614l3.488-1.161l24.998,1.741l2.327,1.743l7.267,2.032l11.045-0.581l5.524,0.581l2.324,1.162l-0.58,2.033l3.486,0.581l3.78-0.581h4.941l4.94,0.581l5.234-0.29l4.938,2.323l3.488-0.872l-2.322-1.742l1.162-1.162l8.721,0.872l5.812-0.292l7.848,1.453l4.069,1.162h-0.01l6.976,2.033l6.977,2.614v1.742l1.744,0.871l-0.581-2.033l7.559,0.291l5.231,2.613l-2.616,1.162l-4.651,0.29v2.613l-1.161,0.581h-2.617l-2.034-0.871l-3.779-0.871l-0.582-1.162l-2.615-0.58l-3.199,0.58l-1.452-1.162l0.581-0.872l-3.198,0.582l1.165,1.452l-1.745,1.162H969.382zM762.998,15.499l-15.406,1.162l4.94-3.484l2.328-0.291h2.034l6.977,1.742L762.998,15.499zM614.46,9.401l-3.488,0.291l-2.617,0.29l-0.289,0.581l-3.199,0.291l-3.197-0.581l1.743-0.871h-6.104l5.233-0.581h4.359l0.291,0.581l1.744-0.581l2.618-0.291l4.067,0.581L614.46,9.401zM748.754,14.047l-5.812,0.29l-7.85-0.87l-4.359-0.872l-2.325-2.033l-3.779-0.581l7.268-1.742L738,7.369l5.232,1.452l6.396,2.614L748.754,14.047z",
						"RW" : "M557.485,234.16l1.163,1.452l-0.289,1.741l-0.582,0.291l-1.454,-0.291l-0.874,1.743l-1.743,-0.290l0.293,-1.453l0.290,-0.290l0.000,-1.742l0.871,-0.580l0.582,0.290l-1.743,0.871z",
						"SA" : "M591.496,185.956l-0.291,-1.162l-0.873,-0.871l-0.290,-1.162l-1.453,-0.871l-1.454,-2.323l-0.582,-2.322l-2.034,-1.744l-1.163,-0.580l-1.743,-2.613l-0.292,-1.744l0.000,-1.741l-1.453,-2.904l-1.454,-1.162l-1.453,-0.580l-0.871,-1.452l0.000,-0.872l-0.581,-1.451l-0.874,-0.582l-1.162,-2.032l-1.452,-2.033l-1.456,-2.033l-1.452,0.000l0.290,-1.451l0.292,-0.871l0.292,-1.162l3.196,0.291l1.161,-0.582l0.581,-1.161l2.036,-0.290l0.581,-0.871l0.872,-0.581l-2.905,-2.614l5.522,-1.451l0.582,-0.582l3.488,0.873l4.067,2.032l7.561,5.517l5.230,0.000l2.326,0.290l0.873,1.452l1.743,0.000l1.165,2.323l1.452,0.581l0.289,0.871l2.036,1.162l0.290,1.162l-0.290,0.870l0.290,0.872l0.584,0.871l0.578,0.871l0.292,0.581l0.873,0.581l0.872,0.000l0.290,0.871l0.291,0.871l0.872,2.613l8.430,1.452l0.580,-0.580l1.165,2.031l-1.745,5.519l-8.430,2.613l-7.849,1.162l-2.615,1.161l-2.036,2.904l-1.163,0.291l-0.580,-0.873l-1.164,0.292l-2.615,-0.292l-0.582,-0.289l-3.197,0.000l-0.582,0.289l-1.161,-0.869l-0.873,1.451l0.289,1.161l1.161,-0.872z",
						"SB" : "M919.968,259.712l0.871,0.873h-2.034l-0.873-1.453l1.452,0.58H919.968zM916.48,257.972l-0.874,0.289l-1.743-0.289l-0.58-0.582v-1.161l2.034,0.581l0.873,0.58L916.48,257.972zM918.805,257.39l-0.291,0.582l-2.034-2.613l-0.582-1.453h0.871l0.873,2.033L918.805,257.39zM913.863,253.906v0.581l-2.034-1.161l-1.454-1.162l-1.161-0.871l0.579-0.29l1.164,0.871l2.326,1.161L913.863,253.906zM907.468,251.002l-0.581,0.29l-1.162-0.58l-1.163-1.162v-0.581l1.744,1.162L907.468,251.002z",
						"SD" : "M567.37,204.831l-0.582,0.000l0.000,-1.452l-0.292,-0.873l-1.453,-1.160l-0.292,-1.742l0.292,-2.033l-1.162,-0.291l-0.293,0.582l-1.452,0.289l0.582,0.582l0.291,1.742l-1.454,1.451l-1.453,2.033l-1.454,0.291l-2.325,-1.744l-1.163,0.582l0.000,0.871l-1.454,0.581l-0.290,0.582l-2.617,0.000l-0.289,-0.582l-2.035,0.000l-1.164,0.291l-0.581,-0.291l-1.452,-1.452l-0.584,-0.871l-2.033,0.581l-0.581,1.161l-0.872,2.324l-0.874,0.581l-0.872,0.289l-0.290,0.000l-0.871,-0.870l0.000,-0.870l0.289,-1.163l0.000,-1.162l-1.452,-1.742l-0.292,-1.162l0.000,-0.580l-1.162,-0.871l0.000,-1.453l-0.582,-1.161l-0.873,0.290l0.293,-1.161l0.580,-1.162l-0.289,-1.162l0.871,-0.870l-0.582,-0.581l0.872,-1.743l1.164,-2.032l2.324,0.291l0.000,-11.036l0.000,-0.870l3.199,-0.291l0.000,-5.228l11.045,0.000l10.755,0.000l10.755,0.000l0.874,2.615l-0.581,0.580l0.289,2.614l1.163,3.485l1.164,0.580l1.454,0.872l-1.454,1.742l-2.035,0.289l-0.874,0.873l-0.291,2.033l-1.161,4.065l0.290,0.870l-0.581,2.323l-0.872,2.904l-1.743,1.162l-1.163,2.322l-0.292,1.162l-1.454,0.582l-0.579,2.903l0.000,-0.291z",
						"SE" : "M534.813,50.346l-2.617,1.742l0.291,1.742l-4.362,2.324l-5.230,2.323l-2.036,3.774l2.036,2.033l2.615,1.452l-2.615,3.194l-2.907,0.581l-0.873,4.647l-1.744,2.613l-3.197,-0.291l-1.455,2.033l-3.196,0.291l-0.874,-2.614l-2.323,-3.194l-2.327,-3.776l1.455,-1.742l2.033,-1.742l1.162,-3.485l-1.743,-1.162l-0.290,-3.775l1.744,-2.612l2.907,0.000l0.873,-0.872l-1.165,-1.162l4.361,-3.774l2.907,-2.904l1.745,-2.033l2.615,0.000l0.582,-1.452l5.232,0.290l0.582,-1.742l1.744,-0.290l3.486,1.452l4.361,2.033l0.000,4.065l0.872,1.162l4.649,-0.871z",
						"SI" : "M511.848,102.905l2.326,0.291l1.162,-0.582l2.616,0.000l0.291,-0.580l0.582,0.000l0.582,1.162l-2.325,0.580l-0.293,1.162l-0.871,0.290l0.000,0.582l-1.163,0.000l-0.873,-0.291l-0.580,0.291l-1.743,0.000l0.581,-0.291l-0.581,-1.162l-0.289,1.452z",
						"SK" : "M525.802,94.774l0.000,0.291l1.160,-0.582l1.455,1.163l1.453,-0.581l1.455,0.291l2.033,-0.582l2.616,1.163l-0.872,0.870l-0.580,0.872l-0.582,0.290l-2.908,-0.872l-0.870,0.291l-0.582,0.581l-1.455,0.290l-0.289,0.000l-1.163,0.290l-1.163,0.290l-0.291,0.291l-2.324,0.581l-0.871,-0.290l-1.454,-0.872l-0.292,-0.870l0.292,-0.291l0.289,-0.581l1.165,0.000l0.871,-0.290l0.290,-0.291l0.289,-0.289l0.292,-0.581l0.582,0.000l0.580,-0.582l-0.874,0.000z",
						"SL" : "M442.376,212.381l-0.873,-0.291l-2.034,-1.161l-1.455,-1.452l-0.289,-0.871l-0.292,-2.033l1.455,-1.451l0.289,-0.582l0.292,-0.581l0.871,0.000l0.581,-0.580l2.326,0.000l0.582,0.871l0.581,1.163l0.000,0.870l0.582,0.581l0.000,1.161l0.581,-0.290l-1.163,1.451l-1.454,1.452l0.000,0.871l0.580,-0.872z",
						"SN" : "M427.84,193.505l-1.162,-2.032l-1.454,-1.161l1.164,-0.291l1.452,-2.032l0.582,-1.452l0.871,-0.872l1.456,0.291l1.452,-0.581l1.454,0.000l1.163,0.872l2.034,0.580l1.454,2.033l2.034,1.742l0.000,1.742l0.581,1.742l1.162,0.581l0.000,1.162l0.000,0.871l-0.289,0.290l-1.744,-0.290l0.000,0.290l-0.581,0.000l-2.036,-0.581l-1.453,0.000l-4.942,-0.290l-0.871,0.290l-0.874,0.000l-1.453,0.581l-0.291,-2.323l2.327,0.291l0.580,-0.581l0.582,0.000l1.163,-0.581l1.163,0.581l1.162,0.000l1.163,-0.581l-0.582,-0.872l-0.870,0.581l-0.873,0.000l-1.163,-0.581l-0.871,0.000l-0.581,0.581l2.909,0.000z",
						"SO" : "M610.681,199.023l1.452,-0.290l1.162,-0.871l1.165,0.000l0.000,0.871l-0.291,1.451l0.000,1.453l-0.582,1.161l-0.581,2.904l-1.452,2.904l-1.747,3.484l-2.323,4.066l-2.326,3.194l-3.199,3.775l-2.907,2.323l-4.068,2.613l-2.616,2.033l-2.908,3.486l-0.582,1.451l-0.580,0.581l-1.745,-2.323l0.000,-9.873l2.325,-3.196l0.874,-0.870l1.744,0.000l2.324,-2.033l3.780,0.000l7.850,-8.421l1.742,-2.323l1.163,-1.742l0.000,-1.452l0.000,-2.614l0.000,-1.161l0.290,0.000l0.873,0.000l-1.163,0.581z",
						"SOL" : "M608.355,204.831l-1.163,1.742l-1.742,2.323l-2.328,0.000l-9.010,-3.194l-1.163,-0.871l-0.873,-1.452l-1.163,-1.453l0.583,-1.161l1.161,-1.452l0.873,0.580l0.582,1.162l1.163,1.162l1.163,0.000l2.614,-0.580l3.199,-0.582l2.327,-0.580l1.452,-0.291l0.871,-0.580l1.744,0.000l-0.290,0.000l0.000,1.161l0.000,2.614l0.000,-1.452z",
						"SR" : "M316.509,214.415l3.198,0.580l0.290,-0.291l2.326,-0.289l2.907,0.580l-1.453,2.612l0.289,1.743l1.164,1.742l-0.582,1.161l-0.290,1.163l-0.581,1.162l-1.745,-0.581l-1.162,0.289l-1.163,-0.289l-0.291,0.870l0.581,0.581l-0.290,0.581l-1.454,-0.291l-1.744,-2.322l-0.291,-1.744l-0.872,0.000l-1.453,-2.032l0.581,-1.161l0.000,-0.872l1.453,-0.579l-0.582,2.613z",
						"SS" : "M567.37,204.831l0.000,2.322l-0.582,0.872l-1.455,0.000l-0.872,1.452l1.746,0.291l1.452,1.161l0.290,1.161l1.454,0.580l1.455,3.196l-1.745,1.741l-1.743,1.743l-1.745,1.162l-1.744,0.000l-2.326,0.580l-1.744,-0.580l-1.163,0.870l-2.325,-2.032l-0.874,-1.162l-1.450,0.581l-1.166,0.000l-0.873,0.291l-1.161,-0.291l-1.743,-2.323l-0.292,-0.871l-2.034,-0.871l-0.873,-1.743l-1.163,-1.161l-1.743,-1.452l0.000,-0.871l-1.452,-1.162l-2.037,-1.162l0.872,-0.289l0.874,-0.581l0.872,-2.324l0.581,-1.161l2.033,-0.581l0.584,0.871l1.452,1.452l0.581,0.291l1.164,-0.291l2.035,0.000l0.289,0.582l2.617,0.000l0.290,-0.582l1.454,-0.581l0.000,-0.871l1.163,-0.582l2.325,1.744l1.454,-0.291l1.453,-2.033l1.454,-1.451l-0.291,-1.742l-0.582,-0.582l1.452,-0.289l0.293,-0.582l1.162,0.291l-0.292,2.033l0.292,1.742l1.453,1.160l0.292,0.873l0.000,1.452l-0.582,0.000z",
						"SV" : "M232.211,194.086l-0.291,0.581l-1.743,0.000l-0.872,-0.290l-1.164,-0.581l-1.452,0.000l-0.873,-0.581l0.000,-0.580l0.873,-0.581l0.580,-0.291l0.000,-0.290l0.581,-0.291l0.873,0.291l0.582,0.581l0.872,0.581l0.000,0.289l1.161,-0.289l0.582,0.000l0.291,0.289l0.000,-1.162z",
						"SY" : "M580.45,139.204l-5.234,2.903l-3.195,-1.161l0.289,-0.290l0.000,-1.162l0.873,-1.452l1.452,-1.161l-0.581,-1.162l-1.163,0.000l-0.290,-2.033l0.582,-1.161l0.871,-0.582l0.581,-0.580l0.290,-1.742l0.873,0.580l2.907,-0.870l1.454,0.581l2.327,0.000l3.196,-0.872l1.453,0.000l3.197,-0.581l-1.454,1.742l-1.454,0.872l0.292,2.032l-1.163,3.195l6.103,-2.904z",
						"SZ" : "M562.136,304.433l-0.581,1.161l-1.744,0.290l-1.452,-1.451l-0.292,-0.871l0.870,-1.161l0.293,-0.581l0.872,-0.290l1.163,0.580l0.580,1.161l-0.291,-1.162z",
						"TD" : "M513.593,195.538l0.289,-1.161l-1.742,-0.291l0.000,-1.742l-1.165,-0.871l1.165,-3.775l3.486,-2.614l0.292,-3.484l1.164,-5.517l0.581,-1.162l-1.163,-0.871l0.000,-0.871l-1.164,-0.871l-0.581,-4.357l2.616,-1.451l11.046,5.226l11.045,5.227l0.000,11.036l-2.324,-0.291l-1.164,2.032l-0.872,1.743l0.582,0.581l-0.871,0.870l0.289,1.162l-0.580,1.162l-0.293,1.161l0.873,-0.290l0.582,1.161l0.000,1.453l1.162,0.871l0.000,0.580l-1.744,0.581l-1.452,1.161l-2.034,2.905l-2.617,1.452l-2.618,-0.291l-0.871,0.291l0.292,0.870l-1.454,0.872l-1.163,1.161l-3.488,1.162l-0.582,-0.580l-0.579,-0.291l-0.293,0.871l-2.325,0.290l0.290,-0.870l-0.872,-1.743l-0.289,-1.161l-1.165,-0.581l-1.742,-1.743l0.579,-1.161l1.455,0.289l0.581,-0.289l1.453,0.000l-1.453,-2.324l0.292,-2.032l-0.292,-1.743l1.162,1.742z",
						"TF" : "M663.583,364.542l1.746,0.872l2.617,0.581l0.000,0.291l-0.584,1.452l-4.360,0.000l0.000,-1.452l0.292,-1.161l-0.289,0.583z",
						"TG" : "M479,214.123l-2.324,0.581l-0.582,-1.162l-0.872,-1.742l0.000,-1.162l0.581,-2.613l-0.871,-0.872l-0.292,-2.322l0.000,-2.033l-0.871,-1.161l0.000,-0.872l2.616,0.000l-0.582,1.452l0.873,0.871l0.872,0.871l0.291,1.454l0.579,0.289l-0.290,6.388l-0.872,-2.033z",
						"TH" : "M756.022,197.571l-2.325,-1.452l-2.325,0.000l0.290,-2.033l-2.326,0.000l-0.291,2.904l-1.454,4.065l-0.871,2.613l0.290,1.745l1.744,0.289l1.163,2.323l0.291,2.613l1.745,1.452l1.453,0.291l1.454,1.452l-0.873,1.162l-1.744,0.289l-0.290,-1.451l-2.326,-1.163l-0.291,0.582l-1.163,-1.162l-0.582,-1.452l-1.452,-1.452l-1.163,-1.161l-0.582,1.452l-0.581,-1.452l0.292,-1.742l0.871,-2.615l1.452,-2.903l1.454,-2.614l-1.162,-2.322l0.290,-1.452l-0.582,-1.453l-1.741,-2.322l-0.582,-1.162l0.871,-0.580l1.163,-2.323l-1.163,-2.034l-1.744,-1.742l-1.455,-2.613l1.165,-0.290l1.163,-3.194l2.034,0.000l1.743,-1.163l1.454,-0.580l1.163,0.580l0.290,1.744l1.743,0.289l-0.579,2.904l0.000,2.323l2.907,-1.742l0.871,0.581l1.452,0.000l0.582,-0.871l2.036,0.000l2.325,2.323l0.000,2.613l2.327,2.324l-0.291,2.323l-0.872,1.451l-2.326,-0.581l-3.781,0.581l-1.741,2.323l-0.580,-3.485z",
						"TJ" : "M669.108,120.329l-0.873,0.871l-2.906,-0.582l-0.291,1.743l2.908,-0.290l3.488,0.871l5.233,-0.291l0.579,2.324l0.874,-0.291l1.743,0.582l0.000,1.160l0.292,1.742l-2.909,0.000l-1.745,-0.290l-1.744,1.162l-1.162,0.291l-1.161,0.581l-0.873,-0.872l0.000,-2.323l-0.581,0.000l0.291,-0.871l-1.454,-0.871l-1.455,1.161l-0.290,1.161l-0.289,0.291l-1.745,0.000l-0.872,1.162l-0.872,-0.582l-2.036,0.872l-0.871,-0.290l1.744,-2.614l-0.582,-2.032l-2.033,-0.871l0.579,-1.162l2.328,0.290l1.452,-1.743l0.872,-1.741l3.488,-0.582l-0.581,1.163l0.581,0.871l-0.873,0.000z",
						"TL" : "M817.647,255.359l0.580,-0.582l2.327,-0.580l1.744,-0.291l0.871,-0.290l1.164,0.290l-1.164,0.871l-2.905,1.162l-2.037,0.871l-0.290,-0.871l0.290,0.580z",
						"TM" : "M642.364,132.815l-0.289,-2.323l-2.034,0.000l-3.200,-2.324l-2.325,-0.290l-2.907,-1.452l-2.034,-0.290l-1.162,0.581l-1.745,-0.291l-2.036,1.742l-2.323,0.582l-0.582,-2.033l0.289,-2.904l-2.033,-0.871l0.581,-2.033l-1.743,0.000l0.578,-2.323l2.617,0.581l2.326,-0.872l-2.033,-1.742l-0.582,-1.451l-2.328,0.581l-0.289,2.032l-0.871,-1.742l1.160,-0.871l3.199,-0.581l2.034,0.871l1.744,2.033l1.455,0.000l3.199,0.000l-0.583,-1.452l2.325,-0.871l2.325,-1.742l3.778,1.451l0.292,2.324l1.163,0.580l2.907,-0.290l0.871,0.580l1.455,2.904l2.906,1.742l2.034,1.453l2.909,1.162l3.487,1.160l0.000,1.742l-0.871,0.000l-1.164,-0.871l-0.580,1.162l-2.326,0.291l-0.583,2.323l-1.454,0.870l-2.325,0.291l-0.581,1.452l-2.034,0.291l2.617,1.162z",
						"TN" : "M499.931,147.625l-1.163,-4.936l-1.745,-1.162l0.000,-0.581l-2.325,-1.742l-0.290,-2.034l1.745,-1.451l0.579,-2.323l-0.290,-2.614l0.581,-1.451l2.908,-1.163l2.034,0.291l-0.291,1.453l2.325,-0.872l0.292,0.291l-1.454,1.451l0.000,1.161l1.162,0.872l-0.580,2.324l-1.745,1.451l0.582,1.452l1.452,0.000l0.583,1.452l1.163,0.290l-0.291,2.032l-1.164,0.873l-0.872,0.870l-2.034,1.162l0.290,1.161l-0.290,1.162l1.162,-0.581z",
						"TR" : "M575.509,117.135l3.777,1.161l3.199-0.291l2.323,0.291l3.489-1.451l2.906-0.291l2.615,1.452l0.292,0.872l-0.292,1.452l2.036,0.58l1.162,0.872l-1.743,0.871l0.87,2.904l-0.579,0.871l1.452,2.324l-1.452,0.581l-0.873-0.872l-3.197-0.291l-1.164,0.291l-3.196,0.581h-1.453l-3.196,0.872h-2.327l-1.454-0.581l-2.906,0.871l-0.873-0.58l-0.29,1.742l-0.581,0.58l-0.871,0.582l-0.873-1.452l0.873-0.872l-1.455,0.291l-2.325-0.871l-2.033,1.742l-4.07,0.29l-2.326-1.452h-2.906l-0.582,1.162l-2.036,0.29l-2.615-1.452h-2.906l-1.744-2.904l-2.034-1.452l1.455-2.033l-1.747-1.452l2.907-2.613h4.361l1.163-2.033l5.232,0.29l3.197-1.742l3.196-0.871h4.65L575.509,117.135zM548.764,119.167l-2.325,1.451l-0.871-1.451v-0.581l0.581-0.291l0.871-1.742l-1.452-0.581l2.907-0.871l2.324,0.29l0.291,1.162l2.615,0.872l-0.58,0.58l-3.198,0.291L548.764,119.167z",
						"TT" : "M304.01,201.346l1.454,-0.291l0.581,0.000l0.000,2.033l-2.326,0.291l-0.581,-0.291l0.872,-0.582l0.000,1.160z",
						"TW" : "M808.926,163.886l-1.744,4.356l-1.163,2.322l-1.452,-2.322l-0.292,-2.033l1.744,-2.614l2.325,-2.322l1.163,0.871l0.581,-1.742z",
						"TZ" : "M567.077,233.58l0.582,0.289l9.883,5.517l0.291,1.742l3.780,2.615l-1.163,3.484l0.000,1.452l1.744,1.161l0.292,0.581l-0.873,1.743l0.289,0.871l-0.289,1.162l0.873,1.742l1.161,2.903l1.162,0.581l-2.323,1.452l-2.907,1.162l-1.746,0.000l-0.872,0.581l-2.036,0.289l-0.581,0.291l-3.486,-0.872l-2.036,0.292l-0.582,-3.776l-1.163,-1.161l-0.289,-0.871l-2.907,-0.581l-1.456,-0.870l-1.743,-0.291l-1.161,-0.581l-1.162,-0.581l-1.455,-3.485l-1.744,-1.452l-0.290,-1.742l0.290,-1.452l-0.581,-2.324l1.163,-0.289l0.872,-0.870l1.163,-1.454l0.582,-0.580l0.000,-0.872l-0.582,-0.871l0.000,-0.871l0.582,-0.291l0.289,-1.741l-1.163,-1.452l0.874,-0.291l3.196,0.000l-5.522,0.289z",
						"UA" : "M561.265,87.806l1.160,0.000l0.584,-0.582l0.872,0.000l2.907,-0.290l1.744,1.742l-0.873,0.581l0.290,0.871l2.327,0.000l0.871,1.162l0.000,0.581l3.488,0.870l2.034,-0.290l1.745,1.162l1.454,0.000l4.070,0.870l0.290,0.873l-1.163,1.451l0.582,1.452l-0.582,0.871l-2.615,0.291l-1.452,0.871l0.000,1.161l-2.329,0.292l-1.744,0.869l-2.615,0.000l-2.323,1.162l0.289,1.743l1.161,0.581l2.907,-0.290l-0.580,1.161l-2.906,0.290l-3.781,1.742l-1.452,-0.581l0.582,-1.451l-3.198,-0.581l0.579,-0.580l2.619,-0.872l-0.874,-0.581l-4.068,-0.871l-0.292,-0.872l-2.614,0.291l-0.874,1.452l-2.325,2.033l-1.161,-0.580l-1.166,0.580l-1.452,-0.580l0.872,-0.291l0.291,-0.872l0.872,-0.871l-0.291,-0.580l0.581,-0.291l0.293,0.581l1.743,0.000l0.581,-0.290l-0.290,-0.291l0.000,-0.291l-0.873,-0.580l-0.290,-1.162l-1.164,-0.580l0.293,-0.871l-1.166,-0.872l-1.162,0.000l-2.034,-0.870l-2.033,0.290l-0.584,0.290l-1.163,0.000l-0.579,0.580l-2.036,0.291l-1.162,0.581l-1.163,-0.581l-1.745,0.000l-1.744,-0.581l-1.163,0.581l-0.291,-0.581l-1.452,-0.870l0.580,-0.872l0.872,-0.870l0.582,0.289l-0.872,-1.452l2.617,-2.033l1.452,-0.580l0.292,-0.580l-1.455,-2.614l1.163,0.000l1.746,-0.581l2.035,-0.291l2.615,0.291l3.196,0.581l2.036,0.290l1.163,0.291l1.162,-0.581l0.583,0.581l2.615,0.000l0.873,0.289l0.290,-1.451l0.870,-0.580l-2.328,0.000z",
						"UG" : "M561.555,233.869l-3.196,0.000l-0.874,0.291l-1.743,0.871l-0.582,-0.290l0.000,-2.324l0.582,-0.871l0.291,-2.324l0.581,-1.161l1.163,-1.451l0.871,-0.872l0.873,-0.871l-1.162,-0.289l0.289,-3.196l1.163,-0.870l1.744,0.580l2.326,-0.580l1.744,0.000l1.745,-1.162l1.452,1.742l0.291,1.452l1.163,3.194l-1.163,2.033l-1.164,1.742l-0.872,1.161l0.000,2.906l5.522,-0.289z",
						"US" : "M45.593,178.406l-0.292,0.581l-0.873-0.581l0.292-0.581l-0.582-1.162l0.29-0.291l0.292-0.29l-0.292-0.582l0.292-0.29h0.291l0.872,0.581l0.582,0.291l0.581,0.29l0.582,0.872v0.29l-1.162,0.581L45.593,178.406zM44.14,174.05l-0.872,0.29l-0.582-0.581l-0.292-0.29l0.292-0.291l0.872,0.291l0.872,0.29L44.14,174.05zM42.395,172.598l-0.29,0.291h-1.453l0.29-0.291H42.395zM39.779,172.308v0.29l-0.291-0.29h-0.873l-0.582-0.582l0.873-0.581v0.291L39.779,172.308zM35.128,170.564l-0.291,0.292l-0.872-0.582v-0.291l0.581-0.29l0.582,0.29V170.564zM212.735,95.065l0.582,1.452l0.871,0.581l1.744,0.291l2.907,0.291l2.616,0.871l2.325-0.291l3.488,0.581h0.872l2.326-0.87l2.617,1.161l2.616,1.162l2.326,0.872l2.035,0.871l0.291,0.58l0.582,0.291v0.291h0.58l0.583-0.291l0.29,0.871l0.583,0.291h0.581l0.581,0.29l-0.581,0.581l2.906,1.162l0.583,2.613l0.58,2.323l-0.872,1.742l-1.163,1.451l-0.581,0.873v0.29l0.292,0.581l0.872,0.29h0.581l3.197-1.452l2.907-0.29l3.488-1.453l0.291-0.291l-0.291-0.871l-0.582-0.581l1.454-0.291h2.616h2.616l0.872-1.162l0.291-0.29l2.907-1.743l1.163-0.581h4.07h5.232l0.292-0.871h0.872l1.162-0.58l0.872-1.162l0.873-2.033l2.035-2.032l0.872,0.581l2.035-0.581l1.163,0.87v3.775l1.744,1.452l0.582,1.161l-2.907,1.162l-2.907,0.872l-2.907,0.872l-1.453,1.742l-0.582,0.581v1.453l0.872,1.451h1.163l-0.291-0.871l0.872,0.581l-0.291,0.871l-1.744,0.291h-1.162l-2.036,0.581h-1.452l-1.454,0.291l-2.326,0.58l4.07-0.291l0.872,0.291l-4.07,0.872H270l0.291-0.29l-0.872,0.872h0.872l-0.582,2.032l-2.035,2.033l-0.291-0.58l-0.582-0.291l-0.872-0.581l0.582,1.452l0.582,0.58v0.873l-0.873,1.161l-1.453,2.033h-0.291l0.873-1.742l-1.454-1.162l-0.291-2.322l-0.58,1.16l0.58,1.743l-1.744-0.291l1.744,0.871l0.291,2.614l0.873,0.291l0.291,0.871l0.291,2.613l-1.745,2.033l-2.907,0.871l-1.743,1.742H257.5l-1.452,1.162l-0.291,0.87l-2.907,1.744l-1.744,1.451l-1.163,1.452l-0.582,2.033l0.582,1.742l0.873,2.614l1.163,1.742v1.161l1.453,3.195v2.032l-0.29,0.871l-0.582,1.742l-0.873,0.291l-1.453-0.291l-0.291-1.161l-1.163-0.582l-1.454-2.323l-1.162-2.032l-0.583-1.161l0.583-1.743l-0.583-1.742l-2.325-2.323l-0.873-0.291l-2.906,1.162h-0.581l-1.163-1.451l-1.744-0.581l-3.197,0.29l-2.326-0.29l-2.326,0.29l-0.872,0.291l0.292,0.87v1.162l0.581,0.582l-0.581,0.29l-0.872-0.581l-1.164,0.581h-2.034l-2.035-1.452l-2.325,0.291l-2.035-0.581l-1.745,0.29l-2.325,0.581l-2.325,2.033l-2.908,1.162l-1.452,1.162l-0.582,1.451v1.742v1.452l0.582,0.871h-1.163l-1.744-0.58l-2.326-0.872l-0.581-1.162l-0.582-2.033l-1.744-1.452l-0.873-1.742l-1.453-1.742l-2.034-1.162h-2.036l-1.743,2.323l-2.326-0.871l-1.454-0.871l-0.872-1.453l-0.872-1.451l-1.454-1.162l-1.454-0.871l-1.163-1.162h-4.65v1.162h-2.326h-5.232l-6.395-1.742l-4.07-1.451l0.29-0.582l-3.487,0.291l-3.198,0.291l-0.581-1.453l-1.744-1.451l-1.163-0.582l-0.291-0.58l-1.743-0.291l-0.872-0.581l-2.616-0.29l-0.582-0.582l-0.291-1.452l-2.908-2.904l-2.034-3.775v-0.582l-1.163-0.871l-2.326-2.323l-0.291-2.322l-1.454-1.453l0.582-2.322v-2.324l-0.872-2.032l0.872-2.614l0.582-2.613l0.291-2.323l-0.581-3.775l-0.873-2.323l-0.872-1.162l0.291-0.58l4.069,0.87l1.454,2.613l0.581-0.87l-0.291-2.033l-0.872-2.324h7.849h8.139h2.616h8.43h8.14h8.138h8.43h9.302h9.302h5.813v-1.161H212.735zM52.569,73.867l-2.616,1.162l-1.454-0.871l-0.581-1.162l2.616-1.162l1.454-0.29l1.744,0.29l1.163,0.871L52.569,73.867zM17.978,66.316l-1.744,0.291l-1.745-0.581l-1.744-0.582l2.907-0.581l2.035,0.291L17.978,66.316zM1.118,55.572l1.744,0.582l1.744-0.291l2.035,0.581l2.907,0.581l-0.291,0.29l-2.035,0.581l-2.326-0.87l-0.872-0.291H1.409l-0.582-0.29L1.118,55.572zM47.046,35.246l1.744,1.161l1.453-0.291h4.651l-0.291,0.582l4.36,0.58l2.617-0.29l5.813,0.871l5.232,0.29l2.326,0.291l3.488-0.291l4.36,0.581l2.907,0.581v10.164v15.681h2.616l2.616,0.872l2.035,1.162L95.3,68.93l2.906-1.452l2.616-0.871l1.454,1.451l1.744,1.162l2.616,1.162l1.744,2.033l2.908,2.903l4.65,1.742v1.743l-1.454,1.452l-1.454-1.162l-2.615-0.871l-0.583-2.323l-3.778-2.323l-1.454-2.324l-2.616-0.291h-4.361l-3.197-0.871l-5.814-2.903l-2.616-0.581l-4.651-0.872l-3.778,0.291l-5.523-1.453l-3.198-1.161l-3.197,0.581l0.581,2.033l-1.454,0.29l-3.196,0.58l-2.326,0.873l-3.198,0.581l-0.291-1.742l1.163-2.614l2.907-0.871l-0.582-0.581l-3.488,1.452l-2.035,1.742l-4.07,2.033l2.035,1.161l-2.617,2.033l-2.907,1.162l-2.616,0.871l-0.872,1.162l-4.07,1.451l-0.872,1.452l-3.198,1.162l-2.035-0.29l-2.615,0.871l-2.617,0.87l-2.326,0.872l-4.65,0.871l-0.581-0.582l2.907-1.162l2.906-0.87l2.907-1.453l3.489-0.291l1.163-1.161l3.779-1.742l0.582-0.581l2.035-0.873l0.58-2.033l1.455-1.742l-3.198,0.872l-0.872-0.582L36,70.382l-1.745-1.453l-0.872,0.872l-1.162-1.162l-2.617,0.871h-1.743l-0.292-1.453l0.581-1.162l-1.744-0.87l-3.487,0.581l-2.326-1.452l-2.035-0.581v-1.452l-2.035-1.162l1.163-1.742l2.035-1.452l1.163-1.452l2.035-0.29l2.034,0.58l2.036-1.451l2.035,0.29l2.326-0.872l-0.583-1.161l-1.743-0.582l2.034-1.162h-1.453l-2.906,0.871l-0.873,0.581l-2.325-0.581l-3.779,0.291l-4.07-0.871l-1.163-0.871l-3.487-1.742l3.778-1.162l6.105-1.451h2.325l-0.29,1.451h5.814l-2.327-1.742l-3.197-1.162l-2.034-1.162l-2.616-1.161l-3.779-0.871l1.455-1.452l4.941-0.291l3.488-1.162l0.582-1.453l2.906-1.161l2.617-0.291L36,36.116h2.616l4.07-1.452L47.046,35.246z",
						"UY" : "M315.056,314.017l1.744,-0.292l2.907,2.033l0.872,0.000l2.907,1.743l2.325,1.451l1.454,2.032l-1.163,1.164l0.872,1.740l-1.453,1.742l-2.907,1.453l-2.035,-0.582l-1.454,0.291l-2.616,-1.162l-2.035,0.000l-1.453,-1.452l0.000,-1.741l0.872,-0.580l-0.291,-2.905l0.872,-2.614l-0.582,2.321z",
						"UZ" : "M656.899,128.168l0.000,-1.742l-3.487,-1.160l-2.909,-1.162l-2.034,-1.453l-2.906,-1.742l-1.455,-2.904l-0.871,-0.580l-2.907,0.290l-1.163,-0.580l-0.292,-2.324l-3.778,-1.451l-2.325,1.742l-2.325,0.871l0.583,1.452l-3.199,0.000l0.000,-10.164l6.976,-1.742l0.580,0.291l4.071,2.031l2.324,0.872l2.618,2.614l3.196,-0.291l4.944,-0.290l3.196,2.032l-0.290,2.614l1.453,0.000l0.581,2.323l3.489,0.000l0.580,1.452l1.163,0.000l1.163,-2.032l3.779,-2.033l1.454,-0.291l0.872,0.291l-2.326,1.742l2.035,0.871l2.034,-0.580l3.199,1.451l-3.488,2.032l-2.326,-0.289l-0.873,0.000l-0.581,-0.871l0.581,-1.163l-3.488,0.582l-0.872,1.741l-1.452,1.743l-2.328,-0.290l-0.579,1.162l2.033,0.871l0.582,2.032l-1.744,2.614l-2.035,-0.582l1.453,0.000z",
						"VE" : "M277.558,198.442l-0.290,0.871l-1.454,0.291l0.872,1.161l0.000,1.452l-1.454,1.451l1.164,2.324l1.162,-0.290l0.582,-1.743l-0.872,-1.161l0.000,-2.033l3.487,-1.161l-0.582,-1.162l1.163,-0.871l0.872,1.742l2.035,0.291l1.744,1.451l0.000,0.871l2.617,0.000l2.907,-0.289l1.452,1.161l2.326,0.290l1.455,-0.582l0.000,-0.869l3.487,0.000l3.198,-0.291l-2.326,0.871l0.872,1.451l2.326,0.000l2.034,1.454l0.291,2.323l1.453,-0.292l1.164,0.872l-2.036,1.452l-0.290,1.161l0.872,0.871l-0.582,0.581l-1.743,0.580l0.000,1.163l-0.873,0.582l2.035,2.322l0.291,0.580l-0.872,1.162l-3.198,0.871l-2.035,0.580l-0.581,0.582l-2.326,-0.582l-2.034,-0.290l-0.582,0.000l1.163,0.872l0.000,1.741l0.292,1.744l2.324,0.289l0.291,0.581l-2.035,0.871l-0.291,1.162l-1.162,0.291l-2.036,0.870l-0.580,0.582l-2.036,0.289l-1.452,-1.451l-0.872,-2.614l-0.873,-1.162l-0.872,-0.580l1.454,-1.453l-0.291,-0.580l-0.582,-0.580l-0.581,-2.033l0.000,-2.033l0.872,-0.871l0.291,-1.452l-0.872,-0.290l-1.454,0.290l-2.034,-0.290l-1.163,0.290l-2.035,-2.323l-1.453,-0.291l-3.488,0.291l-0.872,-1.162l-0.583,0.000l0.000,-0.581l0.292,-1.161l-0.292,-1.161l-0.580,-0.582l-0.291,-1.161l-1.453,-0.290l0.581,-1.452l0.582,-2.033l0.581,-1.162l1.163,-0.580l0.581,-1.452l-2.035,0.581z",
						"VN" : "M771.137,171.726l-3.488,2.324l-2.326,2.614l-0.581,1.742l2.034,2.904l2.617,3.774l2.325,1.743l1.744,2.033l1.163,5.226l-0.290,4.647l-2.327,2.032l-3.195,1.741l-2.037,2.325l-3.486,2.322l-1.164,-1.740l0.872,-1.745l-2.034,-1.451l2.326,-1.162l2.906,-0.290l-1.162,-1.742l4.651,-2.033l0.289,-3.194l-0.581,-2.033l0.581,-2.614l-0.870,-2.032l-2.036,-1.742l-1.745,-2.614l-2.325,-3.194l-3.197,-1.742l0.870,-0.872l1.747,-0.580l-1.165,-2.614l-3.488,0.000l-1.161,-2.322l-1.454,-2.324l1.454,-0.580l2.034,0.000l2.615,-0.291l2.329,-1.451l1.452,0.870l2.615,0.581l-0.581,1.742l1.454,0.872l-2.615,-0.870z",
						"VU" : "M935.666,276.266l-0.872,0.291l-0.874-1.163v-0.871L935.666,276.266zM933.628,271.91l0.583,2.324l-0.874-0.292h-0.58l-0.29-0.58v-2.322L933.628,271.91z",
						"WS" : "M449.643,156.336l-0.292,-1.452l0.581,0.000l0.000,0.290l0.000,0.291l0.000,4.355l-9.011,-0.290l0.000,7.261l-2.615,0.000l-0.581,1.451l0.581,4.066l-11.046,0.000l-0.582,0.871l0.289,-1.162l6.107,-0.291l0.290,-0.870l1.162,-1.162l0.874,-3.775l4.069,-3.194l1.162,-3.485l0.872,0.000l0.873,-2.323l2.324,-0.291l1.165,0.581l1.161,0.000l0.872,-0.871l-1.745,0.000z",
						"YE" : "M619.983,185.084l-2.034,0.872l-0.583,1.161l0.000,0.872l-2.616,1.160l-4.651,1.453l-2.326,1.742l-1.162,0.291l-0.871,-0.291l-1.744,1.161l-1.745,0.581l-2.327,0.291l-0.580,0.000l-0.581,0.871l-0.582,0.000l-0.581,0.871l-1.455,-0.290l-0.870,0.580l-1.745,-0.290l-0.873,-1.452l0.292,-1.452l-0.581,-0.871l-0.581,-2.032l-0.874,-1.163l0.583,-0.289l-0.291,-1.162l0.582,-0.581l-0.291,-1.161l1.161,-0.872l-0.289,-1.161l0.873,-1.451l1.161,0.869l0.582,-0.289l3.197,0.000l0.582,0.289l2.615,0.292l1.164,-0.292l0.580,0.873l1.163,-0.291l2.036,-2.904l2.615,-1.161l7.849,-1.162l2.325,4.645l-0.873,-1.743z",
						"ZA" : "M560.392,311.403l-0.29,0.291l-1.165,1.451l-0.87,1.451l-1.453,2.034l-3.198,2.902l-2.034,1.451l-2.036,1.453l-2.906,0.871l-1.452,0.29l-0.293,0.58l-1.743-0.29l-1.161,0.581l-3.199-0.581l-1.452,0.29h-1.164l-2.906,0.872l-2.325,0.58l-1.744,0.871l-1.162,0.29l-1.163-1.161h-0.871l-1.454-1.161v0.292l-0.29-0.583v-1.741l-0.873-1.742l0.873-0.581v-2.032l-2.034-2.613l-1.165-2.323l-2.034-3.484l1.163-1.453l1.163,0.58l0.582,1.162l1.162,0.29l1.744,0.581l1.452-0.29l2.325-1.451v-10.163l0.874,0.58l1.741,2.613l-0.289,1.741l0.582,0.872l2.033-0.29l1.164-1.162l1.452-0.87l0.582-1.453l1.454-0.58l1.162,0.29l1.162,0.872h2.326l1.744-0.582l0.289-0.87l0.584-1.161l1.452-0.293l0.874-1.16l0.871-1.742l2.324-2.032l4.07-2.033h1.163l1.163,0.581l0.871-0.289l1.454,0.289l1.452,3.774l0.582,2.033l-0.29,2.903v1.162l-1.163-0.58l-0.872,0.29l-0.293,0.581l-0.87,1.161l0.292,0.871l1.452,1.451l1.744-0.29l0.581-1.161h2.034l-0.582,2.031l-0.579,2.323l-0.584,1.162L560.392,311.403zM553.416,310.531l-1.162-0.87l-1.163,0.579l-1.453,1.163l-1.454,1.742l2.036,2.032l0.871-0.291l0.581-0.869l1.454-0.292l0.58-0.871l0.873-1.451L553.416,310.531z",
						"ZM" : "M563.881,256.229l1.452,1.452l0.582,2.322l-0.582,0.582l-0.290,2.322l0.290,2.323l-0.872,0.873l-0.580,2.612l1.452,0.580l-8.429,2.325l0.292,2.033l-2.036,0.289l-1.744,1.162l-0.291,0.871l-0.872,0.291l-2.616,2.322l-1.454,1.744l-0.872,0.000l-0.872,-0.291l-3.197,-0.291l-0.291,-0.291l-0.290,-0.289l-0.871,-0.582l-1.745,0.000l-2.326,0.582l-1.745,-1.744l-2.034,-2.322l0.289,-8.711l5.524,0.000l0.000,-0.873l0.292,-1.161l-0.583,-1.161l0.291,-1.452l-0.291,-0.871l1.164,0.290l0.000,0.872l1.454,-0.291l1.743,0.291l0.871,1.452l2.036,0.291l1.745,-0.873l0.581,1.452l2.325,0.291l0.872,1.162l1.163,1.451l2.033,0.000l-0.289,-2.904l-0.581,0.581l-2.035,-1.160l-0.584,-0.291l0.293,-2.904l0.580,-3.195l-0.873,-1.161l0.873,-1.742l0.873,-0.290l3.490,-0.581l1.163,0.290l1.162,0.581l1.161,0.581l1.743,0.291l-1.456,-0.870z",
						"ZW" : "M559.521,292.237l-1.454,-0.289l-0.871,0.289l-1.163,-0.581l-1.163,0.000l-1.745,-1.162l-2.326,-0.579l-0.580,-1.744l0.000,-0.870l-1.455,-0.292l-2.907,-2.903l-0.870,-1.742l-0.582,-0.580l-1.163,-2.034l3.197,0.291l0.872,0.291l0.872,0.000l1.454,-1.744l2.616,-2.322l0.872,-0.291l0.291,-0.871l1.744,-1.162l2.036,-0.289l0.000,0.870l2.325,0.000l1.452,0.581l0.582,0.582l1.163,0.289l1.452,0.871l0.000,3.486l-0.582,2.032l0.000,2.033l0.293,0.870l-0.293,1.452l-0.289,0.290l-0.874,2.033l2.904,-3.195z"
	
					}
				}
			}
		}
	);
})(jQuery);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ },

/***/ "./node_modules/jquery-flot/jquery.flot.js":
/***/ function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {/* Javascript plotting library for jQuery, version 0.8.3.

Copyright (c) 2007-2014 IOLA and Ole Laursen.
Licensed under the MIT license.

*/

// first an inline dependency, jquery.colorhelpers.js, we inline it here
// for convenience

/* Plugin for jQuery for working with colors.
 *
 * Version 1.1.
 *
 * Inspiration from jQuery color animation plugin by John Resig.
 *
 * Released under the MIT license by Ole Laursen, October 2009.
 *
 * Examples:
 *
 *   $.color.parse("#fff").scale('rgb', 0.25).add('a', -0.5).toString()
 *   var c = $.color.extract($("#mydiv"), 'background-color');
 *   console.log(c.r, c.g, c.b, c.a);
 *   $.color.make(100, 50, 25, 0.4).toString() // returns "rgba(100,50,25,0.4)"
 *
 * Note that .scale() and .add() return the same modified object
 * instead of making a new one.
 *
 * V. 1.1: Fix error handling so e.g. parsing an empty string does
 * produce a color rather than just crashing.
 */
(function($){$.color={};$.color.make=function(r,g,b,a){var o={};o.r=r||0;o.g=g||0;o.b=b||0;o.a=a!=null?a:1;o.add=function(c,d){for(var i=0;i<c.length;++i)o[c.charAt(i)]+=d;return o.normalize()};o.scale=function(c,f){for(var i=0;i<c.length;++i)o[c.charAt(i)]*=f;return o.normalize()};o.toString=function(){if(o.a>=1){return"rgb("+[o.r,o.g,o.b].join(",")+")"}else{return"rgba("+[o.r,o.g,o.b,o.a].join(",")+")"}};o.normalize=function(){function clamp(min,value,max){return value<min?min:value>max?max:value}o.r=clamp(0,parseInt(o.r),255);o.g=clamp(0,parseInt(o.g),255);o.b=clamp(0,parseInt(o.b),255);o.a=clamp(0,o.a,1);return o};o.clone=function(){return $.color.make(o.r,o.b,o.g,o.a)};return o.normalize()};$.color.extract=function(elem,css){var c;do{c=elem.css(css).toLowerCase();if(c!=""&&c!="transparent")break;elem=elem.parent()}while(elem.length&&!$.nodeName(elem.get(0),"body"));if(c=="rgba(0, 0, 0, 0)")c="transparent";return $.color.parse(c)};$.color.parse=function(str){var res,m=$.color.make;if(res=/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10));if(res=/rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]+(?:\.[0-9]+)?)\s*\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10),parseFloat(res[4]));if(res=/rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55);if(res=/rgba\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\s*\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55,parseFloat(res[4]));if(res=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(str))return m(parseInt(res[1],16),parseInt(res[2],16),parseInt(res[3],16));if(res=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(str))return m(parseInt(res[1]+res[1],16),parseInt(res[2]+res[2],16),parseInt(res[3]+res[3],16));var name=$.trim(str).toLowerCase();if(name=="transparent")return m(255,255,255,0);else{res=lookupColors[name]||[0,0,0];return m(res[0],res[1],res[2])}};var lookupColors={aqua:[0,255,255],azure:[240,255,255],beige:[245,245,220],black:[0,0,0],blue:[0,0,255],brown:[165,42,42],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgrey:[169,169,169],darkgreen:[0,100,0],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkviolet:[148,0,211],fuchsia:[255,0,255],gold:[255,215,0],green:[0,128,0],indigo:[75,0,130],khaki:[240,230,140],lightblue:[173,216,230],lightcyan:[224,255,255],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightyellow:[255,255,224],lime:[0,255,0],magenta:[255,0,255],maroon:[128,0,0],navy:[0,0,128],olive:[128,128,0],orange:[255,165,0],pink:[255,192,203],purple:[128,0,128],violet:[128,0,128],red:[255,0,0],silver:[192,192,192],white:[255,255,255],yellow:[255,255,0]}})(jQuery);

// the actual Flot code
(function($) {

	// Cache the prototype hasOwnProperty for faster access

	var hasOwnProperty = Object.prototype.hasOwnProperty;

    // A shim to provide 'detach' to jQuery versions prior to 1.4.  Using a DOM
    // operation produces the same effect as detach, i.e. removing the element
    // without touching its jQuery data.

    // Do not merge this into Flot 0.9, since it requires jQuery 1.4.4+.

    if (!$.fn.detach) {
        $.fn.detach = function() {
            return this.each(function() {
                if (this.parentNode) {
                    this.parentNode.removeChild( this );
                }
            });
        };
    }

	///////////////////////////////////////////////////////////////////////////
	// The Canvas object is a wrapper around an HTML5 <canvas> tag.
	//
	// @constructor
	// @param {string} cls List of classes to apply to the canvas.
	// @param {element} container Element onto which to append the canvas.
	//
	// Requiring a container is a little iffy, but unfortunately canvas
	// operations don't work unless the canvas is attached to the DOM.

	function Canvas(cls, container) {

		var element = container.children("." + cls)[0];

		if (element == null) {

			element = document.createElement("canvas");
			element.className = cls;

			$(element).css({ direction: "ltr", position: "absolute", left: 0, top: 0 })
				.appendTo(container);

			// If HTML5 Canvas isn't available, fall back to [Ex|Flash]canvas

			if (!element.getContext) {
				if (window.G_vmlCanvasManager) {
					element = window.G_vmlCanvasManager.initElement(element);
				} else {
					throw new Error("Canvas is not available. If you're using IE with a fall-back such as Excanvas, then there's either a mistake in your conditional include, or the page has no DOCTYPE and is rendering in Quirks Mode.");
				}
			}
		}

		this.element = element;

		var context = this.context = element.getContext("2d");

		// Determine the screen's ratio of physical to device-independent
		// pixels.  This is the ratio between the canvas width that the browser
		// advertises and the number of pixels actually present in that space.

		// The iPhone 4, for example, has a device-independent width of 320px,
		// but its screen is actually 640px wide.  It therefore has a pixel
		// ratio of 2, while most normal devices have a ratio of 1.

		var devicePixelRatio = window.devicePixelRatio || 1,
			backingStoreRatio =
				context.webkitBackingStorePixelRatio ||
				context.mozBackingStorePixelRatio ||
				context.msBackingStorePixelRatio ||
				context.oBackingStorePixelRatio ||
				context.backingStorePixelRatio || 1;

		this.pixelRatio = devicePixelRatio / backingStoreRatio;

		// Size the canvas to match the internal dimensions of its container

		this.resize(container.width(), container.height());

		// Collection of HTML div layers for text overlaid onto the canvas

		this.textContainer = null;
		this.text = {};

		// Cache of text fragments and metrics, so we can avoid expensively
		// re-calculating them when the plot is re-rendered in a loop.

		this._textCache = {};
	}

	// Resizes the canvas to the given dimensions.
	//
	// @param {number} width New width of the canvas, in pixels.
	// @param {number} width New height of the canvas, in pixels.

	Canvas.prototype.resize = function(width, height) {

		if (width <= 0 || height <= 0) {
			throw new Error("Invalid dimensions for plot, width = " + width + ", height = " + height);
		}

		var element = this.element,
			context = this.context,
			pixelRatio = this.pixelRatio;

		// Resize the canvas, increasing its density based on the display's
		// pixel ratio; basically giving it more pixels without increasing the
		// size of its element, to take advantage of the fact that retina
		// displays have that many more pixels in the same advertised space.

		// Resizing should reset the state (excanvas seems to be buggy though)

		if (this.width != width) {
			element.width = width * pixelRatio;
			element.style.width = width + "px";
			this.width = width;
		}

		if (this.height != height) {
			element.height = height * pixelRatio;
			element.style.height = height + "px";
			this.height = height;
		}

		// Save the context, so we can reset in case we get replotted.  The
		// restore ensure that we're really back at the initial state, and
		// should be safe even if we haven't saved the initial state yet.

		context.restore();
		context.save();

		// Scale the coordinate space to match the display density; so even though we
		// may have twice as many pixels, we still want lines and other drawing to
		// appear at the same size; the extra pixels will just make them crisper.

		context.scale(pixelRatio, pixelRatio);
	};

	// Clears the entire canvas area, not including any overlaid HTML text

	Canvas.prototype.clear = function() {
		this.context.clearRect(0, 0, this.width, this.height);
	};

	// Finishes rendering the canvas, including managing the text overlay.

	Canvas.prototype.render = function() {

		var cache = this._textCache;

		// For each text layer, add elements marked as active that haven't
		// already been rendered, and remove those that are no longer active.

		for (var layerKey in cache) {
			if (hasOwnProperty.call(cache, layerKey)) {

				var layer = this.getTextLayer(layerKey),
					layerCache = cache[layerKey];

				layer.hide();

				for (var styleKey in layerCache) {
					if (hasOwnProperty.call(layerCache, styleKey)) {
						var styleCache = layerCache[styleKey];
						for (var key in styleCache) {
							if (hasOwnProperty.call(styleCache, key)) {

								var positions = styleCache[key].positions;

								for (var i = 0, position; position = positions[i]; i++) {
									if (position.active) {
										if (!position.rendered) {
											layer.append(position.element);
											position.rendered = true;
										}
									} else {
										positions.splice(i--, 1);
										if (position.rendered) {
											position.element.detach();
										}
									}
								}

								if (positions.length == 0) {
									delete styleCache[key];
								}
							}
						}
					}
				}

				layer.show();
			}
		}
	};

	// Creates (if necessary) and returns the text overlay container.
	//
	// @param {string} classes String of space-separated CSS classes used to
	//     uniquely identify the text layer.
	// @return {object} The jQuery-wrapped text-layer div.

	Canvas.prototype.getTextLayer = function(classes) {

		var layer = this.text[classes];

		// Create the text layer if it doesn't exist

		if (layer == null) {

			// Create the text layer container, if it doesn't exist

			if (this.textContainer == null) {
				this.textContainer = $("<div class='flot-text'></div>")
					.css({
						position: "absolute",
						top: 0,
						left: 0,
						bottom: 0,
						right: 0,
						'font-size': "smaller",
						color: "#545454"
					})
					.insertAfter(this.element);
			}

			layer = this.text[classes] = $("<div></div>")
				.addClass(classes)
				.css({
					position: "absolute",
					top: 0,
					left: 0,
					bottom: 0,
					right: 0
				})
				.appendTo(this.textContainer);
		}

		return layer;
	};

	// Creates (if necessary) and returns a text info object.
	//
	// The object looks like this:
	//
	// {
	//     width: Width of the text's wrapper div.
	//     height: Height of the text's wrapper div.
	//     element: The jQuery-wrapped HTML div containing the text.
	//     positions: Array of positions at which this text is drawn.
	// }
	//
	// The positions array contains objects that look like this:
	//
	// {
	//     active: Flag indicating whether the text should be visible.
	//     rendered: Flag indicating whether the text is currently visible.
	//     element: The jQuery-wrapped HTML div containing the text.
	//     x: X coordinate at which to draw the text.
	//     y: Y coordinate at which to draw the text.
	// }
	//
	// Each position after the first receives a clone of the original element.
	//
	// The idea is that that the width, height, and general 'identity' of the
	// text is constant no matter where it is placed; the placements are a
	// secondary property.
	//
	// Canvas maintains a cache of recently-used text info objects; getTextInfo
	// either returns the cached element or creates a new entry.
	//
	// @param {string} layer A string of space-separated CSS classes uniquely
	//     identifying the layer containing this text.
	// @param {string} text Text string to retrieve info for.
	// @param {(string|object)=} font Either a string of space-separated CSS
	//     classes or a font-spec object, defining the text's font and style.
	// @param {number=} angle Angle at which to rotate the text, in degrees.
	//     Angle is currently unused, it will be implemented in the future.
	// @param {number=} width Maximum width of the text before it wraps.
	// @return {object} a text info object.

	Canvas.prototype.getTextInfo = function(layer, text, font, angle, width) {

		var textStyle, layerCache, styleCache, info;

		// Cast the value to a string, in case we were given a number or such

		text = "" + text;

		// If the font is a font-spec object, generate a CSS font definition

		if (typeof font === "object") {
			textStyle = font.style + " " + font.variant + " " + font.weight + " " + font.size + "px/" + font.lineHeight + "px " + font.family;
		} else {
			textStyle = font;
		}

		// Retrieve (or create) the cache for the text's layer and styles

		layerCache = this._textCache[layer];

		if (layerCache == null) {
			layerCache = this._textCache[layer] = {};
		}

		styleCache = layerCache[textStyle];

		if (styleCache == null) {
			styleCache = layerCache[textStyle] = {};
		}

		info = styleCache[text];

		// If we can't find a matching element in our cache, create a new one

		if (info == null) {

			var element = $("<div></div>").html(text)
				.css({
					position: "absolute",
					'max-width': width,
					top: -9999
				})
				.appendTo(this.getTextLayer(layer));

			if (typeof font === "object") {
				element.css({
					font: textStyle,
					color: font.color
				});
			} else if (typeof font === "string") {
				element.addClass(font);
			}

			info = styleCache[text] = {
				width: element.outerWidth(true),
				height: element.outerHeight(true),
				element: element,
				positions: []
			};

			element.detach();
		}

		return info;
	};

	// Adds a text string to the canvas text overlay.
	//
	// The text isn't drawn immediately; it is marked as rendering, which will
	// result in its addition to the canvas on the next render pass.
	//
	// @param {string} layer A string of space-separated CSS classes uniquely
	//     identifying the layer containing this text.
	// @param {number} x X coordinate at which to draw the text.
	// @param {number} y Y coordinate at which to draw the text.
	// @param {string} text Text string to draw.
	// @param {(string|object)=} font Either a string of space-separated CSS
	//     classes or a font-spec object, defining the text's font and style.
	// @param {number=} angle Angle at which to rotate the text, in degrees.
	//     Angle is currently unused, it will be implemented in the future.
	// @param {number=} width Maximum width of the text before it wraps.
	// @param {string=} halign Horizontal alignment of the text; either "left",
	//     "center" or "right".
	// @param {string=} valign Vertical alignment of the text; either "top",
	//     "middle" or "bottom".

	Canvas.prototype.addText = function(layer, x, y, text, font, angle, width, halign, valign) {

		var info = this.getTextInfo(layer, text, font, angle, width),
			positions = info.positions;

		// Tweak the div's position to match the text's alignment

		if (halign == "center") {
			x -= info.width / 2;
		} else if (halign == "right") {
			x -= info.width;
		}

		if (valign == "middle") {
			y -= info.height / 2;
		} else if (valign == "bottom") {
			y -= info.height;
		}

		// Determine whether this text already exists at this position.
		// If so, mark it for inclusion in the next render pass.

		for (var i = 0, position; position = positions[i]; i++) {
			if (position.x == x && position.y == y) {
				position.active = true;
				return;
			}
		}

		// If the text doesn't exist at this position, create a new entry

		// For the very first position we'll re-use the original element,
		// while for subsequent ones we'll clone it.

		position = {
			active: true,
			rendered: false,
			element: positions.length ? info.element.clone() : info.element,
			x: x,
			y: y
		};

		positions.push(position);

		// Move the element to its final position within the container

		position.element.css({
			top: Math.round(y),
			left: Math.round(x),
			'text-align': halign	// In case the text wraps
		});
	};

	// Removes one or more text strings from the canvas text overlay.
	//
	// If no parameters are given, all text within the layer is removed.
	//
	// Note that the text is not immediately removed; it is simply marked as
	// inactive, which will result in its removal on the next render pass.
	// This avoids the performance penalty for 'clear and redraw' behavior,
	// where we potentially get rid of all text on a layer, but will likely
	// add back most or all of it later, as when redrawing axes, for example.
	//
	// @param {string} layer A string of space-separated CSS classes uniquely
	//     identifying the layer containing this text.
	// @param {number=} x X coordinate of the text.
	// @param {number=} y Y coordinate of the text.
	// @param {string=} text Text string to remove.
	// @param {(string|object)=} font Either a string of space-separated CSS
	//     classes or a font-spec object, defining the text's font and style.
	// @param {number=} angle Angle at which the text is rotated, in degrees.
	//     Angle is currently unused, it will be implemented in the future.

	Canvas.prototype.removeText = function(layer, x, y, text, font, angle) {
		if (text == null) {
			var layerCache = this._textCache[layer];
			if (layerCache != null) {
				for (var styleKey in layerCache) {
					if (hasOwnProperty.call(layerCache, styleKey)) {
						var styleCache = layerCache[styleKey];
						for (var key in styleCache) {
							if (hasOwnProperty.call(styleCache, key)) {
								var positions = styleCache[key].positions;
								for (var i = 0, position; position = positions[i]; i++) {
									position.active = false;
								}
							}
						}
					}
				}
			}
		} else {
			var positions = this.getTextInfo(layer, text, font, angle).positions;
			for (var i = 0, position; position = positions[i]; i++) {
				if (position.x == x && position.y == y) {
					position.active = false;
				}
			}
		}
	};

	///////////////////////////////////////////////////////////////////////////
	// The top-level container for the entire plot.

    function Plot(placeholder, data_, options_, plugins) {
        // data is on the form:
        //   [ series1, series2 ... ]
        // where series is either just the data as [ [x1, y1], [x2, y2], ... ]
        // or { data: [ [x1, y1], [x2, y2], ... ], label: "some label", ... }

        var series = [],
            options = {
                // the color theme used for graphs
                colors: ["#edc240", "#afd8f8", "#cb4b4b", "#4da74d", "#9440ed"],
                legend: {
                    show: true,
                    noColumns: 1, // number of colums in legend table
                    labelFormatter: null, // fn: string -> string
                    labelBoxBorderColor: "#ccc", // border color for the little label boxes
                    container: null, // container (as jQuery object) to put legend in, null means default on top of graph
                    position: "ne", // position of default legend container within plot
                    margin: 5, // distance from grid edge to default legend container within plot
                    backgroundColor: null, // null means auto-detect
                    backgroundOpacity: 0.85, // set to 0 to avoid background
                    sorted: null    // default to no legend sorting
                },
                xaxis: {
                    show: null, // null = auto-detect, true = always, false = never
                    position: "bottom", // or "top"
                    mode: null, // null or "time"
                    font: null, // null (derived from CSS in placeholder) or object like { size: 11, lineHeight: 13, style: "italic", weight: "bold", family: "sans-serif", variant: "small-caps" }
                    color: null, // base color, labels, ticks
                    tickColor: null, // possibly different color of ticks, e.g. "rgba(0,0,0,0.15)"
                    transform: null, // null or f: number -> number to transform axis
                    inverseTransform: null, // if transform is set, this should be the inverse function
                    min: null, // min. value to show, null means set automatically
                    max: null, // max. value to show, null means set automatically
                    autoscaleMargin: null, // margin in % to add if auto-setting min/max
                    ticks: null, // either [1, 3] or [[1, "a"], 3] or (fn: axis info -> ticks) or app. number of ticks for auto-ticks
                    tickFormatter: null, // fn: number -> string
                    labelWidth: null, // size of tick labels in pixels
                    labelHeight: null,
                    reserveSpace: null, // whether to reserve space even if axis isn't shown
                    tickLength: null, // size in pixels of ticks, or "full" for whole line
                    alignTicksWithAxis: null, // axis number or null for no sync
                    tickDecimals: null, // no. of decimals, null means auto
                    tickSize: null, // number or [number, "unit"]
                    minTickSize: null // number or [number, "unit"]
                },
                yaxis: {
                    autoscaleMargin: 0.02,
                    position: "left" // or "right"
                },
                xaxes: [],
                yaxes: [],
                series: {
                    points: {
                        show: false,
                        radius: 3,
                        lineWidth: 2, // in pixels
                        fill: true,
                        fillColor: "#ffffff",
                        symbol: "circle" // or callback
                    },
                    lines: {
                        // we don't put in show: false so we can see
                        // whether lines were actively disabled
                        lineWidth: 2, // in pixels
                        fill: false,
                        fillColor: null,
                        steps: false
                        // Omit 'zero', so we can later default its value to
                        // match that of the 'fill' option.
                    },
                    bars: {
                        show: false,
                        lineWidth: 2, // in pixels
                        barWidth: 1, // in units of the x axis
                        fill: true,
                        fillColor: null,
                        align: "left", // "left", "right", or "center"
                        horizontal: false,
                        zero: true
                    },
                    shadowSize: 3,
                    highlightColor: null
                },
                grid: {
                    show: true,
                    aboveData: false,
                    color: "#545454", // primary color used for outline and labels
                    backgroundColor: null, // null for transparent, else color
                    borderColor: null, // set if different from the grid color
                    tickColor: null, // color for the ticks, e.g. "rgba(0,0,0,0.15)"
                    margin: 0, // distance from the canvas edge to the grid
                    labelMargin: 5, // in pixels
                    axisMargin: 8, // in pixels
                    borderWidth: 2, // in pixels
                    minBorderMargin: null, // in pixels, null means taken from points radius
                    markings: null, // array of ranges or fn: axes -> array of ranges
                    markingsColor: "#f4f4f4",
                    markingsLineWidth: 2,
                    // interactive stuff
                    clickable: false,
                    hoverable: false,
                    autoHighlight: true, // highlight in case mouse is near
                    mouseActiveRadius: 10 // how far the mouse can be away to activate an item
                },
                interaction: {
                    redrawOverlayInterval: 1000/60 // time between updates, -1 means in same flow
                },
                hooks: {}
            },
        surface = null,     // the canvas for the plot itself
        overlay = null,     // canvas for interactive stuff on top of plot
        eventHolder = null, // jQuery object that events should be bound to
        ctx = null, octx = null,
        xaxes = [], yaxes = [],
        plotOffset = { left: 0, right: 0, top: 0, bottom: 0},
        plotWidth = 0, plotHeight = 0,
        hooks = {
            processOptions: [],
            processRawData: [],
            processDatapoints: [],
            processOffset: [],
            drawBackground: [],
            drawSeries: [],
            draw: [],
            bindEvents: [],
            drawOverlay: [],
            shutdown: []
        },
        plot = this;

        // public functions
        plot.setData = setData;
        plot.setupGrid = setupGrid;
        plot.draw = draw;
        plot.getPlaceholder = function() { return placeholder; };
        plot.getCanvas = function() { return surface.element; };
        plot.getPlotOffset = function() { return plotOffset; };
        plot.width = function () { return plotWidth; };
        plot.height = function () { return plotHeight; };
        plot.offset = function () {
            var o = eventHolder.offset();
            o.left += plotOffset.left;
            o.top += plotOffset.top;
            return o;
        };
        plot.getData = function () { return series; };
        plot.getAxes = function () {
            var res = {}, i;
            $.each(xaxes.concat(yaxes), function (_, axis) {
                if (axis)
                    res[axis.direction + (axis.n != 1 ? axis.n : "") + "axis"] = axis;
            });
            return res;
        };
        plot.getXAxes = function () { return xaxes; };
        plot.getYAxes = function () { return yaxes; };
        plot.c2p = canvasToAxisCoords;
        plot.p2c = axisToCanvasCoords;
        plot.getOptions = function () { return options; };
        plot.highlight = highlight;
        plot.unhighlight = unhighlight;
        plot.triggerRedrawOverlay = triggerRedrawOverlay;
        plot.pointOffset = function(point) {
            return {
                left: parseInt(xaxes[axisNumber(point, "x") - 1].p2c(+point.x) + plotOffset.left, 10),
                top: parseInt(yaxes[axisNumber(point, "y") - 1].p2c(+point.y) + plotOffset.top, 10)
            };
        };
        plot.shutdown = shutdown;
        plot.destroy = function () {
            shutdown();
            placeholder.removeData("plot").empty();

            series = [];
            options = null;
            surface = null;
            overlay = null;
            eventHolder = null;
            ctx = null;
            octx = null;
            xaxes = [];
            yaxes = [];
            hooks = null;
            highlights = [];
            plot = null;
        };
        plot.resize = function () {
        	var width = placeholder.width(),
        		height = placeholder.height();
            surface.resize(width, height);
            overlay.resize(width, height);
        };

        // public attributes
        plot.hooks = hooks;

        // initialize
        initPlugins(plot);
        parseOptions(options_);
        setupCanvases();
        setData(data_);
        setupGrid();
        draw();
        bindEvents();


        function executeHooks(hook, args) {
            args = [plot].concat(args);
            for (var i = 0; i < hook.length; ++i)
                hook[i].apply(this, args);
        }

        function initPlugins() {

            // References to key classes, allowing plugins to modify them

            var classes = {
                Canvas: Canvas
            };

            for (var i = 0; i < plugins.length; ++i) {
                var p = plugins[i];
                p.init(plot, classes);
                if (p.options)
                    $.extend(true, options, p.options);
            }
        }

        function parseOptions(opts) {

            $.extend(true, options, opts);

            // $.extend merges arrays, rather than replacing them.  When less
            // colors are provided than the size of the default palette, we
            // end up with those colors plus the remaining defaults, which is
            // not expected behavior; avoid it by replacing them here.

            if (opts && opts.colors) {
            	options.colors = opts.colors;
            }

            if (options.xaxis.color == null)
                options.xaxis.color = $.color.parse(options.grid.color).scale('a', 0.22).toString();
            if (options.yaxis.color == null)
                options.yaxis.color = $.color.parse(options.grid.color).scale('a', 0.22).toString();

            if (options.xaxis.tickColor == null) // grid.tickColor for back-compatibility
                options.xaxis.tickColor = options.grid.tickColor || options.xaxis.color;
            if (options.yaxis.tickColor == null) // grid.tickColor for back-compatibility
                options.yaxis.tickColor = options.grid.tickColor || options.yaxis.color;

            if (options.grid.borderColor == null)
                options.grid.borderColor = options.grid.color;
            if (options.grid.tickColor == null)
                options.grid.tickColor = $.color.parse(options.grid.color).scale('a', 0.22).toString();

            // Fill in defaults for axis options, including any unspecified
            // font-spec fields, if a font-spec was provided.

            // If no x/y axis options were provided, create one of each anyway,
            // since the rest of the code assumes that they exist.

            var i, axisOptions, axisCount,
                fontSize = placeholder.css("font-size"),
                fontSizeDefault = fontSize ? +fontSize.replace("px", "") : 13,
                fontDefaults = {
                    style: placeholder.css("font-style"),
                    size: Math.round(0.8 * fontSizeDefault),
                    variant: placeholder.css("font-variant"),
                    weight: placeholder.css("font-weight"),
                    family: placeholder.css("font-family")
                };

            axisCount = options.xaxes.length || 1;
            for (i = 0; i < axisCount; ++i) {

                axisOptions = options.xaxes[i];
                if (axisOptions && !axisOptions.tickColor) {
                    axisOptions.tickColor = axisOptions.color;
                }

                axisOptions = $.extend(true, {}, options.xaxis, axisOptions);
                options.xaxes[i] = axisOptions;

                if (axisOptions.font) {
                    axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);
                    if (!axisOptions.font.color) {
                        axisOptions.font.color = axisOptions.color;
                    }
                    if (!axisOptions.font.lineHeight) {
                        axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);
                    }
                }
            }

            axisCount = options.yaxes.length || 1;
            for (i = 0; i < axisCount; ++i) {

                axisOptions = options.yaxes[i];
                if (axisOptions && !axisOptions.tickColor) {
                    axisOptions.tickColor = axisOptions.color;
                }

                axisOptions = $.extend(true, {}, options.yaxis, axisOptions);
                options.yaxes[i] = axisOptions;

                if (axisOptions.font) {
                    axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);
                    if (!axisOptions.font.color) {
                        axisOptions.font.color = axisOptions.color;
                    }
                    if (!axisOptions.font.lineHeight) {
                        axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);
                    }
                }
            }

            // backwards compatibility, to be removed in future
            if (options.xaxis.noTicks && options.xaxis.ticks == null)
                options.xaxis.ticks = options.xaxis.noTicks;
            if (options.yaxis.noTicks && options.yaxis.ticks == null)
                options.yaxis.ticks = options.yaxis.noTicks;
            if (options.x2axis) {
                options.xaxes[1] = $.extend(true, {}, options.xaxis, options.x2axis);
                options.xaxes[1].position = "top";
                // Override the inherit to allow the axis to auto-scale
                if (options.x2axis.min == null) {
                    options.xaxes[1].min = null;
                }
                if (options.x2axis.max == null) {
                    options.xaxes[1].max = null;
                }
            }
            if (options.y2axis) {
                options.yaxes[1] = $.extend(true, {}, options.yaxis, options.y2axis);
                options.yaxes[1].position = "right";
                // Override the inherit to allow the axis to auto-scale
                if (options.y2axis.min == null) {
                    options.yaxes[1].min = null;
                }
                if (options.y2axis.max == null) {
                    options.yaxes[1].max = null;
                }
            }
            if (options.grid.coloredAreas)
                options.grid.markings = options.grid.coloredAreas;
            if (options.grid.coloredAreasColor)
                options.grid.markingsColor = options.grid.coloredAreasColor;
            if (options.lines)
                $.extend(true, options.series.lines, options.lines);
            if (options.points)
                $.extend(true, options.series.points, options.points);
            if (options.bars)
                $.extend(true, options.series.bars, options.bars);
            if (options.shadowSize != null)
                options.series.shadowSize = options.shadowSize;
            if (options.highlightColor != null)
                options.series.highlightColor = options.highlightColor;

            // save options on axes for future reference
            for (i = 0; i < options.xaxes.length; ++i)
                getOrCreateAxis(xaxes, i + 1).options = options.xaxes[i];
            for (i = 0; i < options.yaxes.length; ++i)
                getOrCreateAxis(yaxes, i + 1).options = options.yaxes[i];

            // add hooks from options
            for (var n in hooks)
                if (options.hooks[n] && options.hooks[n].length)
                    hooks[n] = hooks[n].concat(options.hooks[n]);

            executeHooks(hooks.processOptions, [options]);
        }

        function setData(d) {
            series = parseData(d);
            fillInSeriesOptions();
            processData();
        }

        function parseData(d) {
            var res = [];
            for (var i = 0; i < d.length; ++i) {
                var s = $.extend(true, {}, options.series);

                if (d[i].data != null) {
                    s.data = d[i].data; // move the data instead of deep-copy
                    delete d[i].data;

                    $.extend(true, s, d[i]);

                    d[i].data = s.data;
                }
                else
                    s.data = d[i];
                res.push(s);
            }

            return res;
        }

        function axisNumber(obj, coord) {
            var a = obj[coord + "axis"];
            if (typeof a == "object") // if we got a real axis, extract number
                a = a.n;
            if (typeof a != "number")
                a = 1; // default to first axis
            return a;
        }

        function allAxes() {
            // return flat array without annoying null entries
            return $.grep(xaxes.concat(yaxes), function (a) { return a; });
        }

        function canvasToAxisCoords(pos) {
            // return an object with x/y corresponding to all used axes
            var res = {}, i, axis;
            for (i = 0; i < xaxes.length; ++i) {
                axis = xaxes[i];
                if (axis && axis.used)
                    res["x" + axis.n] = axis.c2p(pos.left);
            }

            for (i = 0; i < yaxes.length; ++i) {
                axis = yaxes[i];
                if (axis && axis.used)
                    res["y" + axis.n] = axis.c2p(pos.top);
            }

            if (res.x1 !== undefined)
                res.x = res.x1;
            if (res.y1 !== undefined)
                res.y = res.y1;

            return res;
        }

        function axisToCanvasCoords(pos) {
            // get canvas coords from the first pair of x/y found in pos
            var res = {}, i, axis, key;

            for (i = 0; i < xaxes.length; ++i) {
                axis = xaxes[i];
                if (axis && axis.used) {
                    key = "x" + axis.n;
                    if (pos[key] == null && axis.n == 1)
                        key = "x";

                    if (pos[key] != null) {
                        res.left = axis.p2c(pos[key]);
                        break;
                    }
                }
            }

            for (i = 0; i < yaxes.length; ++i) {
                axis = yaxes[i];
                if (axis && axis.used) {
                    key = "y" + axis.n;
                    if (pos[key] == null && axis.n == 1)
                        key = "y";

                    if (pos[key] != null) {
                        res.top = axis.p2c(pos[key]);
                        break;
                    }
                }
            }

            return res;
        }

        function getOrCreateAxis(axes, number) {
            if (!axes[number - 1])
                axes[number - 1] = {
                    n: number, // save the number for future reference
                    direction: axes == xaxes ? "x" : "y",
                    options: $.extend(true, {}, axes == xaxes ? options.xaxis : options.yaxis)
                };

            return axes[number - 1];
        }

        function fillInSeriesOptions() {

            var neededColors = series.length, maxIndex = -1, i;

            // Subtract the number of series that already have fixed colors or
            // color indexes from the number that we still need to generate.

            for (i = 0; i < series.length; ++i) {
                var sc = series[i].color;
                if (sc != null) {
                    neededColors--;
                    if (typeof sc == "number" && sc > maxIndex) {
                        maxIndex = sc;
                    }
                }
            }

            // If any of the series have fixed color indexes, then we need to
            // generate at least as many colors as the highest index.

            if (neededColors <= maxIndex) {
                neededColors = maxIndex + 1;
            }

            // Generate all the colors, using first the option colors and then
            // variations on those colors once they're exhausted.

            var c, colors = [], colorPool = options.colors,
                colorPoolSize = colorPool.length, variation = 0;

            for (i = 0; i < neededColors; i++) {

                c = $.color.parse(colorPool[i % colorPoolSize] || "#666");

                // Each time we exhaust the colors in the pool we adjust
                // a scaling factor used to produce more variations on
                // those colors. The factor alternates negative/positive
                // to produce lighter/darker colors.

                // Reset the variation after every few cycles, or else
                // it will end up producing only white or black colors.

                if (i % colorPoolSize == 0 && i) {
                    if (variation >= 0) {
                        if (variation < 0.5) {
                            variation = -variation - 0.2;
                        } else variation = 0;
                    } else variation = -variation;
                }

                colors[i] = c.scale('rgb', 1 + variation);
            }

            // Finalize the series options, filling in their colors

            var colori = 0, s;
            for (i = 0; i < series.length; ++i) {
                s = series[i];

                // assign colors
                if (s.color == null) {
                    s.color = colors[colori].toString();
                    ++colori;
                }
                else if (typeof s.color == "number")
                    s.color = colors[s.color].toString();

                // turn on lines automatically in case nothing is set
                if (s.lines.show == null) {
                    var v, show = true;
                    for (v in s)
                        if (s[v] && s[v].show) {
                            show = false;
                            break;
                        }
                    if (show)
                        s.lines.show = true;
                }

                // If nothing was provided for lines.zero, default it to match
                // lines.fill, since areas by default should extend to zero.

                if (s.lines.zero == null) {
                    s.lines.zero = !!s.lines.fill;
                }

                // setup axes
                s.xaxis = getOrCreateAxis(xaxes, axisNumber(s, "x"));
                s.yaxis = getOrCreateAxis(yaxes, axisNumber(s, "y"));
            }
        }

        function processData() {
            var topSentry = Number.POSITIVE_INFINITY,
                bottomSentry = Number.NEGATIVE_INFINITY,
                fakeInfinity = Number.MAX_VALUE,
                i, j, k, m, length,
                s, points, ps, x, y, axis, val, f, p,
                data, format;

            function updateAxis(axis, min, max) {
                if (min < axis.datamin && min != -fakeInfinity)
                    axis.datamin = min;
                if (max > axis.datamax && max != fakeInfinity)
                    axis.datamax = max;
            }

            $.each(allAxes(), function (_, axis) {
                // init axis
                axis.datamin = topSentry;
                axis.datamax = bottomSentry;
                axis.used = false;
            });

            for (i = 0; i < series.length; ++i) {
                s = series[i];
                s.datapoints = { points: [] };

                executeHooks(hooks.processRawData, [ s, s.data, s.datapoints ]);
            }

            // first pass: clean and copy data
            for (i = 0; i < series.length; ++i) {
                s = series[i];

                data = s.data;
                format = s.datapoints.format;

                if (!format) {
                    format = [];
                    // find out how to copy
                    format.push({ x: true, number: true, required: true });
                    format.push({ y: true, number: true, required: true });

                    if (s.bars.show || (s.lines.show && s.lines.fill)) {
                        var autoscale = !!((s.bars.show && s.bars.zero) || (s.lines.show && s.lines.zero));
                        format.push({ y: true, number: true, required: false, defaultValue: 0, autoscale: autoscale });
                        if (s.bars.horizontal) {
                            delete format[format.length - 1].y;
                            format[format.length - 1].x = true;
                        }
                    }

                    s.datapoints.format = format;
                }

                if (s.datapoints.pointsize != null)
                    continue; // already filled in

                s.datapoints.pointsize = format.length;

                ps = s.datapoints.pointsize;
                points = s.datapoints.points;

                var insertSteps = s.lines.show && s.lines.steps;
                s.xaxis.used = s.yaxis.used = true;

                for (j = k = 0; j < data.length; ++j, k += ps) {
                    p = data[j];

                    var nullify = p == null;
                    if (!nullify) {
                        for (m = 0; m < ps; ++m) {
                            val = p[m];
                            f = format[m];

                            if (f) {
                                if (f.number && val != null) {
                                    val = +val; // convert to number
                                    if (isNaN(val))
                                        val = null;
                                    else if (val == Infinity)
                                        val = fakeInfinity;
                                    else if (val == -Infinity)
                                        val = -fakeInfinity;
                                }

                                if (val == null) {
                                    if (f.required)
                                        nullify = true;

                                    if (f.defaultValue != null)
                                        val = f.defaultValue;
                                }
                            }

                            points[k + m] = val;
                        }
                    }

                    if (nullify) {
                        for (m = 0; m < ps; ++m) {
                            val = points[k + m];
                            if (val != null) {
                                f = format[m];
                                // extract min/max info
                                if (f.autoscale !== false) {
                                    if (f.x) {
                                        updateAxis(s.xaxis, val, val);
                                    }
                                    if (f.y) {
                                        updateAxis(s.yaxis, val, val);
                                    }
                                }
                            }
                            points[k + m] = null;
                        }
                    }
                    else {
                        // a little bit of line specific stuff that
                        // perhaps shouldn't be here, but lacking
                        // better means...
                        if (insertSteps && k > 0
                            && points[k - ps] != null
                            && points[k - ps] != points[k]
                            && points[k - ps + 1] != points[k + 1]) {
                            // copy the point to make room for a middle point
                            for (m = 0; m < ps; ++m)
                                points[k + ps + m] = points[k + m];

                            // middle point has same y
                            points[k + 1] = points[k - ps + 1];

                            // we've added a point, better reflect that
                            k += ps;
                        }
                    }
                }
            }

            // give the hooks a chance to run
            for (i = 0; i < series.length; ++i) {
                s = series[i];

                executeHooks(hooks.processDatapoints, [ s, s.datapoints]);
            }

            // second pass: find datamax/datamin for auto-scaling
            for (i = 0; i < series.length; ++i) {
                s = series[i];
                points = s.datapoints.points;
                ps = s.datapoints.pointsize;
                format = s.datapoints.format;

                var xmin = topSentry, ymin = topSentry,
                    xmax = bottomSentry, ymax = bottomSentry;

                for (j = 0; j < points.length; j += ps) {
                    if (points[j] == null)
                        continue;

                    for (m = 0; m < ps; ++m) {
                        val = points[j + m];
                        f = format[m];
                        if (!f || f.autoscale === false || val == fakeInfinity || val == -fakeInfinity)
                            continue;

                        if (f.x) {
                            if (val < xmin)
                                xmin = val;
                            if (val > xmax)
                                xmax = val;
                        }
                        if (f.y) {
                            if (val < ymin)
                                ymin = val;
                            if (val > ymax)
                                ymax = val;
                        }
                    }
                }

                if (s.bars.show) {
                    // make sure we got room for the bar on the dancing floor
                    var delta;

                    switch (s.bars.align) {
                        case "left":
                            delta = 0;
                            break;
                        case "right":
                            delta = -s.bars.barWidth;
                            break;
                        default:
                            delta = -s.bars.barWidth / 2;
                    }

                    if (s.bars.horizontal) {
                        ymin += delta;
                        ymax += delta + s.bars.barWidth;
                    }
                    else {
                        xmin += delta;
                        xmax += delta + s.bars.barWidth;
                    }
                }

                updateAxis(s.xaxis, xmin, xmax);
                updateAxis(s.yaxis, ymin, ymax);
            }

            $.each(allAxes(), function (_, axis) {
                if (axis.datamin == topSentry)
                    axis.datamin = null;
                if (axis.datamax == bottomSentry)
                    axis.datamax = null;
            });
        }

        function setupCanvases() {

            // Make sure the placeholder is clear of everything except canvases
            // from a previous plot in this container that we'll try to re-use.

            placeholder.css("padding", 0) // padding messes up the positioning
                .children().filter(function(){
                    return !$(this).hasClass("flot-overlay") && !$(this).hasClass('flot-base');
                }).remove();

            if (placeholder.css("position") == 'static')
                placeholder.css("position", "relative"); // for positioning labels and overlay

            surface = new Canvas("flot-base", placeholder);
            overlay = new Canvas("flot-overlay", placeholder); // overlay canvas for interactive features

            ctx = surface.context;
            octx = overlay.context;

            // define which element we're listening for events on
            eventHolder = $(overlay.element).unbind();

            // If we're re-using a plot object, shut down the old one

            var existing = placeholder.data("plot");

            if (existing) {
                existing.shutdown();
                overlay.clear();
            }

            // save in case we get replotted
            placeholder.data("plot", plot);
        }

        function bindEvents() {
            // bind events
            if (options.grid.hoverable) {
                eventHolder.mousemove(onMouseMove);

                // Use bind, rather than .mouseleave, because we officially
                // still support jQuery 1.2.6, which doesn't define a shortcut
                // for mouseenter or mouseleave.  This was a bug/oversight that
                // was fixed somewhere around 1.3.x.  We can return to using
                // .mouseleave when we drop support for 1.2.6.

                eventHolder.bind("mouseleave", onMouseLeave);
            }

            if (options.grid.clickable)
                eventHolder.click(onClick);

            executeHooks(hooks.bindEvents, [eventHolder]);
        }

        function shutdown() {
            if (redrawTimeout)
                clearTimeout(redrawTimeout);

            eventHolder.unbind("mousemove", onMouseMove);
            eventHolder.unbind("mouseleave", onMouseLeave);
            eventHolder.unbind("click", onClick);

            executeHooks(hooks.shutdown, [eventHolder]);
        }

        function setTransformationHelpers(axis) {
            // set helper functions on the axis, assumes plot area
            // has been computed already

            function identity(x) { return x; }

            var s, m, t = axis.options.transform || identity,
                it = axis.options.inverseTransform;

            // precompute how much the axis is scaling a point
            // in canvas space
            if (axis.direction == "x") {
                s = axis.scale = plotWidth / Math.abs(t(axis.max) - t(axis.min));
                m = Math.min(t(axis.max), t(axis.min));
            }
            else {
                s = axis.scale = plotHeight / Math.abs(t(axis.max) - t(axis.min));
                s = -s;
                m = Math.max(t(axis.max), t(axis.min));
            }

            // data point to canvas coordinate
            if (t == identity) // slight optimization
                axis.p2c = function (p) { return (p - m) * s; };
            else
                axis.p2c = function (p) { return (t(p) - m) * s; };
            // canvas coordinate to data point
            if (!it)
                axis.c2p = function (c) { return m + c / s; };
            else
                axis.c2p = function (c) { return it(m + c / s); };
        }

        function measureTickLabels(axis) {

            var opts = axis.options,
                ticks = axis.ticks || [],
                labelWidth = opts.labelWidth || 0,
                labelHeight = opts.labelHeight || 0,
                maxWidth = labelWidth || (axis.direction == "x" ? Math.floor(surface.width / (ticks.length || 1)) : null),
                legacyStyles = axis.direction + "Axis " + axis.direction + axis.n + "Axis",
                layer = "flot-" + axis.direction + "-axis flot-" + axis.direction + axis.n + "-axis " + legacyStyles,
                font = opts.font || "flot-tick-label tickLabel";

            for (var i = 0; i < ticks.length; ++i) {

                var t = ticks[i];

                if (!t.label)
                    continue;

                var info = surface.getTextInfo(layer, t.label, font, null, maxWidth);

                labelWidth = Math.max(labelWidth, info.width);
                labelHeight = Math.max(labelHeight, info.height);
            }

            axis.labelWidth = opts.labelWidth || labelWidth;
            axis.labelHeight = opts.labelHeight || labelHeight;
        }

        function allocateAxisBoxFirstPhase(axis) {
            // find the bounding box of the axis by looking at label
            // widths/heights and ticks, make room by diminishing the
            // plotOffset; this first phase only looks at one
            // dimension per axis, the other dimension depends on the
            // other axes so will have to wait

            var lw = axis.labelWidth,
                lh = axis.labelHeight,
                pos = axis.options.position,
                isXAxis = axis.direction === "x",
                tickLength = axis.options.tickLength,
                axisMargin = options.grid.axisMargin,
                padding = options.grid.labelMargin,
                innermost = true,
                outermost = true,
                first = true,
                found = false;

            // Determine the axis's position in its direction and on its side

            $.each(isXAxis ? xaxes : yaxes, function(i, a) {
                if (a && (a.show || a.reserveSpace)) {
                    if (a === axis) {
                        found = true;
                    } else if (a.options.position === pos) {
                        if (found) {
                            outermost = false;
                        } else {
                            innermost = false;
                        }
                    }
                    if (!found) {
                        first = false;
                    }
                }
            });

            // The outermost axis on each side has no margin

            if (outermost) {
                axisMargin = 0;
            }

            // The ticks for the first axis in each direction stretch across

            if (tickLength == null) {
                tickLength = first ? "full" : 5;
            }

            if (!isNaN(+tickLength))
                padding += +tickLength;

            if (isXAxis) {
                lh += padding;

                if (pos == "bottom") {
                    plotOffset.bottom += lh + axisMargin;
                    axis.box = { top: surface.height - plotOffset.bottom, height: lh };
                }
                else {
                    axis.box = { top: plotOffset.top + axisMargin, height: lh };
                    plotOffset.top += lh + axisMargin;
                }
            }
            else {
                lw += padding;

                if (pos == "left") {
                    axis.box = { left: plotOffset.left + axisMargin, width: lw };
                    plotOffset.left += lw + axisMargin;
                }
                else {
                    plotOffset.right += lw + axisMargin;
                    axis.box = { left: surface.width - plotOffset.right, width: lw };
                }
            }

             // save for future reference
            axis.position = pos;
            axis.tickLength = tickLength;
            axis.box.padding = padding;
            axis.innermost = innermost;
        }

        function allocateAxisBoxSecondPhase(axis) {
            // now that all axis boxes have been placed in one
            // dimension, we can set the remaining dimension coordinates
            if (axis.direction == "x") {
                axis.box.left = plotOffset.left - axis.labelWidth / 2;
                axis.box.width = surface.width - plotOffset.left - plotOffset.right + axis.labelWidth;
            }
            else {
                axis.box.top = plotOffset.top - axis.labelHeight / 2;
                axis.box.height = surface.height - plotOffset.bottom - plotOffset.top + axis.labelHeight;
            }
        }

        function adjustLayoutForThingsStickingOut() {
            // possibly adjust plot offset to ensure everything stays
            // inside the canvas and isn't clipped off

            var minMargin = options.grid.minBorderMargin,
                axis, i;

            // check stuff from the plot (FIXME: this should just read
            // a value from the series, otherwise it's impossible to
            // customize)
            if (minMargin == null) {
                minMargin = 0;
                for (i = 0; i < series.length; ++i)
                    minMargin = Math.max(minMargin, 2 * (series[i].points.radius + series[i].points.lineWidth/2));
            }

            var margins = {
                left: minMargin,
                right: minMargin,
                top: minMargin,
                bottom: minMargin
            };

            // check axis labels, note we don't check the actual
            // labels but instead use the overall width/height to not
            // jump as much around with replots
            $.each(allAxes(), function (_, axis) {
                if (axis.reserveSpace && axis.ticks && axis.ticks.length) {
                    if (axis.direction === "x") {
                        margins.left = Math.max(margins.left, axis.labelWidth / 2);
                        margins.right = Math.max(margins.right, axis.labelWidth / 2);
                    } else {
                        margins.bottom = Math.max(margins.bottom, axis.labelHeight / 2);
                        margins.top = Math.max(margins.top, axis.labelHeight / 2);
                    }
                }
            });

            plotOffset.left = Math.ceil(Math.max(margins.left, plotOffset.left));
            plotOffset.right = Math.ceil(Math.max(margins.right, plotOffset.right));
            plotOffset.top = Math.ceil(Math.max(margins.top, plotOffset.top));
            plotOffset.bottom = Math.ceil(Math.max(margins.bottom, plotOffset.bottom));
        }

        function setupGrid() {
            var i, axes = allAxes(), showGrid = options.grid.show;

            // Initialize the plot's offset from the edge of the canvas

            for (var a in plotOffset) {
                var margin = options.grid.margin || 0;
                plotOffset[a] = typeof margin == "number" ? margin : margin[a] || 0;
            }

            executeHooks(hooks.processOffset, [plotOffset]);

            // If the grid is visible, add its border width to the offset

            for (var a in plotOffset) {
                if(typeof(options.grid.borderWidth) == "object") {
                    plotOffset[a] += showGrid ? options.grid.borderWidth[a] : 0;
                }
                else {
                    plotOffset[a] += showGrid ? options.grid.borderWidth : 0;
                }
            }

            $.each(axes, function (_, axis) {
                var axisOpts = axis.options;
                axis.show = axisOpts.show == null ? axis.used : axisOpts.show;
                axis.reserveSpace = axisOpts.reserveSpace == null ? axis.show : axisOpts.reserveSpace;
                setRange(axis);
            });

            if (showGrid) {

                var allocatedAxes = $.grep(axes, function (axis) {
                    return axis.show || axis.reserveSpace;
                });

                $.each(allocatedAxes, function (_, axis) {
                    // make the ticks
                    setupTickGeneration(axis);
                    setTicks(axis);
                    snapRangeToTicks(axis, axis.ticks);
                    // find labelWidth/Height for axis
                    measureTickLabels(axis);
                });

                // with all dimensions calculated, we can compute the
                // axis bounding boxes, start from the outside
                // (reverse order)
                for (i = allocatedAxes.length - 1; i >= 0; --i)
                    allocateAxisBoxFirstPhase(allocatedAxes[i]);

                // make sure we've got enough space for things that
                // might stick out
                adjustLayoutForThingsStickingOut();

                $.each(allocatedAxes, function (_, axis) {
                    allocateAxisBoxSecondPhase(axis);
                });
            }

            plotWidth = surface.width - plotOffset.left - plotOffset.right;
            plotHeight = surface.height - plotOffset.bottom - plotOffset.top;

            // now we got the proper plot dimensions, we can compute the scaling
            $.each(axes, function (_, axis) {
                setTransformationHelpers(axis);
            });

            if (showGrid) {
                drawAxisLabels();
            }

            insertLegend();
        }

        function setRange(axis) {
            var opts = axis.options,
                min = +(opts.min != null ? opts.min : axis.datamin),
                max = +(opts.max != null ? opts.max : axis.datamax),
                delta = max - min;

            if (delta == 0.0) {
                // degenerate case
                var widen = max == 0 ? 1 : 0.01;

                if (opts.min == null)
                    min -= widen;
                // always widen max if we couldn't widen min to ensure we
                // don't fall into min == max which doesn't work
                if (opts.max == null || opts.min != null)
                    max += widen;
            }
            else {
                // consider autoscaling
                var margin = opts.autoscaleMargin;
                if (margin != null) {
                    if (opts.min == null) {
                        min -= delta * margin;
                        // make sure we don't go below zero if all values
                        // are positive
                        if (min < 0 && axis.datamin != null && axis.datamin >= 0)
                            min = 0;
                    }
                    if (opts.max == null) {
                        max += delta * margin;
                        if (max > 0 && axis.datamax != null && axis.datamax <= 0)
                            max = 0;
                    }
                }
            }
            axis.min = min;
            axis.max = max;
        }

        function setupTickGeneration(axis) {
            var opts = axis.options;

            // estimate number of ticks
            var noTicks;
            if (typeof opts.ticks == "number" && opts.ticks > 0)
                noTicks = opts.ticks;
            else
                // heuristic based on the model a*sqrt(x) fitted to
                // some data points that seemed reasonable
                noTicks = 0.3 * Math.sqrt(axis.direction == "x" ? surface.width : surface.height);

            var delta = (axis.max - axis.min) / noTicks,
                dec = -Math.floor(Math.log(delta) / Math.LN10),
                maxDec = opts.tickDecimals;

            if (maxDec != null && dec > maxDec) {
                dec = maxDec;
            }

            var magn = Math.pow(10, -dec),
                norm = delta / magn, // norm is between 1.0 and 10.0
                size;

            if (norm < 1.5) {
                size = 1;
            } else if (norm < 3) {
                size = 2;
                // special case for 2.5, requires an extra decimal
                if (norm > 2.25 && (maxDec == null || dec + 1 <= maxDec)) {
                    size = 2.5;
                    ++dec;
                }
            } else if (norm < 7.5) {
                size = 5;
            } else {
                size = 10;
            }

            size *= magn;

            if (opts.minTickSize != null && size < opts.minTickSize) {
                size = opts.minTickSize;
            }

            axis.delta = delta;
            axis.tickDecimals = Math.max(0, maxDec != null ? maxDec : dec);
            axis.tickSize = opts.tickSize || size;

            // Time mode was moved to a plug-in in 0.8, and since so many people use it
            // we'll add an especially friendly reminder to make sure they included it.

            if (opts.mode == "time" && !axis.tickGenerator) {
                throw new Error("Time mode requires the flot.time plugin.");
            }

            // Flot supports base-10 axes; any other mode else is handled by a plug-in,
            // like flot.time.js.

            if (!axis.tickGenerator) {

                axis.tickGenerator = function (axis) {

                    var ticks = [],
                        start = floorInBase(axis.min, axis.tickSize),
                        i = 0,
                        v = Number.NaN,
                        prev;

                    do {
                        prev = v;
                        v = start + i * axis.tickSize;
                        ticks.push(v);
                        ++i;
                    } while (v < axis.max && v != prev);
                    return ticks;
                };

				axis.tickFormatter = function (value, axis) {

					var factor = axis.tickDecimals ? Math.pow(10, axis.tickDecimals) : 1;
					var formatted = "" + Math.round(value * factor) / factor;

					// If tickDecimals was specified, ensure that we have exactly that
					// much precision; otherwise default to the value's own precision.

					if (axis.tickDecimals != null) {
						var decimal = formatted.indexOf(".");
						var precision = decimal == -1 ? 0 : formatted.length - decimal - 1;
						if (precision < axis.tickDecimals) {
							return (precision ? formatted : formatted + ".") + ("" + factor).substr(1, axis.tickDecimals - precision);
						}
					}

                    return formatted;
                };
            }

            if ($.isFunction(opts.tickFormatter))
                axis.tickFormatter = function (v, axis) { return "" + opts.tickFormatter(v, axis); };

            if (opts.alignTicksWithAxis != null) {
                var otherAxis = (axis.direction == "x" ? xaxes : yaxes)[opts.alignTicksWithAxis - 1];
                if (otherAxis && otherAxis.used && otherAxis != axis) {
                    // consider snapping min/max to outermost nice ticks
                    var niceTicks = axis.tickGenerator(axis);
                    if (niceTicks.length > 0) {
                        if (opts.min == null)
                            axis.min = Math.min(axis.min, niceTicks[0]);
                        if (opts.max == null && niceTicks.length > 1)
                            axis.max = Math.max(axis.max, niceTicks[niceTicks.length - 1]);
                    }

                    axis.tickGenerator = function (axis) {
                        // copy ticks, scaled to this axis
                        var ticks = [], v, i;
                        for (i = 0; i < otherAxis.ticks.length; ++i) {
                            v = (otherAxis.ticks[i].v - otherAxis.min) / (otherAxis.max - otherAxis.min);
                            v = axis.min + v * (axis.max - axis.min);
                            ticks.push(v);
                        }
                        return ticks;
                    };

                    // we might need an extra decimal since forced
                    // ticks don't necessarily fit naturally
                    if (!axis.mode && opts.tickDecimals == null) {
                        var extraDec = Math.max(0, -Math.floor(Math.log(axis.delta) / Math.LN10) + 1),
                            ts = axis.tickGenerator(axis);

                        // only proceed if the tick interval rounded
                        // with an extra decimal doesn't give us a
                        // zero at end
                        if (!(ts.length > 1 && /\..*0$/.test((ts[1] - ts[0]).toFixed(extraDec))))
                            axis.tickDecimals = extraDec;
                    }
                }
            }
        }

        function setTicks(axis) {
            var oticks = axis.options.ticks, ticks = [];
            if (oticks == null || (typeof oticks == "number" && oticks > 0))
                ticks = axis.tickGenerator(axis);
            else if (oticks) {
                if ($.isFunction(oticks))
                    // generate the ticks
                    ticks = oticks(axis);
                else
                    ticks = oticks;
            }

            // clean up/labelify the supplied ticks, copy them over
            var i, v;
            axis.ticks = [];
            for (i = 0; i < ticks.length; ++i) {
                var label = null;
                var t = ticks[i];
                if (typeof t == "object") {
                    v = +t[0];
                    if (t.length > 1)
                        label = t[1];
                }
                else
                    v = +t;
                if (label == null)
                    label = axis.tickFormatter(v, axis);
                if (!isNaN(v))
                    axis.ticks.push({ v: v, label: label });
            }
        }

        function snapRangeToTicks(axis, ticks) {
            if (axis.options.autoscaleMargin && ticks.length > 0) {
                // snap to ticks
                if (axis.options.min == null)
                    axis.min = Math.min(axis.min, ticks[0].v);
                if (axis.options.max == null && ticks.length > 1)
                    axis.max = Math.max(axis.max, ticks[ticks.length - 1].v);
            }
        }

        function draw() {

            surface.clear();

            executeHooks(hooks.drawBackground, [ctx]);

            var grid = options.grid;

            // draw background, if any
            if (grid.show && grid.backgroundColor)
                drawBackground();

            if (grid.show && !grid.aboveData) {
                drawGrid();
            }

            for (var i = 0; i < series.length; ++i) {
                executeHooks(hooks.drawSeries, [ctx, series[i]]);
                drawSeries(series[i]);
            }

            executeHooks(hooks.draw, [ctx]);

            if (grid.show && grid.aboveData) {
                drawGrid();
            }

            surface.render();

            // A draw implies that either the axes or data have changed, so we
            // should probably update the overlay highlights as well.

            triggerRedrawOverlay();
        }

        function extractRange(ranges, coord) {
            var axis, from, to, key, axes = allAxes();

            for (var i = 0; i < axes.length; ++i) {
                axis = axes[i];
                if (axis.direction == coord) {
                    key = coord + axis.n + "axis";
                    if (!ranges[key] && axis.n == 1)
                        key = coord + "axis"; // support x1axis as xaxis
                    if (ranges[key]) {
                        from = ranges[key].from;
                        to = ranges[key].to;
                        break;
                    }
                }
            }

            // backwards-compat stuff - to be removed in future
            if (!ranges[key]) {
                axis = coord == "x" ? xaxes[0] : yaxes[0];
                from = ranges[coord + "1"];
                to = ranges[coord + "2"];
            }

            // auto-reverse as an added bonus
            if (from != null && to != null && from > to) {
                var tmp = from;
                from = to;
                to = tmp;
            }

            return { from: from, to: to, axis: axis };
        }

        function drawBackground() {
            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);

            ctx.fillStyle = getColorOrGradient(options.grid.backgroundColor, plotHeight, 0, "rgba(255, 255, 255, 0)");
            ctx.fillRect(0, 0, plotWidth, plotHeight);
            ctx.restore();
        }

        function drawGrid() {
            var i, axes, bw, bc;

            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);

            // draw markings
            var markings = options.grid.markings;
            if (markings) {
                if ($.isFunction(markings)) {
                    axes = plot.getAxes();
                    // xmin etc. is backwards compatibility, to be
                    // removed in the future
                    axes.xmin = axes.xaxis.min;
                    axes.xmax = axes.xaxis.max;
                    axes.ymin = axes.yaxis.min;
                    axes.ymax = axes.yaxis.max;

                    markings = markings(axes);
                }

                for (i = 0; i < markings.length; ++i) {
                    var m = markings[i],
                        xrange = extractRange(m, "x"),
                        yrange = extractRange(m, "y");

                    // fill in missing
                    if (xrange.from == null)
                        xrange.from = xrange.axis.min;
                    if (xrange.to == null)
                        xrange.to = xrange.axis.max;
                    if (yrange.from == null)
                        yrange.from = yrange.axis.min;
                    if (yrange.to == null)
                        yrange.to = yrange.axis.max;

                    // clip
                    if (xrange.to < xrange.axis.min || xrange.from > xrange.axis.max ||
                        yrange.to < yrange.axis.min || yrange.from > yrange.axis.max)
                        continue;

                    xrange.from = Math.max(xrange.from, xrange.axis.min);
                    xrange.to = Math.min(xrange.to, xrange.axis.max);
                    yrange.from = Math.max(yrange.from, yrange.axis.min);
                    yrange.to = Math.min(yrange.to, yrange.axis.max);

                    var xequal = xrange.from === xrange.to,
                        yequal = yrange.from === yrange.to;

                    if (xequal && yequal) {
                        continue;
                    }

                    // then draw
                    xrange.from = Math.floor(xrange.axis.p2c(xrange.from));
                    xrange.to = Math.floor(xrange.axis.p2c(xrange.to));
                    yrange.from = Math.floor(yrange.axis.p2c(yrange.from));
                    yrange.to = Math.floor(yrange.axis.p2c(yrange.to));

                    if (xequal || yequal) {
                        var lineWidth = m.lineWidth || options.grid.markingsLineWidth,
                            subPixel = lineWidth % 2 ? 0.5 : 0;
                        ctx.beginPath();
                        ctx.strokeStyle = m.color || options.grid.markingsColor;
                        ctx.lineWidth = lineWidth;
                        if (xequal) {
                            ctx.moveTo(xrange.to + subPixel, yrange.from);
                            ctx.lineTo(xrange.to + subPixel, yrange.to);
                        } else {
                            ctx.moveTo(xrange.from, yrange.to + subPixel);
                            ctx.lineTo(xrange.to, yrange.to + subPixel);                            
                        }
                        ctx.stroke();
                    } else {
                        ctx.fillStyle = m.color || options.grid.markingsColor;
                        ctx.fillRect(xrange.from, yrange.to,
                                     xrange.to - xrange.from,
                                     yrange.from - yrange.to);
                    }
                }
            }

            // draw the ticks
            axes = allAxes();
            bw = options.grid.borderWidth;

            for (var j = 0; j < axes.length; ++j) {
                var axis = axes[j], box = axis.box,
                    t = axis.tickLength, x, y, xoff, yoff;
                if (!axis.show || axis.ticks.length == 0)
                    continue;

                ctx.lineWidth = 1;

                // find the edges
                if (axis.direction == "x") {
                    x = 0;
                    if (t == "full")
                        y = (axis.position == "top" ? 0 : plotHeight);
                    else
                        y = box.top - plotOffset.top + (axis.position == "top" ? box.height : 0);
                }
                else {
                    y = 0;
                    if (t == "full")
                        x = (axis.position == "left" ? 0 : plotWidth);
                    else
                        x = box.left - plotOffset.left + (axis.position == "left" ? box.width : 0);
                }

                // draw tick bar
                if (!axis.innermost) {
                    ctx.strokeStyle = axis.options.color;
                    ctx.beginPath();
                    xoff = yoff = 0;
                    if (axis.direction == "x")
                        xoff = plotWidth + 1;
                    else
                        yoff = plotHeight + 1;

                    if (ctx.lineWidth == 1) {
                        if (axis.direction == "x") {
                            y = Math.floor(y) + 0.5;
                        } else {
                            x = Math.floor(x) + 0.5;
                        }
                    }

                    ctx.moveTo(x, y);
                    ctx.lineTo(x + xoff, y + yoff);
                    ctx.stroke();
                }

                // draw ticks

                ctx.strokeStyle = axis.options.tickColor;

                ctx.beginPath();
                for (i = 0; i < axis.ticks.length; ++i) {
                    var v = axis.ticks[i].v;

                    xoff = yoff = 0;

                    if (isNaN(v) || v < axis.min || v > axis.max
                        // skip those lying on the axes if we got a border
                        || (t == "full"
                            && ((typeof bw == "object" && bw[axis.position] > 0) || bw > 0)
                            && (v == axis.min || v == axis.max)))
                        continue;

                    if (axis.direction == "x") {
                        x = axis.p2c(v);
                        yoff = t == "full" ? -plotHeight : t;

                        if (axis.position == "top")
                            yoff = -yoff;
                    }
                    else {
                        y = axis.p2c(v);
                        xoff = t == "full" ? -plotWidth : t;

                        if (axis.position == "left")
                            xoff = -xoff;
                    }

                    if (ctx.lineWidth == 1) {
                        if (axis.direction == "x")
                            x = Math.floor(x) + 0.5;
                        else
                            y = Math.floor(y) + 0.5;
                    }

                    ctx.moveTo(x, y);
                    ctx.lineTo(x + xoff, y + yoff);
                }

                ctx.stroke();
            }


            // draw border
            if (bw) {
                // If either borderWidth or borderColor is an object, then draw the border
                // line by line instead of as one rectangle
                bc = options.grid.borderColor;
                if(typeof bw == "object" || typeof bc == "object") {
                    if (typeof bw !== "object") {
                        bw = {top: bw, right: bw, bottom: bw, left: bw};
                    }
                    if (typeof bc !== "object") {
                        bc = {top: bc, right: bc, bottom: bc, left: bc};
                    }

                    if (bw.top > 0) {
                        ctx.strokeStyle = bc.top;
                        ctx.lineWidth = bw.top;
                        ctx.beginPath();
                        ctx.moveTo(0 - bw.left, 0 - bw.top/2);
                        ctx.lineTo(plotWidth, 0 - bw.top/2);
                        ctx.stroke();
                    }

                    if (bw.right > 0) {
                        ctx.strokeStyle = bc.right;
                        ctx.lineWidth = bw.right;
                        ctx.beginPath();
                        ctx.moveTo(plotWidth + bw.right / 2, 0 - bw.top);
                        ctx.lineTo(plotWidth + bw.right / 2, plotHeight);
                        ctx.stroke();
                    }

                    if (bw.bottom > 0) {
                        ctx.strokeStyle = bc.bottom;
                        ctx.lineWidth = bw.bottom;
                        ctx.beginPath();
                        ctx.moveTo(plotWidth + bw.right, plotHeight + bw.bottom / 2);
                        ctx.lineTo(0, plotHeight + bw.bottom / 2);
                        ctx.stroke();
                    }

                    if (bw.left > 0) {
                        ctx.strokeStyle = bc.left;
                        ctx.lineWidth = bw.left;
                        ctx.beginPath();
                        ctx.moveTo(0 - bw.left/2, plotHeight + bw.bottom);
                        ctx.lineTo(0- bw.left/2, 0);
                        ctx.stroke();
                    }
                }
                else {
                    ctx.lineWidth = bw;
                    ctx.strokeStyle = options.grid.borderColor;
                    ctx.strokeRect(-bw/2, -bw/2, plotWidth + bw, plotHeight + bw);
                }
            }

            ctx.restore();
        }

        function drawAxisLabels() {

            $.each(allAxes(), function (_, axis) {
                var box = axis.box,
                    legacyStyles = axis.direction + "Axis " + axis.direction + axis.n + "Axis",
                    layer = "flot-" + axis.direction + "-axis flot-" + axis.direction + axis.n + "-axis " + legacyStyles,
                    font = axis.options.font || "flot-tick-label tickLabel",
                    tick, x, y, halign, valign;

                // Remove text before checking for axis.show and ticks.length;
                // otherwise plugins, like flot-tickrotor, that draw their own
                // tick labels will end up with both theirs and the defaults.

                surface.removeText(layer);

                if (!axis.show || axis.ticks.length == 0)
                    return;

                for (var i = 0; i < axis.ticks.length; ++i) {

                    tick = axis.ticks[i];
                    if (!tick.label || tick.v < axis.min || tick.v > axis.max)
                        continue;

                    if (axis.direction == "x") {
                        halign = "center";
                        x = plotOffset.left + axis.p2c(tick.v);
                        if (axis.position == "bottom") {
                            y = box.top + box.padding;
                        } else {
                            y = box.top + box.height - box.padding;
                            valign = "bottom";
                        }
                    } else {
                        valign = "middle";
                        y = plotOffset.top + axis.p2c(tick.v);
                        if (axis.position == "left") {
                            x = box.left + box.width - box.padding;
                            halign = "right";
                        } else {
                            x = box.left + box.padding;
                        }
                    }

                    surface.addText(layer, x, y, tick.label, font, null, null, halign, valign);
                }
            });
        }

        function drawSeries(series) {
            if (series.lines.show)
                drawSeriesLines(series);
            if (series.bars.show)
                drawSeriesBars(series);
            if (series.points.show)
                drawSeriesPoints(series);
        }

        function drawSeriesLines(series) {
            function plotLine(datapoints, xoffset, yoffset, axisx, axisy) {
                var points = datapoints.points,
                    ps = datapoints.pointsize,
                    prevx = null, prevy = null;

                ctx.beginPath();
                for (var i = ps; i < points.length; i += ps) {
                    var x1 = points[i - ps], y1 = points[i - ps + 1],
                        x2 = points[i], y2 = points[i + 1];

                    if (x1 == null || x2 == null)
                        continue;

                    // clip with ymin
                    if (y1 <= y2 && y1 < axisy.min) {
                        if (y2 < axisy.min)
                            continue;   // line segment is outside
                        // compute new intersection point
                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y1 = axisy.min;
                    }
                    else if (y2 <= y1 && y2 < axisy.min) {
                        if (y1 < axisy.min)
                            continue;
                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y2 = axisy.min;
                    }

                    // clip with ymax
                    if (y1 >= y2 && y1 > axisy.max) {
                        if (y2 > axisy.max)
                            continue;
                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y1 = axisy.max;
                    }
                    else if (y2 >= y1 && y2 > axisy.max) {
                        if (y1 > axisy.max)
                            continue;
                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y2 = axisy.max;
                    }

                    // clip with xmin
                    if (x1 <= x2 && x1 < axisx.min) {
                        if (x2 < axisx.min)
                            continue;
                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x1 = axisx.min;
                    }
                    else if (x2 <= x1 && x2 < axisx.min) {
                        if (x1 < axisx.min)
                            continue;
                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x2 = axisx.min;
                    }

                    // clip with xmax
                    if (x1 >= x2 && x1 > axisx.max) {
                        if (x2 > axisx.max)
                            continue;
                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x1 = axisx.max;
                    }
                    else if (x2 >= x1 && x2 > axisx.max) {
                        if (x1 > axisx.max)
                            continue;
                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x2 = axisx.max;
                    }

                    if (x1 != prevx || y1 != prevy)
                        ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);

                    prevx = x2;
                    prevy = y2;
                    ctx.lineTo(axisx.p2c(x2) + xoffset, axisy.p2c(y2) + yoffset);
                }
                ctx.stroke();
            }

            function plotLineArea(datapoints, axisx, axisy) {
                var points = datapoints.points,
                    ps = datapoints.pointsize,
                    bottom = Math.min(Math.max(0, axisy.min), axisy.max),
                    i = 0, top, areaOpen = false,
                    ypos = 1, segmentStart = 0, segmentEnd = 0;

                // we process each segment in two turns, first forward
                // direction to sketch out top, then once we hit the
                // end we go backwards to sketch the bottom
                while (true) {
                    if (ps > 0 && i > points.length + ps)
                        break;

                    i += ps; // ps is negative if going backwards

                    var x1 = points[i - ps],
                        y1 = points[i - ps + ypos],
                        x2 = points[i], y2 = points[i + ypos];

                    if (areaOpen) {
                        if (ps > 0 && x1 != null && x2 == null) {
                            // at turning point
                            segmentEnd = i;
                            ps = -ps;
                            ypos = 2;
                            continue;
                        }

                        if (ps < 0 && i == segmentStart + ps) {
                            // done with the reverse sweep
                            ctx.fill();
                            areaOpen = false;
                            ps = -ps;
                            ypos = 1;
                            i = segmentStart = segmentEnd + ps;
                            continue;
                        }
                    }

                    if (x1 == null || x2 == null)
                        continue;

                    // clip x values

                    // clip with xmin
                    if (x1 <= x2 && x1 < axisx.min) {
                        if (x2 < axisx.min)
                            continue;
                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x1 = axisx.min;
                    }
                    else if (x2 <= x1 && x2 < axisx.min) {
                        if (x1 < axisx.min)
                            continue;
                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x2 = axisx.min;
                    }

                    // clip with xmax
                    if (x1 >= x2 && x1 > axisx.max) {
                        if (x2 > axisx.max)
                            continue;
                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x1 = axisx.max;
                    }
                    else if (x2 >= x1 && x2 > axisx.max) {
                        if (x1 > axisx.max)
                            continue;
                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x2 = axisx.max;
                    }

                    if (!areaOpen) {
                        // open area
                        ctx.beginPath();
                        ctx.moveTo(axisx.p2c(x1), axisy.p2c(bottom));
                        areaOpen = true;
                    }

                    // now first check the case where both is outside
                    if (y1 >= axisy.max && y2 >= axisy.max) {
                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.max));
                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.max));
                        continue;
                    }
                    else if (y1 <= axisy.min && y2 <= axisy.min) {
                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.min));
                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.min));
                        continue;
                    }

                    // else it's a bit more complicated, there might
                    // be a flat maxed out rectangle first, then a
                    // triangular cutout or reverse; to find these
                    // keep track of the current x values
                    var x1old = x1, x2old = x2;

                    // clip the y values, without shortcutting, we
                    // go through all cases in turn

                    // clip with ymin
                    if (y1 <= y2 && y1 < axisy.min && y2 >= axisy.min) {
                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y1 = axisy.min;
                    }
                    else if (y2 <= y1 && y2 < axisy.min && y1 >= axisy.min) {
                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y2 = axisy.min;
                    }

                    // clip with ymax
                    if (y1 >= y2 && y1 > axisy.max && y2 <= axisy.max) {
                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y1 = axisy.max;
                    }
                    else if (y2 >= y1 && y2 > axisy.max && y1 <= axisy.max) {
                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y2 = axisy.max;
                    }

                    // if the x value was changed we got a rectangle
                    // to fill
                    if (x1 != x1old) {
                        ctx.lineTo(axisx.p2c(x1old), axisy.p2c(y1));
                        // it goes to (x1, y1), but we fill that below
                    }

                    // fill triangular section, this sometimes result
                    // in redundant points if (x1, y1) hasn't changed
                    // from previous line to, but we just ignore that
                    ctx.lineTo(axisx.p2c(x1), axisy.p2c(y1));
                    ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));

                    // fill the other rectangle if it's there
                    if (x2 != x2old) {
                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));
                        ctx.lineTo(axisx.p2c(x2old), axisy.p2c(y2));
                    }
                }
            }

            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);
            ctx.lineJoin = "round";

            var lw = series.lines.lineWidth,
                sw = series.shadowSize;
            // FIXME: consider another form of shadow when filling is turned on
            if (lw > 0 && sw > 0) {
                // draw shadow as a thick and thin line with transparency
                ctx.lineWidth = sw;
                ctx.strokeStyle = "rgba(0,0,0,0.1)";
                // position shadow at angle from the mid of line
                var angle = Math.PI/18;
                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/2), Math.cos(angle) * (lw/2 + sw/2), series.xaxis, series.yaxis);
                ctx.lineWidth = sw/2;
                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/4), Math.cos(angle) * (lw/2 + sw/4), series.xaxis, series.yaxis);
            }

            ctx.lineWidth = lw;
            ctx.strokeStyle = series.color;
            var fillStyle = getFillStyle(series.lines, series.color, 0, plotHeight);
            if (fillStyle) {
                ctx.fillStyle = fillStyle;
                plotLineArea(series.datapoints, series.xaxis, series.yaxis);
            }

            if (lw > 0)
                plotLine(series.datapoints, 0, 0, series.xaxis, series.yaxis);
            ctx.restore();
        }

        function drawSeriesPoints(series) {
            function plotPoints(datapoints, radius, fillStyle, offset, shadow, axisx, axisy, symbol) {
                var points = datapoints.points, ps = datapoints.pointsize;

                for (var i = 0; i < points.length; i += ps) {
                    var x = points[i], y = points[i + 1];
                    if (x == null || x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)
                        continue;

                    ctx.beginPath();
                    x = axisx.p2c(x);
                    y = axisy.p2c(y) + offset;
                    if (symbol == "circle")
                        ctx.arc(x, y, radius, 0, shadow ? Math.PI : Math.PI * 2, false);
                    else
                        symbol(ctx, x, y, radius, shadow);
                    ctx.closePath();

                    if (fillStyle) {
                        ctx.fillStyle = fillStyle;
                        ctx.fill();
                    }
                    ctx.stroke();
                }
            }

            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);

            var lw = series.points.lineWidth,
                sw = series.shadowSize,
                radius = series.points.radius,
                symbol = series.points.symbol;

            // If the user sets the line width to 0, we change it to a very 
            // small value. A line width of 0 seems to force the default of 1.
            // Doing the conditional here allows the shadow setting to still be 
            // optional even with a lineWidth of 0.

            if( lw == 0 )
                lw = 0.0001;

            if (lw > 0 && sw > 0) {
                // draw shadow in two steps
                var w = sw / 2;
                ctx.lineWidth = w;
                ctx.strokeStyle = "rgba(0,0,0,0.1)";
                plotPoints(series.datapoints, radius, null, w + w/2, true,
                           series.xaxis, series.yaxis, symbol);

                ctx.strokeStyle = "rgba(0,0,0,0.2)";
                plotPoints(series.datapoints, radius, null, w/2, true,
                           series.xaxis, series.yaxis, symbol);
            }

            ctx.lineWidth = lw;
            ctx.strokeStyle = series.color;
            plotPoints(series.datapoints, radius,
                       getFillStyle(series.points, series.color), 0, false,
                       series.xaxis, series.yaxis, symbol);
            ctx.restore();
        }

        function drawBar(x, y, b, barLeft, barRight, fillStyleCallback, axisx, axisy, c, horizontal, lineWidth) {
            var left, right, bottom, top,
                drawLeft, drawRight, drawTop, drawBottom,
                tmp;

            // in horizontal mode, we start the bar from the left
            // instead of from the bottom so it appears to be
            // horizontal rather than vertical
            if (horizontal) {
                drawBottom = drawRight = drawTop = true;
                drawLeft = false;
                left = b;
                right = x;
                top = y + barLeft;
                bottom = y + barRight;

                // account for negative bars
                if (right < left) {
                    tmp = right;
                    right = left;
                    left = tmp;
                    drawLeft = true;
                    drawRight = false;
                }
            }
            else {
                drawLeft = drawRight = drawTop = true;
                drawBottom = false;
                left = x + barLeft;
                right = x + barRight;
                bottom = b;
                top = y;

                // account for negative bars
                if (top < bottom) {
                    tmp = top;
                    top = bottom;
                    bottom = tmp;
                    drawBottom = true;
                    drawTop = false;
                }
            }

            // clip
            if (right < axisx.min || left > axisx.max ||
                top < axisy.min || bottom > axisy.max)
                return;

            if (left < axisx.min) {
                left = axisx.min;
                drawLeft = false;
            }

            if (right > axisx.max) {
                right = axisx.max;
                drawRight = false;
            }

            if (bottom < axisy.min) {
                bottom = axisy.min;
                drawBottom = false;
            }

            if (top > axisy.max) {
                top = axisy.max;
                drawTop = false;
            }

            left = axisx.p2c(left);
            bottom = axisy.p2c(bottom);
            right = axisx.p2c(right);
            top = axisy.p2c(top);

            // fill the bar
            if (fillStyleCallback) {
                c.fillStyle = fillStyleCallback(bottom, top);
                c.fillRect(left, top, right - left, bottom - top)
            }

            // draw outline
            if (lineWidth > 0 && (drawLeft || drawRight || drawTop || drawBottom)) {
                c.beginPath();

                // FIXME: inline moveTo is buggy with excanvas
                c.moveTo(left, bottom);
                if (drawLeft)
                    c.lineTo(left, top);
                else
                    c.moveTo(left, top);
                if (drawTop)
                    c.lineTo(right, top);
                else
                    c.moveTo(right, top);
                if (drawRight)
                    c.lineTo(right, bottom);
                else
                    c.moveTo(right, bottom);
                if (drawBottom)
                    c.lineTo(left, bottom);
                else
                    c.moveTo(left, bottom);
                c.stroke();
            }
        }

        function drawSeriesBars(series) {
            function plotBars(datapoints, barLeft, barRight, fillStyleCallback, axisx, axisy) {
                var points = datapoints.points, ps = datapoints.pointsize;

                for (var i = 0; i < points.length; i += ps) {
                    if (points[i] == null)
                        continue;
                    drawBar(points[i], points[i + 1], points[i + 2], barLeft, barRight, fillStyleCallback, axisx, axisy, ctx, series.bars.horizontal, series.bars.lineWidth);
                }
            }

            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);

            // FIXME: figure out a way to add shadows (for instance along the right edge)
            ctx.lineWidth = series.bars.lineWidth;
            ctx.strokeStyle = series.color;

            var barLeft;

            switch (series.bars.align) {
                case "left":
                    barLeft = 0;
                    break;
                case "right":
                    barLeft = -series.bars.barWidth;
                    break;
                default:
                    barLeft = -series.bars.barWidth / 2;
            }

            var fillStyleCallback = series.bars.fill ? function (bottom, top) { return getFillStyle(series.bars, series.color, bottom, top); } : null;
            plotBars(series.datapoints, barLeft, barLeft + series.bars.barWidth, fillStyleCallback, series.xaxis, series.yaxis);
            ctx.restore();
        }

        function getFillStyle(filloptions, seriesColor, bottom, top) {
            var fill = filloptions.fill;
            if (!fill)
                return null;

            if (filloptions.fillColor)
                return getColorOrGradient(filloptions.fillColor, bottom, top, seriesColor);

            var c = $.color.parse(seriesColor);
            c.a = typeof fill == "number" ? fill : 0.4;
            c.normalize();
            return c.toString();
        }

        function insertLegend() {

            if (options.legend.container != null) {
                $(options.legend.container).html("");
            } else {
                placeholder.find(".legend").remove();
            }

            if (!options.legend.show) {
                return;
            }

            var fragments = [], entries = [], rowStarted = false,
                lf = options.legend.labelFormatter, s, label;

            // Build a list of legend entries, with each having a label and a color

            for (var i = 0; i < series.length; ++i) {
                s = series[i];
                if (s.label) {
                    label = lf ? lf(s.label, s) : s.label;
                    if (label) {
                        entries.push({
                            label: label,
                            color: s.color
                        });
                    }
                }
            }

            // Sort the legend using either the default or a custom comparator

            if (options.legend.sorted) {
                if ($.isFunction(options.legend.sorted)) {
                    entries.sort(options.legend.sorted);
                } else if (options.legend.sorted == "reverse") {
                	entries.reverse();
                } else {
                    var ascending = options.legend.sorted != "descending";
                    entries.sort(function(a, b) {
                        return a.label == b.label ? 0 : (
                            (a.label < b.label) != ascending ? 1 : -1   // Logical XOR
                        );
                    });
                }
            }

            // Generate markup for the list of entries, in their final order

            for (var i = 0; i < entries.length; ++i) {

                var entry = entries[i];

                if (i % options.legend.noColumns == 0) {
                    if (rowStarted)
                        fragments.push('</tr>');
                    fragments.push('<tr>');
                    rowStarted = true;
                }

                fragments.push(
                    '<td class="legendColorBox"><div style="border:1px solid ' + options.legend.labelBoxBorderColor + ';padding:1px"><div style="width:4px;height:0;border:5px solid ' + entry.color + ';overflow:hidden"></div></div></td>' +
                    '<td class="legendLabel">' + entry.label + '</td>'
                );
            }

            if (rowStarted)
                fragments.push('</tr>');

            if (fragments.length == 0)
                return;

            var table = '<table style="font-size:smaller;color:' + options.grid.color + '">' + fragments.join("") + '</table>';
            if (options.legend.container != null)
                $(options.legend.container).html(table);
            else {
                var pos = "",
                    p = options.legend.position,
                    m = options.legend.margin;
                if (m[0] == null)
                    m = [m, m];
                if (p.charAt(0) == "n")
                    pos += 'top:' + (m[1] + plotOffset.top) + 'px;';
                else if (p.charAt(0) == "s")
                    pos += 'bottom:' + (m[1] + plotOffset.bottom) + 'px;';
                if (p.charAt(1) == "e")
                    pos += 'right:' + (m[0] + plotOffset.right) + 'px;';
                else if (p.charAt(1) == "w")
                    pos += 'left:' + (m[0] + plotOffset.left) + 'px;';
                var legend = $('<div class="legend">' + table.replace('style="', 'style="position:absolute;' + pos +';') + '</div>').appendTo(placeholder);
                if (options.legend.backgroundOpacity != 0.0) {
                    // put in the transparent background
                    // separately to avoid blended labels and
                    // label boxes
                    var c = options.legend.backgroundColor;
                    if (c == null) {
                        c = options.grid.backgroundColor;
                        if (c && typeof c == "string")
                            c = $.color.parse(c);
                        else
                            c = $.color.extract(legend, 'background-color');
                        c.a = 1;
                        c = c.toString();
                    }
                    var div = legend.children();
                    $('<div style="position:absolute;width:' + div.width() + 'px;height:' + div.height() + 'px;' + pos +'background-color:' + c + ';"> </div>').prependTo(legend).css('opacity', options.legend.backgroundOpacity);
                }
            }
        }


        // interactive features

        var highlights = [],
            redrawTimeout = null;

        // returns the data item the mouse is over, or null if none is found
        function findNearbyItem(mouseX, mouseY, seriesFilter) {
            var maxDistance = options.grid.mouseActiveRadius,
                smallestDistance = maxDistance * maxDistance + 1,
                item = null, foundPoint = false, i, j, ps;

            for (i = series.length - 1; i >= 0; --i) {
                if (!seriesFilter(series[i]))
                    continue;

                var s = series[i],
                    axisx = s.xaxis,
                    axisy = s.yaxis,
                    points = s.datapoints.points,
                    mx = axisx.c2p(mouseX), // precompute some stuff to make the loop faster
                    my = axisy.c2p(mouseY),
                    maxx = maxDistance / axisx.scale,
                    maxy = maxDistance / axisy.scale;

                ps = s.datapoints.pointsize;
                // with inverse transforms, we can't use the maxx/maxy
                // optimization, sadly
                if (axisx.options.inverseTransform)
                    maxx = Number.MAX_VALUE;
                if (axisy.options.inverseTransform)
                    maxy = Number.MAX_VALUE;

                if (s.lines.show || s.points.show) {
                    for (j = 0; j < points.length; j += ps) {
                        var x = points[j], y = points[j + 1];
                        if (x == null)
                            continue;

                        // For points and lines, the cursor must be within a
                        // certain distance to the data point
                        if (x - mx > maxx || x - mx < -maxx ||
                            y - my > maxy || y - my < -maxy)
                            continue;

                        // We have to calculate distances in pixels, not in
                        // data units, because the scales of the axes may be different
                        var dx = Math.abs(axisx.p2c(x) - mouseX),
                            dy = Math.abs(axisy.p2c(y) - mouseY),
                            dist = dx * dx + dy * dy; // we save the sqrt

                        // use <= to ensure last point takes precedence
                        // (last generally means on top of)
                        if (dist < smallestDistance) {
                            smallestDistance = dist;
                            item = [i, j / ps];
                        }
                    }
                }

                if (s.bars.show && !item) { // no other point can be nearby

                    var barLeft, barRight;

                    switch (s.bars.align) {
                        case "left":
                            barLeft = 0;
                            break;
                        case "right":
                            barLeft = -s.bars.barWidth;
                            break;
                        default:
                            barLeft = -s.bars.barWidth / 2;
                    }

                    barRight = barLeft + s.bars.barWidth;

                    for (j = 0; j < points.length; j += ps) {
                        var x = points[j], y = points[j + 1], b = points[j + 2];
                        if (x == null)
                            continue;

                        // for a bar graph, the cursor must be inside the bar
                        if (series[i].bars.horizontal ?
                            (mx <= Math.max(b, x) && mx >= Math.min(b, x) &&
                             my >= y + barLeft && my <= y + barRight) :
                            (mx >= x + barLeft && mx <= x + barRight &&
                             my >= Math.min(b, y) && my <= Math.max(b, y)))
                                item = [i, j / ps];
                    }
                }
            }

            if (item) {
                i = item[0];
                j = item[1];
                ps = series[i].datapoints.pointsize;

                return { datapoint: series[i].datapoints.points.slice(j * ps, (j + 1) * ps),
                         dataIndex: j,
                         series: series[i],
                         seriesIndex: i };
            }

            return null;
        }

        function onMouseMove(e) {
            if (options.grid.hoverable)
                triggerClickHoverEvent("plothover", e,
                                       function (s) { return s["hoverable"] != false; });
        }

        function onMouseLeave(e) {
            if (options.grid.hoverable)
                triggerClickHoverEvent("plothover", e,
                                       function (s) { return false; });
        }

        function onClick(e) {
            triggerClickHoverEvent("plotclick", e,
                                   function (s) { return s["clickable"] != false; });
        }

        // trigger click or hover event (they send the same parameters
        // so we share their code)
        function triggerClickHoverEvent(eventname, event, seriesFilter) {
            var offset = eventHolder.offset(),
                canvasX = event.pageX - offset.left - plotOffset.left,
                canvasY = event.pageY - offset.top - plotOffset.top,
            pos = canvasToAxisCoords({ left: canvasX, top: canvasY });

            pos.pageX = event.pageX;
            pos.pageY = event.pageY;

            var item = findNearbyItem(canvasX, canvasY, seriesFilter);

            if (item) {
                // fill in mouse pos for any listeners out there
                item.pageX = parseInt(item.series.xaxis.p2c(item.datapoint[0]) + offset.left + plotOffset.left, 10);
                item.pageY = parseInt(item.series.yaxis.p2c(item.datapoint[1]) + offset.top + plotOffset.top, 10);
            }

            if (options.grid.autoHighlight) {
                // clear auto-highlights
                for (var i = 0; i < highlights.length; ++i) {
                    var h = highlights[i];
                    if (h.auto == eventname &&
                        !(item && h.series == item.series &&
                          h.point[0] == item.datapoint[0] &&
                          h.point[1] == item.datapoint[1]))
                        unhighlight(h.series, h.point);
                }

                if (item)
                    highlight(item.series, item.datapoint, eventname);
            }

            placeholder.trigger(eventname, [ pos, item ]);
        }

        function triggerRedrawOverlay() {
            var t = options.interaction.redrawOverlayInterval;
            if (t == -1) {      // skip event queue
                drawOverlay();
                return;
            }

            if (!redrawTimeout)
                redrawTimeout = setTimeout(drawOverlay, t);
        }

        function drawOverlay() {
            redrawTimeout = null;

            // draw highlights
            octx.save();
            overlay.clear();
            octx.translate(plotOffset.left, plotOffset.top);

            var i, hi;
            for (i = 0; i < highlights.length; ++i) {
                hi = highlights[i];

                if (hi.series.bars.show)
                    drawBarHighlight(hi.series, hi.point);
                else
                    drawPointHighlight(hi.series, hi.point);
            }
            octx.restore();

            executeHooks(hooks.drawOverlay, [octx]);
        }

        function highlight(s, point, auto) {
            if (typeof s == "number")
                s = series[s];

            if (typeof point == "number") {
                var ps = s.datapoints.pointsize;
                point = s.datapoints.points.slice(ps * point, ps * (point + 1));
            }

            var i = indexOfHighlight(s, point);
            if (i == -1) {
                highlights.push({ series: s, point: point, auto: auto });

                triggerRedrawOverlay();
            }
            else if (!auto)
                highlights[i].auto = false;
        }

        function unhighlight(s, point) {
            if (s == null && point == null) {
                highlights = [];
                triggerRedrawOverlay();
                return;
            }

            if (typeof s == "number")
                s = series[s];

            if (typeof point == "number") {
                var ps = s.datapoints.pointsize;
                point = s.datapoints.points.slice(ps * point, ps * (point + 1));
            }

            var i = indexOfHighlight(s, point);
            if (i != -1) {
                highlights.splice(i, 1);

                triggerRedrawOverlay();
            }
        }

        function indexOfHighlight(s, p) {
            for (var i = 0; i < highlights.length; ++i) {
                var h = highlights[i];
                if (h.series == s && h.point[0] == p[0]
                    && h.point[1] == p[1])
                    return i;
            }
            return -1;
        }

        function drawPointHighlight(series, point) {
            var x = point[0], y = point[1],
                axisx = series.xaxis, axisy = series.yaxis,
                highlightColor = (typeof series.highlightColor === "string") ? series.highlightColor : $.color.parse(series.color).scale('a', 0.5).toString();

            if (x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)
                return;

            var pointRadius = series.points.radius + series.points.lineWidth / 2;
            octx.lineWidth = pointRadius;
            octx.strokeStyle = highlightColor;
            var radius = 1.5 * pointRadius;
            x = axisx.p2c(x);
            y = axisy.p2c(y);

            octx.beginPath();
            if (series.points.symbol == "circle")
                octx.arc(x, y, radius, 0, 2 * Math.PI, false);
            else
                series.points.symbol(octx, x, y, radius, false);
            octx.closePath();
            octx.stroke();
        }

        function drawBarHighlight(series, point) {
            var highlightColor = (typeof series.highlightColor === "string") ? series.highlightColor : $.color.parse(series.color).scale('a', 0.5).toString(),
                fillStyle = highlightColor,
                barLeft;

            switch (series.bars.align) {
                case "left":
                    barLeft = 0;
                    break;
                case "right":
                    barLeft = -series.bars.barWidth;
                    break;
                default:
                    barLeft = -series.bars.barWidth / 2;
            }

            octx.lineWidth = series.bars.lineWidth;
            octx.strokeStyle = highlightColor;

            drawBar(point[0], point[1], point[2] || 0, barLeft, barLeft + series.bars.barWidth,
                    function () { return fillStyle; }, series.xaxis, series.yaxis, octx, series.bars.horizontal, series.bars.lineWidth);
        }

        function getColorOrGradient(spec, bottom, top, defaultColor) {
            if (typeof spec == "string")
                return spec;
            else {
                // assume this is a gradient spec; IE currently only
                // supports a simple vertical gradient properly, so that's
                // what we support too
                var gradient = ctx.createLinearGradient(0, top, 0, bottom);

                for (var i = 0, l = spec.colors.length; i < l; ++i) {
                    var c = spec.colors[i];
                    if (typeof c != "string") {
                        var co = $.color.parse(defaultColor);
                        if (c.brightness != null)
                            co = co.scale('rgb', c.brightness);
                        if (c.opacity != null)
                            co.a *= c.opacity;
                        c = co.toString();
                    }
                    gradient.addColorStop(i / (l - 1), c);
                }

                return gradient;
            }
        }
    }

    // Add the plot function to the top level of the jQuery object

    $.plot = function(placeholder, data, options) {
        //var t0 = new Date();
        var plot = new Plot($(placeholder), data, options, $.plot.plugins);
        //(window.console ? console.log : alert)("time used (msecs): " + ((new Date()).getTime() - t0.getTime()));
        return plot;
    };

    $.plot.version = "0.8.3";

    $.plot.plugins = [];

    // Also add the plot function as a chainable property

    $.fn.plot = function(data, options) {
        return this.each(function() {
            $.plot(this, data, options);
        });
    };

    // round to nearby lower multiple of base
    function floorInBase(n, base) {
        return base * Math.floor(n / base);
    }

})(jQuery);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ },

/***/ "./node_modules/jquery-flot/jquery.flot.time.js":
/***/ function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {/* Pretty handling of time axes.

Copyright (c) 2007-2014 IOLA and Ole Laursen.
Licensed under the MIT license.

Set axis.mode to "time" to enable. See the section "Time series data" in
API.txt for details.

*/

(function($) {

	var options = {
		xaxis: {
			timezone: null,		// "browser" for local to the client or timezone for timezone-js
			timeformat: null,	// format string to use
			twelveHourClock: false,	// 12 or 24 time in time mode
			monthNames: null	// list of names of months
		}
	};

	// round to nearby lower multiple of base

	function floorInBase(n, base) {
		return base * Math.floor(n / base);
	}

	// Returns a string with the date d formatted according to fmt.
	// A subset of the Open Group's strftime format is supported.

	function formatDate(d, fmt, monthNames, dayNames) {

		if (typeof d.strftime == "function") {
			return d.strftime(fmt);
		}

		var leftPad = function(n, pad) {
			n = "" + n;
			pad = "" + (pad == null ? "0" : pad);
			return n.length == 1 ? pad + n : n;
		};

		var r = [];
		var escape = false;
		var hours = d.getHours();
		var isAM = hours < 12;

		if (monthNames == null) {
			monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
		}

		if (dayNames == null) {
			dayNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
		}

		var hours12;

		if (hours > 12) {
			hours12 = hours - 12;
		} else if (hours == 0) {
			hours12 = 12;
		} else {
			hours12 = hours;
		}

		for (var i = 0; i < fmt.length; ++i) {

			var c = fmt.charAt(i);

			if (escape) {
				switch (c) {
					case 'a': c = "" + dayNames[d.getDay()]; break;
					case 'b': c = "" + monthNames[d.getMonth()]; break;
					case 'd': c = leftPad(d.getDate()); break;
					case 'e': c = leftPad(d.getDate(), " "); break;
					case 'h':	// For back-compat with 0.7; remove in 1.0
					case 'H': c = leftPad(hours); break;
					case 'I': c = leftPad(hours12); break;
					case 'l': c = leftPad(hours12, " "); break;
					case 'm': c = leftPad(d.getMonth() + 1); break;
					case 'M': c = leftPad(d.getMinutes()); break;
					// quarters not in Open Group's strftime specification
					case 'q':
						c = "" + (Math.floor(d.getMonth() / 3) + 1); break;
					case 'S': c = leftPad(d.getSeconds()); break;
					case 'y': c = leftPad(d.getFullYear() % 100); break;
					case 'Y': c = "" + d.getFullYear(); break;
					case 'p': c = (isAM) ? ("" + "am") : ("" + "pm"); break;
					case 'P': c = (isAM) ? ("" + "AM") : ("" + "PM"); break;
					case 'w': c = "" + d.getDay(); break;
				}
				r.push(c);
				escape = false;
			} else {
				if (c == "%") {
					escape = true;
				} else {
					r.push(c);
				}
			}
		}

		return r.join("");
	}

	// To have a consistent view of time-based data independent of which time
	// zone the client happens to be in we need a date-like object independent
	// of time zones.  This is done through a wrapper that only calls the UTC
	// versions of the accessor methods.

	function makeUtcWrapper(d) {

		function addProxyMethod(sourceObj, sourceMethod, targetObj, targetMethod) {
			sourceObj[sourceMethod] = function() {
				return targetObj[targetMethod].apply(targetObj, arguments);
			};
		};

		var utc = {
			date: d
		};

		// support strftime, if found

		if (d.strftime != undefined) {
			addProxyMethod(utc, "strftime", d, "strftime");
		}

		addProxyMethod(utc, "getTime", d, "getTime");
		addProxyMethod(utc, "setTime", d, "setTime");

		var props = ["Date", "Day", "FullYear", "Hours", "Milliseconds", "Minutes", "Month", "Seconds"];

		for (var p = 0; p < props.length; p++) {
			addProxyMethod(utc, "get" + props[p], d, "getUTC" + props[p]);
			addProxyMethod(utc, "set" + props[p], d, "setUTC" + props[p]);
		}

		return utc;
	};

	// select time zone strategy.  This returns a date-like object tied to the
	// desired timezone

	function dateGenerator(ts, opts) {
		if (opts.timezone == "browser") {
			return new Date(ts);
		} else if (!opts.timezone || opts.timezone == "utc") {
			return makeUtcWrapper(new Date(ts));
		} else if (typeof timezoneJS != "undefined" && typeof timezoneJS.Date != "undefined") {
			var d = new timezoneJS.Date();
			// timezone-js is fickle, so be sure to set the time zone before
			// setting the time.
			d.setTimezone(opts.timezone);
			d.setTime(ts);
			return d;
		} else {
			return makeUtcWrapper(new Date(ts));
		}
	}
	
	// map of app. size of time units in milliseconds

	var timeUnitSize = {
		"second": 1000,
		"minute": 60 * 1000,
		"hour": 60 * 60 * 1000,
		"day": 24 * 60 * 60 * 1000,
		"month": 30 * 24 * 60 * 60 * 1000,
		"quarter": 3 * 30 * 24 * 60 * 60 * 1000,
		"year": 365.2425 * 24 * 60 * 60 * 1000
	};

	// the allowed tick sizes, after 1 year we use
	// an integer algorithm

	var baseSpec = [
		[1, "second"], [2, "second"], [5, "second"], [10, "second"],
		[30, "second"], 
		[1, "minute"], [2, "minute"], [5, "minute"], [10, "minute"],
		[30, "minute"], 
		[1, "hour"], [2, "hour"], [4, "hour"],
		[8, "hour"], [12, "hour"],
		[1, "day"], [2, "day"], [3, "day"],
		[0.25, "month"], [0.5, "month"], [1, "month"],
		[2, "month"]
	];

	// we don't know which variant(s) we'll need yet, but generating both is
	// cheap

	var specMonths = baseSpec.concat([[3, "month"], [6, "month"],
		[1, "year"]]);
	var specQuarters = baseSpec.concat([[1, "quarter"], [2, "quarter"],
		[1, "year"]]);

	function init(plot) {
		plot.hooks.processOptions.push(function (plot, options) {
			$.each(plot.getAxes(), function(axisName, axis) {

				var opts = axis.options;

				if (opts.mode == "time") {
					axis.tickGenerator = function(axis) {

						var ticks = [];
						var d = dateGenerator(axis.min, opts);
						var minSize = 0;

						// make quarter use a possibility if quarters are
						// mentioned in either of these options

						var spec = (opts.tickSize && opts.tickSize[1] ===
							"quarter") ||
							(opts.minTickSize && opts.minTickSize[1] ===
							"quarter") ? specQuarters : specMonths;

						if (opts.minTickSize != null) {
							if (typeof opts.tickSize == "number") {
								minSize = opts.tickSize;
							} else {
								minSize = opts.minTickSize[0] * timeUnitSize[opts.minTickSize[1]];
							}
						}

						for (var i = 0; i < spec.length - 1; ++i) {
							if (axis.delta < (spec[i][0] * timeUnitSize[spec[i][1]]
											  + spec[i + 1][0] * timeUnitSize[spec[i + 1][1]]) / 2
								&& spec[i][0] * timeUnitSize[spec[i][1]] >= minSize) {
								break;
							}
						}

						var size = spec[i][0];
						var unit = spec[i][1];

						// special-case the possibility of several years

						if (unit == "year") {

							// if given a minTickSize in years, just use it,
							// ensuring that it's an integer

							if (opts.minTickSize != null && opts.minTickSize[1] == "year") {
								size = Math.floor(opts.minTickSize[0]);
							} else {

								var magn = Math.pow(10, Math.floor(Math.log(axis.delta / timeUnitSize.year) / Math.LN10));
								var norm = (axis.delta / timeUnitSize.year) / magn;

								if (norm < 1.5) {
									size = 1;
								} else if (norm < 3) {
									size = 2;
								} else if (norm < 7.5) {
									size = 5;
								} else {
									size = 10;
								}

								size *= magn;
							}

							// minimum size for years is 1

							if (size < 1) {
								size = 1;
							}
						}

						axis.tickSize = opts.tickSize || [size, unit];
						var tickSize = axis.tickSize[0];
						unit = axis.tickSize[1];

						var step = tickSize * timeUnitSize[unit];

						if (unit == "second") {
							d.setSeconds(floorInBase(d.getSeconds(), tickSize));
						} else if (unit == "minute") {
							d.setMinutes(floorInBase(d.getMinutes(), tickSize));
						} else if (unit == "hour") {
							d.setHours(floorInBase(d.getHours(), tickSize));
						} else if (unit == "month") {
							d.setMonth(floorInBase(d.getMonth(), tickSize));
						} else if (unit == "quarter") {
							d.setMonth(3 * floorInBase(d.getMonth() / 3,
								tickSize));
						} else if (unit == "year") {
							d.setFullYear(floorInBase(d.getFullYear(), tickSize));
						}

						// reset smaller components

						d.setMilliseconds(0);

						if (step >= timeUnitSize.minute) {
							d.setSeconds(0);
						}
						if (step >= timeUnitSize.hour) {
							d.setMinutes(0);
						}
						if (step >= timeUnitSize.day) {
							d.setHours(0);
						}
						if (step >= timeUnitSize.day * 4) {
							d.setDate(1);
						}
						if (step >= timeUnitSize.month * 2) {
							d.setMonth(floorInBase(d.getMonth(), 3));
						}
						if (step >= timeUnitSize.quarter * 2) {
							d.setMonth(floorInBase(d.getMonth(), 6));
						}
						if (step >= timeUnitSize.year) {
							d.setMonth(0);
						}

						var carry = 0;
						var v = Number.NaN;
						var prev;

						do {

							prev = v;
							v = d.getTime();
							ticks.push(v);

							if (unit == "month" || unit == "quarter") {
								if (tickSize < 1) {

									// a bit complicated - we'll divide the
									// month/quarter up but we need to take
									// care of fractions so we don't end up in
									// the middle of a day

									d.setDate(1);
									var start = d.getTime();
									d.setMonth(d.getMonth() +
										(unit == "quarter" ? 3 : 1));
									var end = d.getTime();
									d.setTime(v + carry * timeUnitSize.hour + (end - start) * tickSize);
									carry = d.getHours();
									d.setHours(0);
								} else {
									d.setMonth(d.getMonth() +
										tickSize * (unit == "quarter" ? 3 : 1));
								}
							} else if (unit == "year") {
								d.setFullYear(d.getFullYear() + tickSize);
							} else {
								d.setTime(v + step);
							}
						} while (v < axis.max && v != prev);

						return ticks;
					};

					axis.tickFormatter = function (v, axis) {

						var d = dateGenerator(v, axis.options);

						// first check global format

						if (opts.timeformat != null) {
							return formatDate(d, opts.timeformat, opts.monthNames, opts.dayNames);
						}

						// possibly use quarters if quarters are mentioned in
						// any of these places

						var useQuarters = (axis.options.tickSize &&
								axis.options.tickSize[1] == "quarter") ||
							(axis.options.minTickSize &&
								axis.options.minTickSize[1] == "quarter");

						var t = axis.tickSize[0] * timeUnitSize[axis.tickSize[1]];
						var span = axis.max - axis.min;
						var suffix = (opts.twelveHourClock) ? " %p" : "";
						var hourCode = (opts.twelveHourClock) ? "%I" : "%H";
						var fmt;

						if (t < timeUnitSize.minute) {
							fmt = hourCode + ":%M:%S" + suffix;
						} else if (t < timeUnitSize.day) {
							if (span < 2 * timeUnitSize.day) {
								fmt = hourCode + ":%M" + suffix;
							} else {
								fmt = "%b %d " + hourCode + ":%M" + suffix;
							}
						} else if (t < timeUnitSize.month) {
							fmt = "%b %d";
						} else if ((useQuarters && t < timeUnitSize.quarter) ||
							(!useQuarters && t < timeUnitSize.year)) {
							if (span < timeUnitSize.year) {
								fmt = "%b";
							} else {
								fmt = "%b %Y";
							}
						} else if (useQuarters && t < timeUnitSize.year) {
							if (span < timeUnitSize.year) {
								fmt = "Q%q";
							} else {
								fmt = "Q%q %Y";
							}
						} else {
							fmt = "%Y";
						}

						var rt = formatDate(d, fmt, opts.monthNames, opts.dayNames);

						return rt;
					};
				}
			});
		});
	}

	$.plot.plugins.push({
		init: init,
		options: options,
		name: 'time',
		version: '1.0'
	});

	// Time-axis support used to be in Flot core, which exposed the
	// formatDate function on the plot object.  Various plugins depend
	// on the function, so we need to re-expose it here.

	$.plot.formatDate = formatDate;
	$.plot.dateGenerator = dateGenerator;

})(jQuery);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ },

/***/ "./node_modules/jquery.flot.animator/jquery.flot.animator.js":
/***/ function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {/* jQuery Flot Animator version 1.0.

Flot Animator is a free jQuery Plugin that will add fluid animations to Flot charts.

Copyright (c) 2012-2013 Chtiwi Malek
http://www.codicode.com/art/jquery_flot_animator.aspx

Licensed under Creative Commons Attribution 3.0 Unported License.
*/

$.extend({
  plotAnimator: function (chart, data,g){
    
    var serie = 0;
    for (var i = 0; i < data.length; i++)
    {
      if (data[i].animator)
      {
        serie = i;
      }
    }
    
    function pInit(arr){
	  var x = [];
      x.push([arr[0][0], Math.max.apply(Math, arr.map(function(i) { return i[1];}))]);
      x.push([arr[0][0], null]);
      x.push([arr[0][0], Math.min.apply(Math, arr.map(function(i) { return i[1];}))]);
      for(var i = 0; i < arr.length; i++) {
          x.push([arr[i][0], null]);
      }
      data[serie].data = x;
      return $.plot(chart, data, g);
    }
    
    var d0 = data[serie];
    var oData = d0.data;
    
    var plot = pInit(oData);
    
    var isLines = (data[serie].lines)?true:false;
    var steps = (data[serie].animator && data[serie].animator.steps) || 135;
    var duration = (data[serie].animator && data[serie].animator.duration) || 1000;
    var start = (data[serie].animator && data[serie].animator.start) || 0;
    var dir = (data[serie].animator && data[serie].animator.direction) || "right";
    function stepData()
    {
      var Si = oData[0][0];
      var Fi = oData[oData.length-1][0];
      var Pas = (Fi-Si)/steps;
      
      var d2 = [];      
      d2.push(oData[0]);
      var nPointPos = 1;
      lPoint = oData[0];
      nPoint = oData[nPointPos];
      for (var i = Si+Pas; i < Fi+Pas; i += Pas)
      {
        if (i>Fi) {i=Fi;}
        $("#m2").html(i);
        while (i > nPoint[0])
        {
          lPoint = nPoint;
          nPoint = oData[nPointPos++];
        }
        if (i == nPoint[0])
        {
          d2.push([i,nPoint[1]]);
          lPoint = nPoint;
          nPoint = oData[nPointPos++];
        }
        else
        {
          var a = ((nPoint[1]-lPoint[1]) / ((nPoint[0]-lPoint[0])));
          curV = (a * i) + (lPoint[1] - (a * lPoint[0]));
          d2.push([i,curV]);
        }
      }
      return d2;
    }
    
    var step=0;
    var sData = stepData();
    function plotData()
    {
      var d3=[];
      step++;
      
      switch(dir)
      {
        case 'right':
          d3 = sData.slice(0, step);
          break;
        case 'left':
          d3 = sData.slice(-1*step);
          break
          case 'center':
          d3 = sData.slice((sData.length/2)-(step/2),(sData.length/2)+(step/2));
          break;
      }
      
      if (!isLines)
      {
        inV = d3[0][0];
      	laV = d3[d3.length-1][0];
        d3=[];
        for (var i = 0; i < oData.length; i++)
      	{
          if (oData[i][0]>=inV && oData[i][0]<=laV)
          {
            d3.push(oData[i]);
          }
      	}
      }
      
      data[serie].data = (step<steps)?d3:oData;
      plot.setData(data);
      plot.draw();
      if (step<steps)
      {
        setTimeout(plotData, duration/steps);
      }
      else
      {
        chart.trigger( "animatorComplete" );
      }
    }
    
    setTimeout(plotData,start);
    return plot;
  }
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ },

/***/ "./node_modules/metrojs/release/MetroJs.Full/MetroJs.js":
/***/ function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {/*!
* Metro JS for jQuery
* http://drewgreenwell.com/ 
* For details and usage info see: http://drewgreenwell.com/projects/metrojs

Copyright (C) 2013, Drew Greenwell

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
;(function ($) {
    // the metrojs object contains helper methods and theme settings
    $.fn.metrojs = {
        capabilities: null,
        checkCapabilities: function(stgs, recheck){
            if($.fn.metrojs.capabilities == null || (typeof(recheck) != "undefined" && recheck == true))
                $.fn.metrojs.capabilities = new $.fn.metrojs.MetroModernizr(stgs);
            return  $.fn.metrojs.capabilities;
        }
    };
	var metrojs = $.fn.metrojs,
		console = window.console;	
	if (typeof console !== "object") {
		console = {};
		console.log = function() {};
		console.error=function() {};
	}
	var throwError = typeof ($.error) === "function" ? $.error : console.error;
var MAX_LOOP_COUNT = 99000;
// .liveTile
$.fn.liveTile = function (method) {
	if (pubMethods[method]) {
		var args = [];
		for (var i = 1; i <= arguments.length; i++) {
			args[i - 1] = arguments[i];
		}
		return pubMethods[method].apply(this, args);
	} else if (typeof method === 'object' || !method) {
		return pubMethods.init.apply(this, arguments);
	} else {
		$.error('Method ' + method + ' does not exist on jQuery.liveTile');
		return null;
	}
};


$.fn.liveTile.contentModules = {
	modules: [],
	/* the default module layout
    [
        defaultModules.imageSwap,
        defaultModules.htmlSwap
    ],*/
	addContentModule: function (moduleName, module) {
		if (!(this.modules instanceof Array))
			this.modules = [];
		this.modules.push(module);
	},
	hasContentModule: function (moduleName) {
		if (typeof (moduleName) === "undefined" || !(this.modules instanceof Array))
			return -1;
		for (var i = 0; i < this.modules.length; i++) {
			if (typeof (this.modules[i].moduleName) != "undefined" && this.modules[i].moduleName == moduleName)
				return i;
		}
		return -1;
	}
};

// default option values for .liveTile
$.fn.liveTile.defaults = {
	mode: 'slide',                          // 'fade', 'slide', 'flip', 'flip-list', carousel
	speed: 500,                             // how fast should animations be performed, in milliseconds
	initDelay: -1,                          // how long to wait before the initial animation
	delay: 5000,                            // how long to wait between animations 
	stops: "100%",                          // how much of the back tile should 'slide' reveal before starting a delay
	stack: false,                           // should tiles in slide mode appear stacked (e.g Me tile) 
	direction: 'vertical',                  // which direction should animations be performed(horizontal | vertical)
	animationDirection: 'forward',          // the direction that carousel mode uses to determine which way to slide in tiles
	tileSelector: '>div,>li,>p,>img,>a',    // the selector used by carousel mode and flip-list to choose tile containers
	tileFaceSelector: '>div,>li,>p,>img,>a',// the selector used to choose the front and back containers
	ignoreDataAttributes: false,            // should data attributes be ignored
	click: null,                            // function ($tile, tdata) { return true; }
	link: '',                               // a url to go to when clicked
	newWindow: false,                       // should the link be opened in a new window
	bounce: false,                          // should the tile shrink when tapped
	bounceDirections: 'all',                // which direction the tile will tile 'all', 'edges, 'corners'
	bounceFollowsMove: true,                // should a tile in bounce state tilt in the direction of the mouse as it moves
	pauseOnHover: false,                    // should tile animations be paused on hover in and restarted on hover out
	pauseOnHoverEvent: 'both',              // pause is called on mouseover, mouseout, or both
	playOnHover: false,                     // should "play" be called on hover
	playOnHoverEvent: 'both',               // play is called on mouseover, mouseout, or both
	onHoverDelay: 0,						// the amount of time to wait before the onHover event is fired
	onHoverOutDelay: 200,					// the amount of time in addition to the speed to wait before the onHoverOut event is fired
	repeatCount: -1,                        // number of times to repeat the animation        
	appendBack: true,                       // appends the .last tile if one doesnt exist (slide and flip only)        
	alwaysTrigger: false,                   // should every item in a flip list trigger every time a delay passes 
	flipListOnHover: false,                 // should items in flip-list flip and stop when hovered
	flipListOnHoverEvent: 'mouseout',       // which event should be used to trigger the flip-list faces
	noHAflipOpacity: '1',                   // the opacity level set for the backside of the flip animation on unaccelerated browsers
	haTransFunc: 'ease',                    // the tranisiton-timing function to use in hardware accelerated mode
	noHaTransFunc: 'linear',                // the tranisiton-timing function to use in non hardware accelerated mode
	currentIndex: 0,                        // what is the current stop index for slide mode or slide index for carousel mode
	startNow: true,                         // should the tile immediately start or wait util play or restart has been called
	useModernizr: (typeof (window.Modernizr) !== "undefined"), // checks to see if modernizer is already in use
	useHardwareAccel: true,                 // should css animations, transitions and transforms be used when available
	useTranslate: true,
	faces: {
		$front: null,                        // the jQuery element to use as the front face of the tile; this will bypass tileCssSelector
		$back: null                          // the jQuery element to use as the back face of the tile; this will bypass tileCssSelector
	},
	animationStarting: function (tileData, $front, $back) {
		// returning false will cancel the animation
	},
	animationComplete: function (tileData, $front, $back) {
	},
	triggerDelay: function (idx) {          // used by flip-list to decide how random the tile flipping should be
		return Math.random() * 3000;
	},
	swap: '',                               // which swap modules are active for this tile (image, html)
	swapFront: '-',                         // override the available swap modules for the front face
	swapBack: '-',                          // override the available swap modules for the back face
	contentModules: [],
	rebindMessage: "tile data is missing. Are you missing a call to rebind or destroy? You may also be able to avoid this error by calling stop or pause"
};
// public methods that can be called via .liveTile(method name)
var pubMethods = {
	init: function (options) {
		// Setup the public options for the livetile
		var settings = $.extend({}, $.fn.liveTile.defaults, options);
		// checks for browser feature support to enable hardware acceleration                        
		metrojs.checkCapabilities(settings);
		helperMethods.getBrowserPrefix();
		// setup the default content modules
		if ($.fn.liveTile.contentModules.hasContentModule("image") == -1)
			$.fn.liveTile.contentModules.addContentModule("image", defaultModules.imageSwap);
		if ($.fn.liveTile.contentModules.hasContentModule("html") == -1)
			$.fn.liveTile.contentModules.addContentModule("html", defaultModules.htmlSwap);
		// this is where the magic happens
		return $(this).each(function (tileIndex, ele) {
			var $this = $(ele),
            data = privMethods.initTileData($this, settings);
			// append back tiles and add appropriate classes to prepare tiles
			data.faces = privMethods.prepTile($this, data);
			// action methods
			data.fade = function (count) { privMethods.fade($this, count); };
			data.slide = function (count) { privMethods.slide($this, count); };
			data.carousel = function (count) { privMethods.carousel($this, count); };
			data.flip = function (count) { privMethods.flip($this, count); };
			data.flipList = function (count) { privMethods.flipList($this, count); };
			var actions = {
				fade: data.fade,
				slide: data.slide,
				carousel: data.carousel,
				flip: data.flip,
				'flip-list': data.flipList
			};
			data.doAction = function (count) {
				// get the action for the current mode
				var action = actions[data.mode];
				if (typeof (action) === "function") {
					action(count);
					data.hasRun = true;
				}
				// prevent pauseOnHover from resuming a tile that has finished
				if (count == data.timer.repeatCount)
					data.runEvents = false;
			};

			// create a new tile timer
			data.timer = new $.fn.metrojs.TileTimer(data.delay, data.doAction, data.repeatCount);
			// apply the data
			$this.data("LiveTile", data);
			// handle events
			// only bind pause / play on hover if we are not using a fliplist or flipListOnHover isn't set set
			if (data.mode !== "flip-list" || data.flipListOnHover == false) {
				if (data.pauseOnHover) {
					privMethods.bindPauseOnHover($this);
				} else if (data.playOnHover) {
					privMethods.bindPlayOnHover($this, data);
				}
			}
			// add a click / link to the tile
			if (data.link.length > 0 || typeof (data.click) === "function") {
				$this.css({ cursor: 'pointer' }).bind("click.liveTile", function (e) {
					var proceed = true;
					if (typeof (data.click) === "function") {
						proceed = data.click($this, data) || false;
					}
					if (proceed && data.link.length > 0) {
						e.preventDefault();
						if (data.newWindow)
							window.open(data.link);
						else
							window.location = data.link;
					}
				});
			}
			// add bounce if set            
			privMethods.bindBounce($this, data);
			// start timer
			if (data.startNow && data.mode != "none") {
				data.runEvents = true;
				data.timer.start(data.initDelay);
			}
		});
	},
	// goto is a future reserved word
	'goto': function (options) {
		var opts, t = typeof (options);
		if (t === "undefined") {
			opts = {
				index: -99, //  same as next
				delay: 0,
				autoAniDirection: false
			};
		}
		if (t === "number" || !isNaN(options)) {
			opts = {
				index: parseInt(options, 10),
				delay: 0
			};
		} else if (t === "string") {
			if (options == "next") {
				opts = {
					index: -99,
					delay: 0
				};
			} else if (options.indexOf("prev") === 0) {
				opts = {
					index: -100,
					delay: 0
				};
			} else {
				$.error(options + " is not a recognized action for .liveTile(\"goto\")");
				return $(this);
			}
		} else if (t === "object") {
			if (typeof (options.delay) === "undefined") {
				options.delay = 0;
			}
			var ti = typeof (options.index);
			if (ti === "undefined") {
				options.index = 0;
			} else if (ti === "string") {
				if (options.index === "next")
					options.index = -99;
				else if (options.index.indexOf("prev") === 0)
					options.index = -100;
			}
			opts = options;
		}
		return $(this).each(function (tileIndex, ele) {
			var $tile = $(ele),
                data = $tile.data("LiveTile"),
                aniData = $tile.data("metrojs.tile"),
                goTo = opts.index;
			if (aniData.animating === true)
				return $(this);
			if (data.mode === "carousel") {
				// get the index based off of the active carousel slide
				var $cur = data.faces.$listTiles.filter(".active");
				var curIdx = data.faces.$listTiles.index($cur);
				// carousel will look for these values as triggers
				if (goTo === -100) { // prev
					// autoAniDirection determines if a forward or backward animation should be used based on the goTo index
					if (typeof (opts.autoAniDirection) === "undefined" || opts.autoAniDirection == true)
						data.tempValues.animationDirection = typeof (opts.animationDirection) === "undefined" ? "backward" : opts.animationDirection;
					goTo = curIdx === 0 ? data.faces.$listTiles.length - 1 : curIdx - 1;
				} else if (goTo === -99) { // next
					if (typeof (opts.autoAniDirection) === "undefined" || opts.autoAniDirection == true)
						data.tempValues.animationDirection = typeof (opts.animationDirection) === "undefined" ? "forward" : opts.animationDirection;
					goTo = curIdx + 1;
				}
				if (curIdx == goTo) {
					return;
				}
				if (typeof (opts.direction) !== "undefined") {
					data.tempValues.direction = opts.direction;
				}
				if (typeof (opts.animationDirection) !== "undefined") {
					data.tempValues.animationDirection = opts.animationDirection;
				}
				// the index is offset by 1 and incremented on animate
				if (goTo == 0)
					data.currentIndex = data.faces.$listTiles.length;
				else
					data.currentIndex = goTo - 1;
			} else // slide mode will use the index directly
				data.currentIndex = goTo;
			// start the timer
			data.runEvents = true;
			data.timer.start(opts.delay >= 0 ? opts.delay : data.delay);
		});
	},
	play: function (options) {
		var opts, t = typeof (options);
		if (t === "undefined") {
			opts = {
				delay: -1
			};
		} else if (t === "number") {
			opts = {
				delay: options
			};
		} else if (t === "object") {
			if (typeof (options.delay) === "undefined") {
				options.delay = -1;
			}
			opts = options;
		}
		return $(this).each(function (tileIndex, ele) {
			var $tile = $(ele),
                data = $tile.data("LiveTile");
			data.runEvents = true;
			if (opts.delay < 0 && !data.hasRun)
				opts.delay = data.initDelay;
			data.timer.start(opts.delay >= 0 ? opts.delay : data.delay);
		});
	},
	animate: function () { // this is really only useful for certain edge cases in slide mode, use 'play' to toggle animations
		return $(this).each(function (tileIndex, ele) {
			var $tile = $(ele),
                data = $tile.data("LiveTile");
			data.doAction();
		});
	},
	stop: function () {
		return $(this).each(function (tileIndex, ele) {
			var $tile = $(ele),
                data = $tile.data("LiveTile");
			data.hasRun = false;
			data.runEvents = false;
			data.timer.stop();
			window.clearTimeout(data.eventTimeout);
			window.clearTimeout(data.flCompleteTimeout);
			window.clearTimeout(data.completeTimeout);
			if (data.mode === "flip-list") {
				data.faces.$listTiles.each(function (idx, li) {
					var ldata = $(li).data("metrojs.tile");
					window.clearTimeout(ldata.eventTimeout);
					window.clearTimeout(ldata.flCompleteTimeout);
					window.clearTimeout(ldata.completeTimeout);
				});
			}
		});
	},
	pause: function () {
		return $(this).each(function (tileIndex, ele) {
			var $tile = $(ele),
                data = $tile.data("LiveTile");
			data.timer.pause();
			data.runEvents = false;
			window.clearTimeout(data.eventTimeout);
			window.clearTimeout(data.flCompleteTimeout);
			window.clearTimeout(data.completeTimeout);
			if (data.mode === "flip-list") {
				data.faces.$listTiles.each(function (idx, li) {
					var ldata = $(li).data("metrojs.tile");
					window.clearTimeout(ldata.eventTimeout);
					window.clearTimeout(ldata.flCompleteTimeout);
					window.clearTimeout(ldata.completeTimeout);
				});
			}
		});
	},
	restart: function (options) {
		var opts, t = typeof (options);
		if (t === "undefined") {
			opts = {
				delay: -1
			};
		} else if (t === "number") {
			opts = {
				delay: options
			};
		} else if (t === "object") {
			if (typeof (options.delay) === "undefined") {
				options.delay = -1;
			}
			opts = options;
		}
		return $(this).each(function (tileIndex, ele) {
			var $tile = $(ele),
                data = $tile.data("LiveTile");
			if (opts.delay < 0 && !data.hasRun)
				opts.delay = data.initDelay;
			data.hasRun = false;
			data.runEvents = true;
			data.timer.restart(opts.delay >= 0 ? opts.delay : data.delay);
		});
	},
	rebind: function (options) {
		return $(this).each(function (tileIndex, ele) {
			if (typeof (options) !== "undefined") {
				if (typeof (options.timer) !== "undefined" && options.timer != null) {
					options.timer.stop();
				}
				options.hasRun = false;
				pubMethods["init"].apply(ele, [options]);
			} else {
				pubMethods["init"].apply(ele, [{}]);
			}
		});
	},
	destroy: function (options) {
		var t = typeof (options), opts;
		if (t === "undefined") {
			opts = {
				removeCss: false
			};
		} else if (t === "boolean") {
			opts = {
				removeCss: options
			};
		} else if (t === "object") {
			if (typeof (options.removeCss) === "undefined") {
				options.removeCss = false;
			}
			opts = options;
		}
		return $(this).each(function (tileIndex, ele) {
			var $tile = $(ele);
			var data = $tile.data("LiveTile");
			if (typeof (data) === "undefined")
				return;
			$tile.unbind(".liveTile");
			var resetCss = helperMethods.appendStyleProperties({ margin: '', cursor: '' }, ['transform', 'transition'], ['', '']);
			data.timer.stop();
			window.clearTimeout(data.eventTimeout);
			window.clearTimeout(data.flCompleteTimeout);
			window.clearTimeout(data.completeTimeout);
			if (data.faces.$listTiles != null) {
				data.faces.$listTiles.each(function (idx, li) {
					var $li = $(li);
					if (data.mode === "flip-list") {
						var ldata = $li.data("metrojs.tile");
						window.clearTimeout(ldata.eventTimeout);
						window.clearTimeout(ldata.flCompleteTimeout);
						window.clearTimeout(ldata.completeTimeout);
					} else if (data.mode === "carousel") {
						var sdata = data.listData[idx];
						if (sdata.bounce) {
							privMethods.unbindMsBounce($li, sdata);
						}
					}
					if (opts.removeCss) {
						$li.removeClass("ha");
						$li.find(data.tileFaceSelector)
                            .unbind(".liveTile")
                            .removeClass("bounce flip-front flip-back ha slide slide-front slide-back")
                            .css(resetCss);
					} else {
						$li.find(data.tileFaceSelector).unbind(".liveTile");
					}
					$li.removeData("metrojs.tile");
				}).unbind(".liveTile");
			}
			if (data.faces.$front != null && opts.removeCss) {
				data.faces.$front.removeClass("flip-front flip-back ha slide slide-front slide-back")
                    .css(resetCss);
			}
			if (data.faces.$back != null && opts.removeCss) {
				data.faces.$back.removeClass("flip-front flip-back ha slide slide-front slide-back")
                    .css(resetCss);
			}
			// remove the bounce and hover methods
			// todo: combine all mouse/touch events (down, move, up)
			if (data.bounce) {
				privMethods.unbindMsBounce($tile, data);
			}
			if (data.playOnHover) {
				privMethods.unbindMsPlayOnHover($tile, data);
			}
			if (data.pauseOnhover) {
				privMethods.unbindMsPauseOnHover($tile, data);
			}
			$tile.removeClass("ha");
			$tile.removeData("LiveTile");
			$tile.removeData("metrojs.tile");
			data = null;
		});
	}
};

// private methods that are called by .liveTile
var privMethods = {
	//getDataOrDefault for older versions of jQuery that dont look for 'data-' properties
	dataAtr: function ($ele, name, def) {
		return typeof ($ele.attr('data-' + name)) !== "undefined" ? $ele.attr('data-' + name) : def;
	},
	dataMethod: function ($ele, name, def) {
		return typeof ($ele.data(name)) !== "undefined" ? $ele.data(name) : def;
	},
	getDataOrDefault: null,
	initTileData: function ($tile, stgs) {
		var useData = stgs.ignoreDataAttributes == false,
            tdata = null;
		if (this.getDataOrDefault == null)
			this.getDataOrDefault = metrojs.capabilities.isOldJQuery ? this.dataAtr : this.dataMethod;
		if (useData) {
			tdata = { //an object to store settings for later access                
				speed: this.getDataOrDefault($tile, "speed", stgs.speed),
				delay: this.getDataOrDefault($tile, "delay", stgs.delay),
				stops: this.getDataOrDefault($tile, "stops", stgs.stops),
				stack: this.getDataOrDefault($tile, "stack", stgs.stack),
				mode: this.getDataOrDefault($tile, "mode", stgs.mode),
				direction: this.getDataOrDefault($tile, "direction", stgs.direction),
				useHardwareAccel: this.getDataOrDefault($tile, "ha", stgs.useHardwareAccel),
				repeatCount: this.getDataOrDefault($tile, "repeat", stgs.repeatCount),
				swap: this.getDataOrDefault($tile, "swap", stgs.swap),
				appendBack: this.getDataOrDefault($tile, "appendback", stgs.appendBack),
				currentIndex: this.getDataOrDefault($tile, "start-index", stgs.currentIndex),
				animationDirection: this.getDataOrDefault($tile, "ani-direction", stgs.animationDirection),
				startNow: this.getDataOrDefault($tile, "start-now", stgs.startNow),
				tileSelector: this.getDataOrDefault($tile, "tile-selector", stgs.tileSelector),
				tileFaceSelector: this.getDataOrDefault($tile, "face-selector", stgs.tileFaceSelector),
				bounce: this.getDataOrDefault($tile, "bounce", stgs.bounce),
				bounceDirections: this.getDataOrDefault($tile, "bounce-dir", stgs.bounceDirections),
				bounceFollowsMove: this.getDataOrDefault($tile, "bounce-follows", stgs.bounceFollowsMove),
				click: this.getDataOrDefault($tile, "click", stgs.click),
				link: this.getDataOrDefault($tile, "link", stgs.link),
				newWindow: this.getDataOrDefault($tile, "new-window", stgs.newWindow),
				alwaysTrigger: this.getDataOrDefault($tile, "always-trigger", stgs.alwaysTrigger),
				flipListOnHover: this.getDataOrDefault($tile, "flip-onhover", stgs.flipListOnHover),
				pauseOnHover: this.getDataOrDefault($tile, "pause-onhover", stgs.pauseOnHover),
				playOnHover: this.getDataOrDefault($tile, "play-onhover", stgs.playOnHover),
				onHoverDelay: this.getDataOrDefault($tile, "hover-delay", stgs.onHoverDelay),
				onHoverOutDelay: this.getDataOrDefault($tile, "hoverout-delay", stgs.onHoverOutDelay),
				noHAflipOpacity: this.getDataOrDefault($tile, "flip-opacity", stgs.noHAflipOpacity),
				useTranslate: this.getDataOrDefault($tile, "use-translate", stgs.useTranslate),
				runEvents: false,
				isReversed: false,
				loopCount: 0,
				contentModules: [],
				listData: [],
				height: $tile.height(),
				width: $tile.width(),
				tempValues: {}
			};
		} else {
			tdata = $.extend(true, {
				runEvents: false,
				isReversed: false,
				loopCount: 0,
				contentModules: [],
				listData: [],
				height: $tile.height(),
				width: $tile.width(),
				tempValues: {}
			}, stgs);
		}
		tdata.useTranslate = tdata.useTranslate && tdata.useHardwareAccel && metrojs.capabilities.canTransform && metrojs.capabilities.canTransition;
		// set the margin to half of the height or width based on the direction
		tdata.margin = (tdata.direction === "vertical") ? tdata.height / 2 : tdata.width / 2;
		// convert stops if needed
		tdata.stops = (typeof (stgs.stops) === "object" && (stgs.stops instanceof Array)) ? stgs.stops : ("" + tdata.stops).split(",");
		// add a return stop
		if (tdata.stops.length === 1)
			tdata.stops.push("0px");
		// add content modules, start with global swaps            
		var swaps = tdata.swap instanceof Array ? tdata.swap : tdata.swap.replace(' ', '').split(",");
		// get the front and back swap data
		var sf = useData ? this.getDataOrDefault($tile, "swap-front", stgs.swapFront) : stgs.swapFront;
		var sb = useData ? this.getDataOrDefault($tile, "swap-back", stgs.swapBack) : stgs.swapBack;
		// set the data to the global value if its still the default
		if (sf instanceof Array) {
			tdata.swapFront = sf;
		} else {
			tdata.swapFront = sf === '-' ? swaps : sf.replace(' ', '').split(",");
		}

		if (sb instanceof Array) {
			tdata.swapBack = sb;
		} else {
			tdata.swapBack = sb === '-' ? swaps : sb.replace(' ', '').split(",");
		}
		// make sure the swaps includes all front and back swaps
		var i;
		for (i = 0; i < tdata.swapFront.length; i++) {
			if (tdata.swapFront[i].length > 0 && $.inArray(tdata.swapFront[i], swaps) === -1)
				swaps.push(tdata.swapFront[i]);
		}
		for (i = 0; i < tdata.swapBack.length; i++) {
			if (tdata.swapBack[i].length > 0 && $.inArray(tdata.swapBack[i], swaps) === -1)
				swaps.push(tdata.swapBack[i]);
		}
		tdata.swap = swaps;
		// add all required content modules for the swaps
		for (i = 0; i < swaps.length; i++) {
			if (swaps[i].length > 0) {
				var moduleIdx = $.fn.liveTile.contentModules.hasContentModule(swaps[i]);
				if (moduleIdx > -1) {
					tdata.contentModules.push($.fn.liveTile.contentModules.modules[moduleIdx]);
				}
			}
		}
		// set the initDelay value to the delay if it's not set
		tdata.initDelay = useData ? this.getDataOrDefault($tile, "initdelay", stgs.initDelay) : stgs.initDelay;
		// if the delay is -1 call the triggerDelay function to get a value
		if (tdata.delay < -1)
			tdata.delay = stgs.triggerDelay(1);
		else if (tdata.delay < 0)
			tdata.delay = 3500 + (Math.random() * 4501);
		// match the delay value if less than 0
		if (tdata.initDelay < 0)
			tdata.initDelay = tdata.delay;
		// merge the objects
		var mergedData = {};
		for (i = 0; i < tdata.contentModules.length; i++)
			$.extend(mergedData, tdata.contentModules[i].data);
		$.extend(mergedData, stgs, tdata);
		// add flip-list / carousel data
		var $tiles;
		if (mergedData.mode === "flip-list") {
			$tiles = $tile.find(mergedData.tileSelector).not(".tile-title");
			$tiles.each(function (idx, ele) {
				var $li = $(ele);
				var ldata = {
					direction: useData ? privMethods.getDataOrDefault($li, "direction", mergedData.direction) : mergedData.direction,
					newWindow: useData ? privMethods.getDataOrDefault($li, "new-window", false) : false,
					link: useData ? privMethods.getDataOrDefault($li, "link", "") : "",
					faces: { $front: null, $back: null },
					height: $li.height(),
					width: $li.width(),
					isReversed: false
				};
				ldata.margin = ldata.direction === "vertical" ? ldata.height / 2 : ldata.width / 2;
				mergedData.listData.push(ldata);
			});
		} else if (mergedData.mode === "carousel") {
			mergedData.stack = true;
			$tiles = $tile.find(mergedData.tileSelector).not(".tile-title");
			$tiles.each(function (idx, ele) {
				var $slide = $(ele);
				var sdata = {
					bounce: useData ? privMethods.getDataOrDefault($slide, "bounce", false) : false,
					bounceDirections: useData ? privMethods.getDataOrDefault($slide, "bounce-dir", "all") : "all",
					link: useData ? privMethods.getDataOrDefault($slide, "link", "") : "",
					newWindow: useData ? privMethods.getDataOrDefault($slide, "new-window", false) : false,
					animationDirection: useData ? privMethods.getDataOrDefault($slide, "ani-direction", "") : "",
					direction: useData ? privMethods.getDataOrDefault($slide, "direction", "") : ""
				};
				mergedData.listData.push(sdata);
			});
		}
		// get any additional options from the modules
		for (i = 0; i < tdata.contentModules.length; i++) {
			if (typeof (mergedData.contentModules[i].initData) === "function")
				mergedData.contentModules[i].initData(mergedData, $tile);
		}
		tdata = null;
		return mergedData;
	},
	prepTile: function ($tile, tdata) {
		//add the mode to the tile if it's not already there.
		$tile.addClass(tdata.mode);
		var ret = {
			$tileFaces: null,     // all possible tile faces in a liveTile in a non list mode
			$listTiles: null,     // all possible tiles in a liveTile in a list mode
			$front: null,         // the front face of a tile in a non list mode
			$back: null          // the back face of a tile in a non list mode
		};
		var rotateDir, frontCss, backCss, tileCss;
		// prepare the tile based on the current mode
		switch (tdata.mode) {
			case "fade":
				// front and back tile faces
				ret.$tileFaces = $tile.find(tdata.tileFaceSelector).not(".tile-title");
				ret.$front = (tdata.faces.$front != null && tdata.faces.$front.length > 0) ?
                               tdata.faces.$front.addClass('fade-front') :
                               ret.$tileFaces.filter(":first").addClass('fade-front');
				// get back face from settings, via selector, or append it if necessary
				if (tdata.faces.$back != null && tdata.faces.$back.length > 0)    // use $back option
					ret.$back = tdata.faces.$back.addClass('fade-back');
				else if (ret.$tileFaces.length > 1)                             // get the last tile face
					ret.$back = ret.$tileFaces.filter(":last").addClass('fade-back');
				else if (tdata.appendBack)                                       // append the back tile
					ret.$back = $('<div class="fade-back"></div>').appendTo($tile);
				else                                                            // just keep an empty placeholder
					ret.$back = $('<div></div>');
				break;
			case "slide":
				// front and back tile faces
				ret.$tileFaces = $tile.find(tdata.tileFaceSelector).not(".tile-title");
				// get front face from settings or via selector
				ret.$front = (tdata.faces.$front != null && tdata.faces.$front.length > 0) ?
                                tdata.faces.$front.addClass('slide-front') :
                                ret.$tileFaces.filter(":first").addClass('slide-front'); // using :first for pre jQuery 1.4
				// get back face from settings, via selector, or append it if necessary
				if (tdata.faces.$back != null && tdata.faces.$back.length > 0)    // use $back option
					ret.$back = tdata.faces.$back.addClass('slide-back');
				else if (ret.$tileFaces.length > 1)                             // get the last tile face
					ret.$back = ret.$tileFaces.filter(":last").addClass('slide-back');
				else if (tdata.appendBack)                                       // append the back tile
					ret.$back = $('<div class="slide-back"></div>').appendTo($tile);
				else                                                            // just keep an empty placeholder
					ret.$back = $('<div></div>');
				// stack mode
				if (tdata.stack == true) {
					var prop,
                        translate;
					if (tdata.direction === "vertical") {
						prop = "top",
                        translate = 'translate(0%, -100%) translateZ(0)';
					} else {
						prop = "left",
                        translate = 'translate(-100%, 0%) translateZ(0)';
					}
					backCss = {};
					if (tdata.useTranslate)
						helperMethods.appendStyleProperties(backCss, ['transform'], [translate]);
					else
						backCss[prop] = "-100%";
					ret.$back.css(backCss);
				}
				$tile.data("metrojs.tile", { animating: false });
				if (metrojs.capabilities.canTransition && tdata.useHardwareAccel) {   // hardware accelerated :)                        
					$tile.addClass("ha");
					ret.$front.addClass("ha");
					ret.$back.addClass("ha");
				}
				break;
			case "carousel":
				ret.$listTiles = $tile.find(tdata.tileSelector).not(".tile-title");
				var numberOfSlides = ret.$listTiles.length;
				$tile.data("metrojs.tile", { animating: false });
				tdata.currentIndex = Math.min(tdata.currentIndex, numberOfSlides - 1);
				ret.$listTiles.each(function (idx, ele) {
					var $slide = $(ele).addClass("slide");
					var sdata = tdata.listData[idx],
                        aniDir = typeof (sdata.animationDirection) === "string" && sdata.animationDirection.length > 0 ? sdata.animationDirection : tdata.animationDirection,
                        dir = typeof (sdata.direction) === "string" && sdata.direction.length > 0 ? sdata.direction : tdata.direction;
					if (idx == tdata.currentIndex) {
						$slide.addClass("active");
					} else if (aniDir === "forward") {
						if (dir === "vertical") {
							tileCss = tdata.useTranslate ? helperMethods.appendStyleProperties({}, ['transform'], ['translate(0%, 100%) translateZ(0)']) :
                                                   { left: '0%', top: '100%' };
							$slide.css(tileCss);
						} else {
							tileCss = tdata.useTranslate ? helperMethods.appendStyleProperties({}, ['transform'], ['translate(100%, 0%) translateZ(0)']) :
                                                   { left: '100%', top: '0%' };
							$slide.css(tileCss);
						}
					} else if (aniDir === "backward") {
						if (dir === "vertical") {
							tileCss = tdata.useTranslate ? helperMethods.appendStyleProperties({}, ['transform'], ['translate(0%, -100%) translateZ(0)']) :
                                                   { left: '0%', top: '-100%' };
							$slide.css(tileCss);
						} else {
							tileCss = tdata.useTranslate ? helperMethods.appendStyleProperties({}, ['transform'], ['translate(-100%, 0%) translateZ(0)']) :
                                                   { left: '-100%', top: '0%' };
							$slide.css(tileCss);
						}
					}
					// link and bounce can be bound per slide
					// add the click handler and link property
					privMethods.bindLink($slide, sdata);
					// add the bounce effect
					if (tdata.useHardwareAccel && metrojs.capabilities.canTransition)
						privMethods.bindBounce($slide, sdata);
					$slide = null;
					sdata = null;
				});
				// hardware accelerated :)
				if (metrojs.capabilities.canFlip3d && tdata.useHardwareAccel) {
					$tile.addClass("ha");
					ret.$listTiles.addClass("ha");
				}
				break;
			case "flip-list":
				// the tile containers inside the list
				ret.$listTiles = $tile.find(tdata.tileSelector).not(".tile-title");
				ret.$listTiles.each(function (idx, ele) {
					var $li = $(ele).addClass("tile-" + (idx + 1));
					// add the flip class to the front face
					var $lFront = $li.find(tdata.tileFaceSelector).filter(":first").addClass("flip-front").css({ margin: "0px" });
					// append a back tile face if one isnt present
					if ($li.find(tdata.tileFaceSelector).length === 1 && tdata.appendBack == true)
						$li.append("<div></div>");
					// add the flip class to the back face
					var $lBack = $li.find(tdata.tileFaceSelector).filter(":last").addClass("flip-back").css({ margin: "0px" });
					// update the tdata object with the faces
					tdata.listData[idx].faces.$front = $lFront;
					tdata.listData[idx].faces.$back = $lBack;
					// set data for overrides and easy access
					$li.data("metrojs.tile", {
						animating: false,
						count: 1,
						completeTimeout: null,
						flCompleteTimeout: null,
						index: idx
					});
					var ldata = $li.data("metrojs.tile");
					// add the hardware accelerated classes
					if (metrojs.capabilities.canFlip3d && tdata.useHardwareAccel) {   // hardware accelerated :)
						$li.addClass("ha");
						$lFront.addClass("ha");
						$lBack.addClass("ha");
						rotateDir = tdata.listData[idx].direction === "vertical" ? "rotateX(180deg)" : "rotateY(180deg)";
						backCss = helperMethods.appendStyleProperties({}, ["transform"], [rotateDir]);
						$lBack.css(backCss);
					} else { // not hardware accelerated :(
						// the front tile face will take up the entire tile
						frontCss = (tdata.listData[idx].direction === "vertical") ?
				{ height: '100%', width: '100%', marginTop: '0px', opacity: '1' } :
				{ height: '100%', width: '100%', marginLeft: '0px', opacity: '1' };
						// the back tile face is hidden by default and expanded halfway through a flip
						backCss = (tdata.listData[idx].direction === "vertical") ?
				{ height: '0px', width: '100%', marginTop: tdata.listData[idx].margin + 'px', opacity: tdata.noHAflipOpacity } :
				{ height: '100%', width: '0px', marginLeft: tdata.listData[idx].margin + 'px', opacity: tdata.noHAflipOpacity };
						$lFront.css(frontCss);
						$lBack.css(backCss);
					}
					var flipEnded = function () {
						ldata.count++;
						if (ldata.count >= MAX_LOOP_COUNT)
							ldata.count = 1;
					};
					if (tdata.flipListOnHover) {
						var event = tdata.flipListOnHoverEvent + ".liveTile";
						$lFront.bind(event, function () {
							privMethods.flip($li, ldata.count, tdata, flipEnded);
						});
						$lBack.bind(event, function () {
							privMethods.flip($li, ldata.count, tdata, flipEnded);
						});
					}
					if (tdata.listData[idx].link.length > 0) {
						$li.css({ cursor: 'pointer' }).bind("click.liveTile", function () {
							if (tdata.listData[idx].newWindow)
								window.open(tdata.listData[idx].link);
							else
								window.location = tdata.listData[idx].link;
						});
					}
				});
				break;
			case "flip":
				// front and back tile faces
				ret.$tileFaces = $tile.find(tdata.tileFaceSelector).not(".tile-title");
				// get front face from settings or via selector
				ret.$front = (tdata.faces.$front != null && tdata.faces.$front.length > 0) ?
                                tdata.faces.$front.addClass('flip-front') :
                                ret.$tileFaces.filter(":first").addClass('flip-front');
				// get back face from settings, via selector, or append it if necessary
				if (tdata.faces.$back != null && tdata.faces.$back.length > 0) {
					// use $back option
					ret.$back = tdata.faces.$back.addClass('flip-back');
				} else if (ret.$tileFaces.length > 1) {
					// get the last tile face
					ret.$back = ret.$tileFaces.filter(":last").addClass('flip-back');
				} else if (tdata.appendBack) {
					// append the back tile
					ret.$back = $('<div class="flip-back"></div>').appendTo($tile);
				} else {
					// just keep an empty placeholder
					ret.$back = $('<div></div>');
				}
				$tile.data("metrojs.tile", { animating: false });
				if (metrojs.capabilities.canFlip3d && tdata.useHardwareAccel) {
					// hardware accelerated :)
					$tile.addClass("ha");
					ret.$front.addClass("ha");
					ret.$back.addClass("ha");
					rotateDir = tdata.direction === "vertical" ? "rotateX(180deg)" : "rotateY(180deg)";
					backCss = helperMethods.appendStyleProperties({}, ["transform"], [rotateDir]);
					ret.$back.css(backCss);

				} else {
					// not hardware accelerated :(
					// the front tile face will take up the entire tile
					frontCss = (tdata.direction === "vertical") ?
			{ height: '100%', width: '100%', marginTop: '0px', opacity: '1' } :
			{ height: '100%', width: '100%', marginLeft: '0px', opacity: '1' };
					// the back tile face is hidden by default and expanded halfway through a flip
					backCss = (tdata.direction === "vertical") ?
			{ height: '0%', width: '100%', marginTop: tdata.margin + 'px', opacity: '0' } :
			{ height: '100%', width: '0%', marginLeft: tdata.margin + 'px', opacity: '0' };
					ret.$front.css(frontCss);
					ret.$back.css(backCss);
				}
				break;
		}
		return ret;
	},
	bindPauseOnHover: function ($tile) {
		// stop the tile when hovered and resume after a delay
		(function () {
			var data = $tile.data("LiveTile"),
                isOver = false,
                isPending = false,
				touchStartedOver = false,
				touchStartedOut = false,
                pauseIn = (data.pauseOnHoverEvent == "both" || data.pauseOnHoverEvent == "mouseover" || data.pauseOnHoverEvent == "mouseenter"),
                pauseOut = (data.pauseOnHoverEvent == "both" || data.pauseOnHoverEvent == "mouseout" || data.pauseOnHoverEvent == "mouseleave");
			data.pOnHoverMethods = {
				pause: function () {
					data.timer.pause();
					if (data.mode === "flip-list") {
						data.faces.$listTiles.each(function (idx, li) {
							window.clearTimeout($(li).data("metrojs.tile").completeTimeout);
						});
					}
				},
				over: function (e, isTouch) {
					isTouch = typeof (isTouch) == "undefined" ? false : isTouch;
					if (!isTouch && touchStartedOver) {
						return;
					}
					if (isOver || isPending)
						return;
					if (data.runEvents) {
						isPending = true;
						data.eventTimeout = window.setTimeout(function () {
							isPending = false;
							if (pauseOut)
								isOver = true;
							touchStartedOver = false;
							data.pOnHoverMethods.pause();
						}, data.onHoverDelay);
					}
				},
				out: function (e, isTouch) {
					isTouch = typeof (isTouch) == "undefined" ? false : isTouch;
					if (!isTouch && touchStartedOut == true) {
						return;
					}
					if (isPending) {
						window.clearTimeout(data.eventTimeout);
						isPending = false;
						return;
					}
					if (pauseIn) {
						if (!isOver && !isPending)
							return;
						if (data.runEvents) {
							// todo: use a custom value if provided
							data.timer.start(data.hasRun ? data.delay : data.initDelay);
						}
					} else {
						data.pOnHoverMethods.pause();
					}
					isOver = false;
					touchStartedOut = false;
				}
			};
			if (!metrojs.capabilities.canTouch) {
				if (pauseIn)
					$tile.bind("mouseover.liveTile", data.pOnHoverMethods.over);
				if (pauseOut)
					$tile.bind("mouseout.liveTile", data.pOnHoverMethods.out);
			} else {
				if (window.PointerEvent || window.MSPointerEvent) { // pointer
					var eventPrefix = window.MSPointerEvent ? "MS" : "";
					if (pauseIn) {
						$tile[0].addEventListener(eventPrefix + 'PointerOver', data.pOnHoverMethods.over, false);
					}
					if (pauseOut) {
						$tile[0].addEventListener(eventPrefix + 'PointerOut', data.pOnHoverMethods.out, false);
					}
				} else { // touch events
					if (pauseIn) {
						$tile.bind("mouseover.liveTile", data.pOnHoverMethods.over);
						$tile.bind("touchstart.liveTile", function (event) {
							touchStartedOver = false;
							data.pOnHoverMethods.over.apply($tile[0], [event, true]);
						});
					}
					if (pauseOut) {
						$tile.bind("mouseout.liveTile", data.pOnHoverMethods.out);
						$tile.bind("touchend.liveTile", function (event) {
							touchStartedOut = false;
							data.pOnHoverMethods.out.apply($tile[0], [event, true]);
						});
					}
				}
			}
		})();
	},
	unbindMsPauseOnHover: function ($tile, data) {
		if (typeof (data.pOnHoverMethods) !== "undefined" && (window.PointerEvent || window.MSPointerEvent)) {
			var eventPrefix = window.MSPointerEvent ? "MS" : "";
			$tile[0].removeEventListener(eventPrefix + 'PointerOver', data.pOnHoverMethods.over, false);
			$tile[0].removeEventListener(eventPrefix + 'PointerOut', data.pOnHoverMethods.out, false);
		}
	},
	bindPlayOnHover: function ($tile, data) {
		// play the tile immediately when hovered
		(function () {
			var isOver = false,
                isPending = false,
				touchStartedOver = false,
				touchStartedOut = false,
                playIn = (data.playOnHoverEvent == "both" || data.playOnHoverEvent == "mouseover" || data.playOnHoverEvent == "mouseenter"),
                playOut = (data.playOnHoverEvent == "both" || data.playOnHoverEvent == "mouseout" || data.playOnHoverEvent == "mouseleave");
			data.onHoverMethods = {
				over: function (event, isTouch) {
					isTouch = typeof (isTouch) == "undefined" ? false : isTouch;
					if (!isTouch && touchStartedOver) {
						return;
					}
					if (isOver || isPending || (data.bounce && data.bounceMethods.down != "no"))
						return;
					// if startNow is set use the opposite of isReversed so we're in sync            
					var rev = (data.mode == "flip") || (data.startNow ? !data.isReversed : data.isReversed);
					window.clearTimeout(data.eventTimeout);
					if ((data.runEvents && rev) || !data.hasRun) {
						isPending = true;
						data.eventTimeout = window.setTimeout(function () {
							isPending = false;
							if (playOut)
								isOver = true;
							pubMethods["play"].apply($tile[0], [0]);
							touchStartedOver = false;
						}, data.onHoverDelay);
					}
				},
				out: function (event, isTouch) {
					isTouch = typeof(isTouch) == "undefined" ? false : isTouch;
					if (!isTouch && touchStartedOut == true) {
						return;
					}
					if (isPending) {
						window.clearTimeout(data.eventTimeout);
						isPending = false;
						return;
					}
					if (playIn) {
						if (!isOver && !isPending) {
							return;
						}
					}
					window.clearTimeout(data.eventTimeout);
					data.eventTimeout = window.setTimeout(function () {
						var rev = (data.mode == "flip") || (data.startNow ? data.isReversed : !data.isReversed);
						if (data.runEvents && rev) {
							pubMethods["play"].apply($tile[0], [0]);
						}
						touchStartedOut = false;
						isOver = false;
					}, data.speed + data.onHoverOutDelay);
				}
			};
			if (!metrojs.capabilities.canTouch) {
				if (playIn)
					$tile.bind('mouseenter.liveTile', data.onHoverMethods.over);
				if (playOut)
					$tile.bind('mouseleave.liveTile', data.onHoverMethods.out);
			} else {
				if (window.PointerEvent || window.MSPointerEvent) { // pointer
					var eventPrefix = window.MSPointerEvent ? "MS" : "";
					if (playIn) {
						//$tile[0].addEventListener(eventPrefix + 'PointerDown', data.onHoverMethods.over, false);
						$tile[0].addEventListener(eventPrefix + 'PointerEnter', data.onHoverMethods.over, false);
					}
					// mouseleave gives a more consistent effect than out when the children are transformed
					if (playOut)
						$tile[0].addEventListener(eventPrefix + 'PointerLeave', data.onHoverMethods.out, false);
				} else { // touch events
					if (playIn) {
						$tile.bind("touchstart.liveTile", function (event) {
							touchStartedOver = true;
							data.onHoverMethods.over.apply($tile[0], [event, true]);
						});
						$tile.bind("mouseenter.liveTile", data.onHoverMethods.over);
					}
					if (playOut) {
						$tile.bind("touchend.liveTile,touchcancel.liveTile", function (event) {
							touchStartedOut = false;
							data.onHoverMethods.out.apply($tile[0], [event, true]);
						});
						$tile.bind("mouseleave.liveTile", data.onHoverMethods.out);
					}
				}

			}
		})();
	},
	unbindMsPlayOnHover: function ($tile, data) {
		if (typeof (data.onHoverMethods) !== "undefined" && (window.PointerEvent || window.MSPointerEvent)) {
			var eventPrefix = window.MSPointerEvent ? "MS" : "";
			$tile[0].removeEventListener(eventPrefix + 'PointerOver', data.onHoverMethods.over, false);
		}
	},
	bindBounce: function ($tile, data) {
		// add bounce
		if (data.bounce) {
			$tile.addClass("bounce");
			$tile.addClass("noselect");
			(function () {
				data.bounceMethods = {
					down: "no",
					threshold: 30,
					zeroPos: { x: 0, y: 0 },
					eventPos: { x: 0, y: 0 },
					inTilePos: { x: 0, y: 0 },
					pointPos: { x: 0, y: 0 },
					regions: {
						c: [0, 0],      // center
						tl: [-1, -1],   // top left
						tr: [1, -1],    // top right
						bl: [-1, 1],    // bottom left
						br: [1, 1],     // bottom right
						t: [null, -1],  // top
						r: [1, null],   // right
						b: [null, 1],   // bottom
						l: [-1, null]   // left
					},
					targets: {
						all: ['c', 't', 'r', 'b', 'l', 'tl', 'tr', 'bl', 'br'],
						edges: ['c', 't', 'r', 'b', 'l'],
						corners: ['c', 'tl', 'tr', 'bl', 'br']
					},
					hitTest: function ($el, pos, targetRegions, omegaC) {
						var regions = data.bounceMethods.regions,
                            checkFor = data.bounceMethods.targets[targetRegions],
                            i = 0,
                            strictMatch = null,
                            looseMatch = null,
                            defResult = { hit: [0, 0], name: 'c' };
						// scale only for android 2.x and old ie
						if (metrojs.capabilities.isOldAndroid || !metrojs.capabilities.canTransition)
							return defResult;
						if (typeof (checkFor) == "undefined") {
							if (typeof (targetRegions) === "string")
								checkFor = targetRegions.split(',');
							// only default to center if explicitly requested
							if ($.isArray(checkFor) && $.inArray('c') == -1) {
								omegaC = 0;
								defResult = null;
							}
						}
						// check for a matching region
						var w = $el.width(),
                           h = $el.height(),
                           // center threshold -  maximum amount from center
                           ct = [w * omegaC, h * omegaC],
                           // how far from the center is the point
                           diffX = pos.x - (w * 0.5),
                           diffY = pos.y - (h * 0.5),
                            // if we're beyond the center threshold, set -1 or 1 else 0
                           hit = [
                               diffX > 0 ? (Math.abs(diffX) <= ct[0] ? 0 : 1) : (Math.abs(diffX) <= ct[0] ? 0 : -1),
                               diffY > 0 ? (Math.abs(diffY) <= ct[1] ? 0 : 1) : (Math.abs(diffY) <= ct[1] ? 0 : -1)
                           ];
						for (; i < checkFor.length; i++) {
							if (strictMatch != null)
								return strictMatch;
							var r = checkFor[i],
                                region = regions[r];
							if (r == "*") {
								r = checkFor[i + 1];
								return { region: regions[r], name: r };
							}
							if (hit[0] == region[0] && hit[1] == region[1]) {
								// found the region with a strict lookup
								strictMatch = { hit: region, name: r };
							} else if ((hit[0] == region[0] || region[0] == null) && (hit[1] == region[1] || region[1] == null)) {
								// found the region with a loose lookup
								looseMatch = { hit: region, name: r };
							}
						}
						// prefer a strict match
						if (strictMatch != null)
							return strictMatch;
						else if (looseMatch != null)
							return looseMatch;
						else // no matches were found, return center
							return defResult;
					},
					bounceDown: function (e) {
						if (e.target.tagName == "A" && !$(e).is(".bounce"))
							return;
						var point = e.originalEvent && e.originalEvent.touches ? e.originalEvent.touches[0] : e,
                            offsetOfTile = $tile.offset(),
                            scrollX = window.pageXOffset,
                            scrollY = window.pageYOffset;
						data.bounceMethods.pointPos = {
							x: point.pageX,
							y: point.pageY
						};
						data.bounceMethods.inTilePos = {
							x: point.pageX - offsetOfTile.left,
							y: point.pageY - offsetOfTile.top
						};

						if (!data.$tileParent) {
							data.$tileParent = $tile.parent();
						}
						var offsetOfParent = data.$tileParent.offset();
						data.bounceMethods.eventPos = {
							x: (offsetOfTile.left - offsetOfParent.left) + ($tile.width() / 2),
							y: (offsetOfTile.top - offsetOfParent.top) + ($tile.height() / 2)
						};
						var hit = data.bounceMethods.hitTest($tile, data.bounceMethods.inTilePos, data.bounceDirections, 0.25);
						if (hit == null)
							data.bounceMethods.down = "no";
						else {
							if (window.PointerEvent || window.MSPointerEvent) {
								var eventPrefix = window.MSPointerEvent ? "MS" : "";
								document.addEventListener(eventPrefix + 'PointerUp', data.bounceMethods.bounceUp, false);
								$tile[0].addEventListener(eventPrefix + 'PointerUp', data.bounceMethods.bounceUp, false);
								document.addEventListener(eventPrefix + 'PointerCancel', data.bounceMethods.bounceUp, false);
								if (data.bounceFollowsMove)
									$tile[0].addEventListener(eventPrefix + 'PointerMove', data.bounceMethods.bounceMove, false);
							} else {
								$(document).bind("mouseup.liveTile, touchend.liveTile, touchcancel.liveTile, dragstart.liveTile", data.bounceMethods.bounceUp);
								if (data.bounceFollowsMove) {
									$tile.bind("touchmove.liveTile", data.bounceMethods.bounceMove);
									$tile.bind("mousemove.liveTile", data.bounceMethods.bounceMove);
								}
							}
							var bClass = "bounce-" + hit.name;
							$tile.addClass(bClass);
							data.bounceMethods.down = bClass;
							data.bounceMethods.downPcss = helperMethods.appendStyleProperties({}, ['perspective-origin'], [data.bounceMethods.eventPos.x + "px " + data.bounceMethods.eventPos.y + "px"]);
							data.$tileParent.css(data.bounceMethods.downPcss);
						}
					},
					bounceUp: function () {
						if (data.bounceMethods.down != "no") {
							data.bounceMethods.unBounce();
							if (window.PointerEvent || window.MSPointerEvent) {
								var eventPrefix = window.MSPointerEvent ? "MS" : "";
								document.removeEventListener(eventPrefix + 'PointerUp', data.bounceMethods.bounceUp, false);
								$tile[0].removeEventListener(eventPrefix + 'PointerUp', data.bounceMethods.bounceUp, false);
								document.removeEventListener(eventPrefix + 'PointerCancel', data.bounceMethods.bounceUp, false);
								if (data.bounceFollowsMove)
									$tile[0].removeEventListener(eventPrefix + 'PointerMove', data.bounceMethods.bounceMove, false);

							} else
								$(document).unbind("mouseup.liveTile, touchend.liveTile, touchcancel.liveTile, dragstart.liveTile", data.bounceMethods.bounceUp);
							if (data.bounceFollowsMove) {
								$tile.unbind("touchmove.liveTile", data.bounceMethods.bounceMove);
								$tile.unbind("mousemove.liveTile", data.bounceMethods.bounceMove);
							}
						}
					},
					bounceMove: function (e) {
						if (data.bounceMethods.down != "no") {
							var point = e.originalEvent && e.originalEvent.touches ? e.originalEvent.touches[0] : e,
                                x = Math.abs(point.pageX - data.bounceMethods.pointPos.x),
                                y = Math.abs(point.pageY - data.bounceMethods.pointPos.y);
							if (x > data.bounceMethods.threshold || y > data.bounceMethods.threshold) {
								var bounceClass = data.bounceMethods.down;
								data.bounceMethods.bounceDown(e);
								if (bounceClass != data.bounceMethods.down)
									$tile.removeClass(bounceClass);
							}
						}
					},
					unBounce: function () {
						$tile.removeClass(data.bounceMethods.down);
						if (typeof (data.bounceMethods.downPcss) == "object") {
							var names = ['perspective-origin', 'perspective-origin-x', 'perspective-origin-y'],
                                vals = ['', '', ''];
							data.bounceMethods.downPcss = helperMethods.appendStyleProperties({}, names, vals);
							// let the bounce finish and then strip out the perspective
							window.setTimeout(function () {
								data.$tileParent.css(data.bounceMethods.downPcss);
							}, 200);
						}
						data.bounceMethods.down = "no";
						data.bounceMethods.inTilePos = data.bounceMethods.zeroPos;
						data.bounceMethods.eventPos = data.bounceMethods.zeroPos;
					}
				};
				// IE 10+
				if (window.PointerEvent || window.MSPointerEvent) {// touch only -> // && window.navigator.msMaxTouchPoints) {
					var eventPrefix = window.MSPointerEvent ? "MS" : "";
					$tile[0].addEventListener(eventPrefix + 'PointerDown', data.bounceMethods.bounceDown, false);
				} else if (metrojs.capabilities.canTouch) {
					// everybody else                    
					$tile.bind("touchstart.liveTile", data.bounceMethods.bounceDown);
					$tile.bind("mousedown.liveTile", data.bounceMethods.bounceDown);

				} else {
					$tile.bind("mousedown.liveTile", data.bounceMethods.bounceDown);
				}
			})();
		}
	},
	unbindMsBounce: function ($tile, data) {
		if (data.bounce && (window.PointerEvent || window.MSPointerEvent)) {// touch only -> // && window.navigator.msMaxTouchPoints) {
			var eventPrefix = window.MSPointerEvent ? "MS" : "";
			$tile[0].removeEventListener(eventPrefix + 'PointerDown', data.bounceMethods.bounceDown, false);
			$tile[0].removeEventListener(eventPrefix + 'PointerCancel', data.bounceMethods.bounceUp, false);
			$tile[0].removeEventListener(eventPrefix + 'PointerOut', data.bounceMethods.bounceUp, false);
			//$tile[0].removeEventListener(eventPrefix + 'PointerMove', data.bounceMethods.bounceMove, false);
		}
	},
	bindLink: function ($tile, data) {
		if (data.link.length > 0) {
			$tile.css({ cursor: 'pointer' }).bind("click.liveTile", function (e) {
				if (e.target.tagName == "A" && !$(e).is(".live-tile,.slide,.flip"))
					return;
				if (data.newWindow)
					window.open(data.link);
				else
					window.location = data.link;
			});
		}
	},
	runContenModules: function (data, $front, $back, index) {
		for (var i = 0; i < data.contentModules.length; i++) {
			var currentModule = data.contentModules[i];
			if (typeof (currentModule.action) == "function")
				currentModule.action(data, $front, $back, index);
		}
	},
	fade: function ($tile, count, data) {
		var tdata = typeof (data) === "object" ? data : $tile.data("LiveTile"),
            resumeTimer = function () {
            	// if the tile should run again start the timer back with the current delay
            	if (tdata.timer.repeatCount > 0 || tdata.timer.repeatCount == -1) {
            		if (tdata.timer.count != tdata.timer.repeatCount) {
            			tdata.timer.start(tdata.delay);
            		}
            	}
            };
		if (typeof (tdata) === "undefined") {
			throwError($.fn.liveTile.defaults.rebindMessage);
			return;
		}
		if (tdata.faces.$front.is(":animated"))
			return;
		tdata.timer.pause();
		var loopCount = tdata.loopCount + 1;
		tdata.isReversed = loopCount % 2 === 0; // the count starts at 1
		var start = tdata.animationStarting.call($tile[0], tdata, tdata.faces.$front, tdata.faces.$back);
		if (typeof (start) != "undefined" && start == false) {
			resumeTimer();
			return;
		}
		tdata.loopCount = loopCount;
		var faded = function () {
			resumeTimer();
			// run content modules and animationComplete callback
			privMethods.runContenModules(tdata, tdata.faces.$front, tdata.faces.$back);
			tdata.animationComplete.call($tile[0], tdata, tdata.faces.$front, tdata.faces.$back);
		};
		if (tdata.isReversed)
			tdata.faces.$front.fadeIn(tdata.speed, tdata.noHaTransFunc, faded);
		else
			tdata.faces.$front.fadeOut(tdata.speed, tdata.noHaTransFunc, faded);
	},
	slide: function ($tile, count, data, stopIndex, callback) {
		var tdata = typeof (data) === "object" ? data : $tile.data("LiveTile"),
            aniData = $tile.data("metrojs.tile");
		if (typeof (tdata) === "undefined") {
			throwError($.fn.liveTile.defaults.rebindMessage);
			return;
		}
		if (aniData.animating == true || $tile.is(":animated")) {
			tdata = null;
			aniData = null;
			return;
		}
		var resumeTimer = function () {
			// if the tile should run again start the timer back with the current delay
			if (tdata.timer.repeatCount > 0 || tdata.timer.repeatCount == -1) {
				if (tdata.timer.count != tdata.timer.repeatCount) {
					tdata.timer.start(tdata.delay);
				}
			}
		};
		if (tdata.mode !== "carousel") {
			tdata.isReversed = tdata.currentIndex % 2 !== 0;  // the count starts at 1
			// carousel mode maintains its own timer
			tdata.timer.pause();
			var start = tdata.animationStarting.call($tile[0], tdata, tdata.faces.$front, tdata.faces.$back);
			if (typeof (start) != "undefined" && start == false) {
				resumeTimer();
				return;
			}
			tdata.loopCount = tdata.loopCount + 1;
		} else {
			// in carousel mode the face that just left the stage is always the $back
			tdata.isReversed = true;
		}
		// get temp values passed in from data methods
		var direction;
		if (typeof (tdata.tempValues.direction) === "string" && tdata.tempValues.direction.length > 0)
			direction = tdata.tempValues.direction;
		else
			direction = tdata.direction;
		tdata.tempValues.direction = null;
		var css = {},
            cssback = {},
            // the stop index is overridden in carousel mode
            stopIdx = typeof (stopIndex) === "undefined" ? tdata.currentIndex : stopIndex,
            stop = $.trim(tdata.stops[Math.min(stopIdx, tdata.stops.length - 1)]),
            pxIdx = stop.indexOf('px'),
            offset = 0,
            amount = 0,
            metric = (direction === "vertical") ? tdata.height : tdata.width,
            tProp = (direction === "vertical") ? "top" : "left",
            stack = tdata.stack == true;
		// when the slide is complete increment the index or call the callback
		var slideFinished = function () {
			if (typeof (callback) === "undefined") {
				tdata.currentIndex = tdata.currentIndex + 1;
				if (tdata.currentIndex > tdata.stops.length - 1) {
					tdata.currentIndex = 0;
				}
			} else {
				callback();
			}
			if (tdata.mode != "carousel") {
				resumeTimer();
			}
			// run content modules and animationComplete callback            
			privMethods.runContenModules(tdata, tdata.faces.$front, tdata.faces.$back, tdata.currentIndex);
			tdata.animationComplete.call($tile[0], tdata, tdata.faces.$front, tdata.faces.$back);
			tdata = null;
			aniData = null;
		};
		if (pxIdx > 0) {
			amount = parseInt(stop.substring(0, pxIdx), 10);
			offset = (amount - metric) + 'px';
		} else {
			//is a percentage
			amount = parseInt(stop.replace('%', ''), 10);
			offset = (amount - 100) + '%';
		}
		// hardware accelerated :)
		if (metrojs.capabilities.canTransition && tdata.useHardwareAccel) {
			if (typeof (aniData.animating) !== "undefined" && aniData.animating == true)
				return;
			aniData.animating = true;
			var props = ['transition-property', 'transition-duration', 'transition-timing-function'],
                vals = [tdata.useTranslate ? "transform" : tProp, tdata.speed + 'ms', tdata.haTransFunc];
			vals[helperMethods.browserPrefix + 'transition-property'] = helperMethods.browserPrefix + "transform";
			css = helperMethods.appendStyleProperties(css, props, vals);
			cssback = helperMethods.appendStyleProperties(cssback, props, vals);
			var vertical = direction === "vertical",
                prop = vertical ? "top" : "left",
                translateTo;
			if (!tdata.useTranslate) {
				css[prop] = stop;
				if (stack)
					cssback[prop] = offset;
			} else {
				translateTo = vertical ? "translate(0%, " + stop + ")" : "translate(" + stop + ", 0%)";
				css = helperMethods.appendStyleProperties(css, ['transform'], [translateTo + "translateZ(0)"]);
				if (stack) {
					translateTo = vertical ? "translate(0%, " + offset + ")" : "translate(" + offset + ", 0%)";
					cssback = helperMethods.appendStyleProperties(cssback, ['transform'], [translateTo + "translateZ(0)"]);
				}
			}
			tdata.faces.$front.css(css);
			if (stack)
				tdata.faces.$back.css(cssback);
			window.clearTimeout(tdata.completeTimeout);
			tdata.completeTimeout = window.setTimeout(function () {
				aniData.animating = false;
				slideFinished();
			}, tdata.speed);
		} else {
			// not hardware accelerated :(
			css[tProp] = stop;
			cssback[tProp] = offset;
			aniData.animating = true;
			var $front = tdata.faces.$front.stop(),
                $back = tdata.faces.$back.stop();
			$front.animate(css, tdata.speed, tdata.noHaTransFunc, function () {
				aniData.animating = false;
				slideFinished();
			});
			// change the css value to the offset
			if (stack)
				$back.animate(cssback, tdata.speed, tdata.noHaTransFunc, function () { });
		}
	},
	carousel: function ($tile, count) {
		var tdata = $tile.data("LiveTile");
		if (typeof (tdata) === "undefined") {
			throwError($.fn.liveTile.defaults.rebindMessage);
			return;
		}
		// dont update css or call slide if animated or if there's only one face
		var aniData = $tile.data("metrojs.tile");
		if (aniData.animating == true || tdata.faces.$listTiles.length <= 1) {
			aniData = null;
			return;
		}
		var resumeTimer = function () {
			if (tdata.timer.repeatCount > 0 || tdata.timer.repeatCount == -1) {
				if (tdata.timer.count != tdata.timer.repeatCount) {
					tdata.timer.start(tdata.delay);
				}
			}
		};
		// pause the timer and use a per slide delay
		tdata.timer.pause();
		var $cur = tdata.faces.$listTiles.filter(".active"),
            idx = tdata.faces.$listTiles.index($cur),
            goTo = tdata.currentIndex,
            eq = goTo != idx ? goTo : idx,
            nxtIdx = eq + 1 >= tdata.faces.$listTiles.length ? 0 : eq + 1,
            sdata = tdata.listData[nxtIdx];
		if (idx == nxtIdx) {
			aniData = null;
			$cur = null;
			return;
		}
		// get temp values passed in from data methods
		var animationDirection;
		if (typeof (tdata.tempValues.animationDirection) === "string" && tdata.tempValues.animationDirection.length > 0)
			animationDirection = tdata.tempValues.animationDirection;
		else if (typeof (sdata.animationDirection) === "string" && sdata.animationDirection.length > 0) {
			animationDirection = sdata.animationDirection;
		} else
			animationDirection = tdata.animationDirection;
		// the temp value for animation direction is not used in slide so i'm setting it to null
		tdata.tempValues.animationDirection = null;
		var direction;
		if (typeof (tdata.tempValues.direction) === "string" && tdata.tempValues.direction.length > 0) {
			direction = tdata.tempValues.direction;
		} else if (typeof (sdata.direction) === "string" && sdata.direction.length > 0) {
			direction = sdata.direction;
			tdata.tempValues.direction = direction;
		} else {
			direction = tdata.direction;
		}
		var $nxt = tdata.faces.$listTiles.eq(nxtIdx),
            start = tdata.animationStarting.call($tile[0], tdata, $cur, $nxt);
		if (typeof (start) != "undefined" && start == false) {
			resumeTimer();
			return;
		}
		tdata.loopCount = tdata.loopCount + 1;
		var nxtCss = helperMethods.appendStyleProperties({}, ['transition-duration'], ['0s']),
            vertical = direction === "vertical",
            translateTo;
		if (animationDirection === "backward") {
			if (!tdata.useTranslate || !metrojs.capabilities.canTransition) {
				if (vertical) {
					nxtCss.top = "-100%";
					nxtCss.left = "0%";
				} else {
					nxtCss.top = "0%";
					nxtCss.left = "-100%";
				}
				tdata.stops = ['100%'];
			} else {
				translateTo = vertical ? "translate(0%, -100%)" : "translate(-100%, 0%)";
				nxtCss = helperMethods.appendStyleProperties(nxtCss, ["transform"], [translateTo + " translateZ(0)"]);
				tdata.stops = ['100%'];
			}
			tdata.faces.$front = $cur;
			tdata.faces.$back = $nxt;

		} else {
			if (!tdata.useTranslate || !metrojs.capabilities.canTransition) {
				if (vertical) {
					nxtCss.top = "100%";
					nxtCss.left = "0%";
				} else {
					nxtCss.top = "0%";
					nxtCss.left = "100%";
				}
			} else {
				translateTo = vertical ? "translate(0%, 100%)" : "translate(100%, 0%)";
				nxtCss = helperMethods.appendStyleProperties(nxtCss, ["transform"], [translateTo + " translateZ(0)"]);
			}
			tdata.faces.$front = $nxt;
			tdata.faces.$back = $cur;
			tdata.stops = ['0%'];
		}
		$nxt.css(nxtCss);
		// the timeout wrapper gives the css call above enough time to finish in case we dynamically set the direction
		window.setTimeout(function () {
			$cur.removeClass("active");
			$nxt.addClass("active");
			privMethods.slide($tile, count, tdata, 0, function () {
				tdata.currentIndex = nxtIdx;
				aniData = null;
				$cur = null;
				$nxt = null;
				resumeTimer();
			});
		}, 150);

	},
	flip: function ($tile, count, data, callback) {
		var aniData = $tile.data("metrojs.tile");
		if (typeof (aniData) !== "undefined" && aniData.animating == true) {
			aniData = null;
			return;
		}
		var tdata = typeof (data) === "object" ? data : $tile.data("LiveTile");
		if (typeof (tdata) === "undefined") {
			throwError($.fn.liveTile.defaults.rebindMessage);
			return;
		}
		var $front, $back, direction, deg, rotateDir, css,
            raiseEvt = typeof (callback) === "undefined",
            index = 0,
            isReversed,  // the count starts at 1
            resumeTimer = function () {
            	// if the tile should run again start the timer back with the current delay
            	if (tdata.timer.repeatCount > 0 || tdata.timer.repeatCount == -1) {
            		if (tdata.timer.count != tdata.timer.repeatCount) {
            			tdata.timer.start(tdata.delay);
            		}
            	}
            };
		// the timer is only paused if animationComplete is fired
		if (raiseEvt) {
			tdata.timer.pause();
			var loopCount = tdata.loopCount + 1;
			isReversed = loopCount % 2 === 0;
			tdata.isReversed = isReversed;
			$front = tdata.faces.$front;
			$back = tdata.faces.$back;
			var args = isReversed ? [tdata, $back, $front] : [tdata, $front, $back];
			var start = tdata.animationStarting.apply($tile[0], args);
			if (typeof (start) != "undefined" && start == false) {
				resumeTimer();
				return;
			}
			direction = tdata.direction;
			height = tdata.height;
			width = tdata.width;
			margin = tdata.margin;
			tdata.loopCount = loopCount;
		} else {
			isReversed = count % 2 === 0;
			index = aniData.index;
			$front = tdata.listData[index].faces.$front;
			$back = tdata.listData[index].faces.$back;
			tdata.listData[index].isReversed = isReversed;
			direction = tdata.listData[index].direction;
			height = tdata.listData[index].height;
			width = tdata.listData[index].width;
			margin = tdata.listData[index].margin;
		}

		if (metrojs.capabilities.canFlip3d && tdata.useHardwareAccel) { // Hardware accelerated :)
			deg = !isReversed ? "180deg" : "360deg";
			rotateDir = direction === "vertical" ? "rotateX(" + deg + ")" : "rotateY(" + deg + ")";
			css = helperMethods.appendStyleProperties({}, ["transform", "transition"], [rotateDir, "all " + tdata.speed + "ms " + tdata.haTransFunc + " 0s"]);
			var bDeg = !isReversed ? "360deg" : "540deg";
			var bRotateDir = direction === "vertical" ? "rotateX(" + bDeg + ")" : "rotateY(" + bDeg + ")";
			var bCss = helperMethods.appendStyleProperties({}, ["transform", "transition"], [bRotateDir, "all " + tdata.speed + "ms " + tdata.haTransFunc + " 0s"]);
			$front.css(css);
			$back.css(bCss);

			var action = function () {
				aniData.animating = false;
				var resetDir, newCss;
				if (!isReversed) {
					privMethods.runContenModules(tdata, $back, $front, index);
					if (raiseEvt) {
						resumeTimer();
						tdata.animationComplete.call($tile[0], tdata, $back, $front);
					} else
						callback(tdata, $back, $front);
				} else {
					resetDir = direction === "vertical" ? "rotateX(0deg)" : "rotateY(0deg)";
					newCss = helperMethods.appendStyleProperties({}, ["transform", "transition"], [resetDir, "all 0s " + tdata.haTransFunc + " 0s"]);
					$front.css(newCss);
					//call content modules
					privMethods.runContenModules(tdata, $front, $back, index);
					if (raiseEvt) {
						resumeTimer();
						tdata.animationComplete.call($tile[0], tdata, $front, $back);
					} else
						callback(tdata, $front, $back);
					$front = null;
					$back = null;
					tdata = null;
					aniData = null;
				}
			};
			if (tdata.mode === "flip-list") {
				window.clearTimeout(tdata.listData[index].completeTimeout);
				tdata.listData[index].completeTimeout = window.setTimeout(action, tdata.speed);
			} else {
				window.clearTimeout(tdata.completeTimeout);
				tdata.completeTimeout = window.setTimeout(action, tdata.speed);
			}
		} else { // not Hardware accelerated :(
			var speed = tdata.speed / 2;
			var hideCss = (direction === "vertical") ?
						{ height: '0px', width: '100%', marginTop: margin + 'px', opacity: tdata.noHAflipOpacity } :
						{ height: '100%', width: '0px', marginLeft: margin + 'px', opacity: tdata.noHAflipOpacity };
			var showCss = (direction === "vertical") ?
                        { height: '100%', width: '100%', marginTop: '0px', opacity: '1' } :
                        { height: '100%', width: '100%', marginLeft: '0px', opacity: '1' };
			var noHaAction;
			if (!isReversed) {
				aniData.animating = true;
				$front.stop().animate(hideCss, { duration: speed });
				noHaAction = function () {
					aniData.animating = false;
					$back.stop().animate(showCss, {
						duration: speed,
						complete: function () {
							privMethods.runContenModules(tdata, $back, $front, index);
							if (raiseEvt) {
								resumeTimer();
								tdata.animationComplete.call($tile[0], tdata, $back, $front);
							} else
								callback(tdata, $back, $front);
							$front = null;
							$back = null;
							tdata = null;
							aniData = null;
						}
					});
				};
				if (tdata.mode === "flip-list") {
					window.clearTimeout(tdata.listData[aniData.index].completeTimeout);
					tdata.listData[aniData.index].completeTimeout = window.setTimeout(noHaAction, speed);
				} else {
					window.clearTimeout(tdata.completeTimeout);
					tdata.completeTimeout = window.setTimeout(noHaAction, speed);
				}
			} else {
				aniData.animating = true;
				$back.stop().animate(hideCss, { duration: speed });
				noHaAction = function () {
					aniData.animating = false;
					$front.stop().animate(showCss, {
						duration: speed,
						complete: function () {
							privMethods.runContenModules(tdata, $front, $back, index);
							if (raiseEvt) {
								resumeTimer();
								tdata.animationComplete.call($tile[0], tdata, $front, $back);
							} else
								callback(tdata, $front, $back);
							aniData = null;
							$front = null;
							$back = null;
						}
					});
				};
				if (tdata.mode === "flip-list") {
					window.clearTimeout(tdata.listData[aniData.index].completeTimeout);
					tdata.listData[aniData.index].completeTimeout = window.setTimeout(noHaAction, speed);
				} else {
					window.clearTimeout(tdata.completeTimeout);
					tdata.completeTimeout = window.setTimeout(noHaAction, speed);
				}
			}

		}
	},
	flipList: function ($tile, count) {
		var tdata = $tile.data("LiveTile"),
            maxDelay = tdata.speed,
            triggered = false,
            resumeTimer = function () {
            	if (tdata.timer.repeatCount > 0 || tdata.timer.repeatCount == -1) {
            		if (tdata.timer.count != tdata.timer.repeatCount) {
            			tdata.timer.start(tdata.delay);
            		}
            	}
            };
		if (typeof (tdata) === "undefined") {
			throwError($.fn.liveTile.defaults.rebindMessage);
			return;
		}
		tdata.timer.pause();
		var start = tdata.animationStarting.call($tile[0], tdata, null, null);
		if (typeof (start) != "undefined" && start == false) {
			resumeTimer();
			return;
		}
		tdata.loopCount = tdata.loopCount + 1;
		tdata.faces.$listTiles.each(function (idx, ele) {
			var $li = $(ele),
                ldata = $li.data("metrojs.tile"),
                tDelay = tdata.triggerDelay(idx),
                triggerDelay = tdata.speed + Math.max(tDelay, 0),
                trigger = tdata.alwaysTrigger;
			if (!trigger)
				trigger = (Math.random() * 351) > 150 ? true : false;
			if (trigger) {
				triggered = true;
				maxDelay = Math.max(triggerDelay + tdata.speed, maxDelay);
				window.clearTimeout(ldata.flCompleteTimeout);
				ldata.flCompleteTimeout = window.setTimeout(function () {
					// call the flip method with the merged data, but dont fire animationComplete
					privMethods.flip($li, ldata.count, tdata, function (data) {
						ldata.count++;
						if (ldata.count >= MAX_LOOP_COUNT)
							ldata.count = 1;
						$li = null;
						ldata = null;
					});
				}, triggerDelay);
			}
		});
		if (triggered) {
			window.clearTimeout(tdata.flCompleteTimeout);
			tdata.flCompleteTimeout = window.setTimeout(function () {
				privMethods.runContenModules(tdata, null, null, -1);
				tdata.animationComplete.call($tile[0], tdata, null, null);
				resumeTimer();
			}, maxDelay + tdata.speed); // add some padding to make sure the final callback finished

		}
	}
};


// methods that can be called more universally
var helperMethods = {
	stylePrefixes: 'Webkit Moz O ms Khtml '.split(' '),
	domPrefixes: '-webkit- -moz- -o- -ms- -khtml- '.split(' '),
	browserPrefix: null,
	// a method to append css3 properties for each browser
	// note: values are identical for each property
	appendStyleProperties: function (obj, names, values) {
		for (var i = 0; i <= names.length - 1; i++) {
			obj[$.trim(this.browserPrefix + names[i])] = values[i];
			obj[$.trim(names[i])] = values[i];
		}
		return obj;
	},
	applyStyleValue: function (obj, name, value) {
		obj[$.trim(this.browserPrefix + name)] = value;
		obj[name] = value;
		return obj;
	},
	getBrowserPrefix: function () {
		if (this.browserPrefix == null) {
			var prefix = "";
			for (var i = 0; i <= this.domPrefixes.length - 1; i++) {
				if (typeof (document.body.style[this.domPrefixes[i] + "transform"]) != "undefined")
					prefix = this.domPrefixes[i];
			}
			return this.browserPrefix = prefix;
		}
		return this.browserPrefix;
	},
	//a shuffle method to provide more randomness than sort
	//credit: http://javascript.about.com/library/blshuffle.htm
	//note: avoiding prototype for sharepoint compatability
	shuffleArray: function (array) {
		var s = [];
		while (array.length) s.push(array.splice(Math.random() * array.length, 1));
		while (s.length) array.push(s.pop());
		return array;
	}
};

var defaultModules = {
	moduleName: 'custom',
	customSwap: {
		data: {
			customDoSwapFront: function () { return false; },
			customDoSwapBack: function () { return false; },
			customGetContent: function (tdata, $front, $back, index) { return null; }
		},
		initData: function (tdata, $ele) {
			var swapData = {};
			swapData.doSwapFront = $.inArray('custom', tdata.swapFront) > -1 && tdata.customDoSwapFront();
			swapData.doSwapBack = $.inArray('custom', tdata.swapBack) > -1 && tdata.customDoSwapBack();
			if (typeof (tdata.customSwap) !== "undefined")
				tdata.customSwap = $.extend(swapData, tdata.customSwap);
			else
				tdata.customSwap = swapData;
		},
		action: function (tdata, $front, $back, index) {

		}
	},
	htmlSwap: {
		moduleName: 'html',
		data: { // public data for the swap module                
			frontContent: [],                       // a list of html to use for the front
			frontIsRandom: true,                    // should html be chosen at random or in order                
			frontIsInGrid: false,                   // only chooses one item for each iteration in flip-list                
			backContent: [],                        // a list of html to use for the back
			backIsRandom: true,                     // should html be chosen at random or in order                
			backIsInGrid: false                     // only chooses one item for each iteration in flip-list                
		},
		initData: function (tdata, $ele) {
			var swapData = { // private data for the swap module
				backBag: [],
				backIndex: 0,
				backStaticIndex: 0,
				backStaticRndm: -1,
				prevBackIndex: -1,
				frontBag: [],
				frontIndex: 0,
				frontStaticIndex: 0,
				frontStaticRndm: -1,
				prevFrontIndex: -1
			};
			if (!tdata.ignoreDataAttributes) {
				swapData.frontIsRandom = privMethods.getDataOrDefault($ele, "front-israndom", tdata.frontIsRandom);
				swapData.frontIsInGrid = privMethods.getDataOrDefault($ele, "front-isingrid", tdata.frontIsInGrid);
				swapData.backIsRandom = privMethods.getDataOrDefault($ele, "back-israndom", tdata.backIsRandom);
				swapData.backIsInGrid = privMethods.getDataOrDefault($ele, "back-isingrid", tdata.backIsInGrid);
			} else {
				swapData.frontIsRandom = tdata.frontIsRandom;
				swapData.frontIsInGrid = tdata.frontIsInGrid;
				swapData.backIsRandom = tdata.backIsRandom;
				swapData.backIsInGrid = tdata.backIsInGrid;
			}
			swapData.doSwapFront = $.inArray('html', tdata.swapFront) > -1 && (tdata.frontContent instanceof Array) && tdata.frontContent.length > 0;
			swapData.doSwapBack = $.inArray('html', tdata.swapBack) > -1 && (tdata.backContent instanceof Array) && tdata.backContent.length > 0;
			if (typeof (tdata.htmlSwap) !== "undefined")
				tdata.htmlSwap = $.extend(swapData, tdata.htmlSwap);
			else
				tdata.htmlSwap = swapData;
			if (tdata.htmlSwap.doSwapFront) {
				tdata.htmlSwap.frontBag = this.prepBag(tdata.htmlSwap.frontBag, tdata.frontContent, tdata.htmlSwap.prevFrontIndex);
				tdata.htmlSwap.frontStaticRndm = tdata.htmlSwap.frontBag.pop();
			}
			if (tdata.htmlSwap.doSwapBack) {
				tdata.htmlSwap.backBag = this.prepBag(tdata.htmlSwap.backBag, tdata.backContent, tdata.htmlSwap.prevBackIndex);
				tdata.htmlSwap.backStaticRndm = tdata.htmlSwap.backBag.pop();
			}
		},
		prepBag: function (bag, content, prevIdx) {
			bag = bag || [];
			var bagCount = 0;
			for (var i = 0; i < content.length; i++) {
				//make sure there's not an immediate repeat
				if (i != prevIdx || bag.length === 1) {
					bag[bagCount] = i;
					bagCount++;
				}
			}
			return helperMethods.shuffleArray(bag);
		},
		getFrontSwapIndex: function (tdata) {
			var idx = 0;
			if (!tdata.htmlSwap.frontIsRandom) {
				idx = tdata.htmlSwap.frontIsInGrid ? tdata.htmlSwap.frontStaticIndex : tdata.htmlSwap.frontIndex;
			} else {
				if (tdata.htmlSwap.frontBag.length === 0) {
					tdata.htmlSwap.frontBag = this.prepBag(tdata.htmlSwap.frontBag, tdata.frontContent, tdata.htmlSwap.prevFrontIndex);
				}
				if (tdata.htmlSwap.frontIsInGrid) {
					idx = tdata.htmlSwap.frontStaticRndm;
				} else {
					idx = tdata.htmlSwap.frontBag.pop();
				}
			}
			return idx;
		},
		getBackSwapIndex: function (tdata) {
			var idx = 0;
			if (!tdata.htmlSwap.backIsRandom) {
				idx = tdata.htmlSwap.backIsInGrid ? tdata.htmlSwap.backStaticIndex : tdata.htmlSwap.backIndex;
			} else {
				if (tdata.htmlSwap.backBag.length === 0) {
					tdata.htmlSwap.backBag = this.prepBag(tdata.htmlSwap.backBag, tdata.backContent, tdata.htmlSwap.prevBackIndex);
				}
				if (tdata.htmlSwap.backIsInGrid) {
					idx = tdata.htmlSwap.backStaticRndm;
				} else {
					idx = tdata.htmlSwap.backBag.pop();
				}
			}
			return idx;
		},
		action: function (tdata, $front, $back, index) {
			if (!tdata.htmlSwap.doSwapFront && !tdata.htmlSwap.doSwapBack)
				return;
			var isList = tdata.mode === "flip-list";
			var swapIndex = 0;
			var isReversed = isList ? tdata.listData[Math.max(index, 0)].isReversed : tdata.isReversed;
			if (isList && index == -1) {
				// flip list completed
				if (!isReversed) {
					if (tdata.htmlSwap.doSwapFront) {
						// update the random value for grid mode
						if (tdata.htmlSwap.frontBag.length === 0)
							tdata.htmlSwap.frontBag = this.prepBag(tdata.htmlSwap.frontBag, tdata.frontContent, tdata.htmlSwap.frontStaticRndm);
						tdata.htmlSwap.frontStaticRndm = tdata.htmlSwap.frontBag.pop();
						// update the static index
						tdata.htmlSwap.frontStaticIndex++;
						if (tdata.htmlSwap.frontStaticIndex >= tdata.frontContent.length)
							tdata.htmlSwap.frontStaticIndex = 0;
					}
				} else {
					if (tdata.htmlSwap.doSwapBack) {
						// update the random value for grid mode
						if (tdata.htmlSwap.backBag.length === 0)
							tdata.htmlSwap.backBag = this.prepBag(tdata.htmlSwap.backBag, tdata.backContent, tdata.htmlSwap.backStaticRndm);
						tdata.htmlSwap.backStaticRndm = tdata.htmlSwap.backBag.pop();
						// update the static index
						tdata.htmlSwap.backStaticIndex++;
						if (tdata.htmlSwap.backStaticIndex >= tdata.backContent.length)
							tdata.htmlSwap.backStaticIndex = 0;
					}
				}
				return;
			}
			if (!isReversed) {
				if (!tdata.htmlSwap.doSwapFront)
					return;
				swapIndex = this.getFrontSwapIndex(tdata);
				tdata.htmlSwap.prevFrontIndex = swapIndex;
				if (tdata.mode === "slide") {
					if (!tdata.startNow)
						$front.html(tdata.frontContent[swapIndex]);
					else
						$back.html(tdata.frontContent[swapIndex]);
				} else
					$back.html(tdata.frontContent[swapIndex]);
				// increment the front index to get the next item from the list
				tdata.htmlSwap.frontIndex++;
				if (tdata.htmlSwap.frontIndex >= tdata.frontContent.length)
					tdata.htmlSwap.frontIndex = 0;
				if (!isList) {
					// increment the static index if we're not in list mode
					tdata.htmlSwap.frontStaticIndex++;
					if (tdata.htmlSwap.frontStaticIndex >= tdata.frontContent.length)
						tdata.htmlSwap.frontStaticIndex = 0;
				} else {
					// flip list
				}
			} else {
				if (!tdata.htmlSwap.doSwapBack)
					return;
				swapIndex = this.getBackSwapIndex(tdata);
				tdata.htmlSwap.prevBackIndex = swapIndex;
				$back.html(tdata.backContent[tdata.htmlSwap.backIndex]);
				tdata.htmlSwap.backIndex++;
				if (tdata.htmlSwap.backIndex >= tdata.backContent.length)
					tdata.htmlSwap.backIndex = 0;
				if (!isList) {
					tdata.htmlSwap.backStaticIndex++;
					if (tdata.htmlSwap.backStaticIndex >= tdata.backContent.length)
						tdata.htmlSwap.backStaticIndex = 0;
				} else {
					// flip list
				}
			}
		}
	},
	imageSwap: {
		moduleName: 'image',
		data: {
			preloadImages: false,
			imageCssSelector: '>img,>a>img',        // the selector used to choose a an image to apply a src or background to
			fadeSwap: false,                        // fade the image before swapping
			frontImages: [],                        // a list of images to use for the front
			frontIsRandom: true,                    // should images be chosen at random or in order
			frontIsBackgroundImage: false,          // set the src attribute or css background-image property
			frontIsInGrid: false,                   // only chooses one item for each iteration in flip-list
			backImages: null,                       // a list of images to use for the back
			backIsRandom: true,                     // should images be chosen at random or in order
			backIsBackgroundImage: false,           // set the src attribute or css background-image property
			backIsInGrid: false                     // only chooses one item for each iteration in flip-list                
		},
		initData: function (tdata, $ele) {
			var swapData = {
				backBag: [],
				backIndex: 0,
				backStaticIndex: 0,
				backStaticRndm: -1,
				frontBag: [],
				frontIndex: 0,
				frontStaticIndex: 0,
				frontStaticRndm: -1,
				prevBackIndex: -1,
				prevFrontIndex: -1
			}, useData = tdata.ignoreDataAttributes;
			if (useData) {
				swapData.imageCssSelector = privMethods.getDataOrDefault($ele, "image-css", tdata.imageCssSelector);
				swapData.fadeSwap = privMethods.getDataOrDefault($ele, "fadeswap", tdata.fadeSwap);
				swapData.frontIsRandom = privMethods.getDataOrDefault($ele, "front-israndom", tdata.frontIsRandom);
				swapData.frontIsInGrid = privMethods.getDataOrDefault($ele, "front-isingrid", tdata.frontIsInGrid);
				swapData.frontIsBackgroundImage = privMethods.getDataOrDefault($ele, "front-isbg", tdata.frontIsBackgroundImage);
				swapData.backIsRandom = privMethods.getDataOrDefault($ele, "back-israndom", tdata.backIsRandom);
				swapData.backIsInGrid = privMethods.getDataOrDefault($ele, "back-isingrid", tdata.backIsInGrid);
				swapData.backIsBackgroundImage = privMethods.getDataOrDefault($ele, "back-isbg", tdata.backIsBackgroundImage);
				swapData.doSwapFront = $.inArray('image', tdata.swapFront) > -1 && (tdata.frontImages instanceof Array) && tdata.frontImages.length > 0;
				swapData.doSwapBack = $.inArray('image', tdata.swapBack) > -1 && (tdata.backImages instanceof Array) && tdata.backImages.length > 0;
				swapData.alwaysSwapFront = privMethods.getDataOrDefault($ele, "front-alwaysswap", tdata.alwaysSwapFront);
				swapData.alwaysSwapBack = privMethods.getDataOrDefault($ele, "back-alwaysswap", tdata.alwaysSwapBack);
			} else {
				swapData.imageCssSelector = tdata.imageCssSelector;
				swapData.fadeSwap = tdata.fadeSwap;
				swapData.frontIsRandom = tdata.frontIsRandom;
				swapData.frontIsInGrid = tdata.frontIsInGrid;
				swapData.frontIsBackgroundImage = tdata.frontIsBackgroundImage;
				swapData.backIsRandom = tdata.backIsRandom;
				swapData.backIsInGrid = tdata.backIsInGrid;
				swapData.backIsBackgroundImage = tdata.backIsBackgroundImage;
				swapData.doSwapFront = $.inArray('image', tdata.swapFront) > -1 && (tdata.frontImages instanceof Array) && tdata.frontImages.length > 0;
				swapData.doSwapBack = $.inArray('image', tdata.swapBack) > -1 && (tdata.backImages instanceof Array) && tdata.backImages.length > 0;
				swapData.alwaysSwapFront = tdata.alwaysSwapFront;
				swapData.alwaysSwapBack = tdata.alwaysSwapBack;
			}
			if (typeof (tdata.imgSwap) !== "undefined")
				tdata.imgSwap = $.extend(swapData, tdata.imgSwap);
			else
				tdata.imgSwap = swapData;
			if (tdata.imgSwap.doSwapFront) {
				tdata.imgSwap.frontBag = this.prepBag(tdata.imgSwap.frontBag, tdata.frontImages, tdata.imgSwap.prevFrontIndex);
				tdata.imgSwap.frontStaticRndm = tdata.imgSwap.frontBag.pop();
				if (tdata.preloadImages)
					$(tdata.frontImages).metrojs.preloadImages(function () { });
			}
			if (tdata.imgSwap.doSwapBack) {
				tdata.imgSwap.backBag = this.prepBag(tdata.imgSwap.backBag, tdata.backImages, tdata.imgSwap.prevBackIndex);
				tdata.imgSwap.backStaticRndm = tdata.imgSwap.backBag.pop();
				if (tdata.preloadImages)
					$(tdata.backImages).metrojs.preloadImages(function () { });
			}
		},
		prepBag: function (bag, content, prevIdx) {
			bag = bag || [];
			var bagCount = 0;
			for (var i = 0; i < content.length; i++) {
				//make sure there's not an immediate repeat
				if (i != prevIdx || content.length === 1) {
					bag[bagCount] = i;
					bagCount++;
				}
			}
			return helperMethods.shuffleArray(bag);
		},
		getFrontSwapIndex: function (tdata) {
			var idx = 0;
			if (!tdata.imgSwap.frontIsRandom) {
				idx = tdata.imgSwap.frontIsInGrid ? tdata.imgSwap.frontStaticIndex : tdata.imgSwap.frontIndex;
			} else {
				if (tdata.imgSwap.frontBag.length === 0) {
					tdata.imgSwap.frontBag = this.prepBag(tdata.imgSwap.frontBag, tdata.frontImages, tdata.imgSwap.prevFrontIndex);
				}
				if (tdata.imgSwap.frontIsInGrid) {
					idx = tdata.imgSwap.frontStaticRndm;
				} else {
					idx = tdata.imgSwap.frontBag.pop();
				}
			}
			return idx;
		},
		getBackSwapIndex: function (tdata) {
			var idx = 0;
			if (!tdata.imgSwap.backIsRandom) {
				idx = tdata.imgSwap.backIsInGrid ? tdata.imgSwap.backStaticIndex : tdata.imgSwap.backIndex;
			} else {
				if (tdata.imgSwap.backBag.length === 0) {
					tdata.imgSwap.backBag = this.prepBag(tdata.imgSwap.backBag, tdata.backImages, tdata.imgSwap.prevBackIndex);
				}
				if (tdata.imgSwap.backIsInGrid) {
					idx = tdata.imgSwap.backStaticRndm;
				} else {
					idx = tdata.imgSwap.backBag.pop();
				}
			}
			return idx;
		},
		setImageProperties: function ($img, image, isBackground) {
			var css = {}, // css object to apply
                attr = {}; // attribute values to apply
			// get image source
			if (typeof (image.src) !== 'undefined') {
				if (!isBackground)
					attr.src = image.src;
				else
					css.backgroundImage = "url('" + image.src + "')";
			}
			// get alt text
			if (typeof (image.alt) !== 'undefined')
				attr.alt = image.alt;
			// set css
			if (typeof (image.css) === 'object')
				$img.css($.extend(css, image.css));
			else
				$img.css(css);
			// set attributes
			if (typeof (image.attr) === 'object')
				$img.attr($.extend(attr, image.attr));
			else
				$img.attr(attr);
		},
		action: function (tdata, $front, $back, index) {
			if (!tdata.imgSwap.doSwapFront && !tdata.imgSwap.doSwapBack)
				return;
			var isList = tdata.mode === "flip-list",
                isSlide = tdata.mode == "slide",
                swapIndex = 0,
                isReversed = isList ? tdata.listData[Math.max(index, 0)].isReversed : tdata.isReversed;
			if (isList && index == -1) {
				// flip list completed
				if (tdata.alwaysSwapFront || !isReversed) {
					if (tdata.imgSwap.doSwapFront) {
						// update the random value for grid mode
						if (tdata.imgSwap.frontBag.length === 0)
							tdata.imgSwap.frontBag = this.prepBag(tdata.imgSwap.frontBag, tdata.frontImages, tdata.imgSwap.frontStaticRndm);
						tdata.imgSwap.frontStaticRndm = tdata.imgSwap.frontBag.pop();
						// update the static index
						tdata.imgSwap.frontStaticIndex++;
						if (tdata.imgSwap.frontStaticIndex >= tdata.frontImages.length)
							tdata.imgSwap.frontStaticIndex = 0;
					}
				}
				if (tdata.alwaysSwapBack || isReversed) {
					if (tdata.imgSwap.doSwapBack) {
						// update the random value for grid mode
						if (tdata.imgSwap.backBag.length === 0)
							tdata.imgSwap.backBag = this.prepBag(tdata.imgSwap.backBag, tdata.backImages, tdata.imgSwap.backStaticRndm);
						tdata.imgSwap.backStaticRndm = tdata.imgSwap.backBag.pop();
						// update the static index
						tdata.imgSwap.backStaticIndex++;
						if (tdata.imgSwap.backStaticIndex >= tdata.backImages.length)
							tdata.imgSwap.backStaticIndex = 0;
					}
				}
				return;
			}
			var $face, // face being swapped
                $img, // image to apply values
                image,// image object to hold properties
                swap; // wrapper for setimageProperties for fade
			if (tdata.alwaysSwapFront || !isReversed) {
				if (!tdata.imgSwap.doSwapFront)
					return;
				swapIndex = this.getFrontSwapIndex(tdata);
				tdata.imgSwap.prevFrontIndex = swapIndex;
				// slide mode has a static front and back face
				$face = (tdata.mode === "slide") ? $front : $back;
				$img = $face.find(tdata.imgSwap.imageCssSelector);
				image = typeof (tdata.frontImages[swapIndex]) === "object" ? tdata.frontImages[swapIndex] : { src: tdata.frontImages[swapIndex] };
				swap = function (callback) {
					// set src, alt, css and attribute values
					var isBg = tdata.imgSwap.frontIsBackgroundImage;
					if (typeof (callback) == "function") {
						if (isBg)
							window.setTimeout(callback, 100);
						else
							$img[0].onload = callback;
					}
					defaultModules.imageSwap.setImageProperties($img, image, isBg);

				};
				if (tdata.fadeSwap) {
					$img.fadeOut(function () {
						swap(function () {
							$img.fadeIn();
						});
					});
				} else
					swap();
				// increment indexes
				tdata.imgSwap.frontIndex++;
				if (tdata.imgSwap.frontIndex >= tdata.frontImages.length)
					tdata.imgSwap.frontIndex = 0;
				if (!isList) {
					tdata.imgSwap.frontStaticIndex++;
					if (tdata.imgSwap.frontStaticIndex >= tdata.frontImages.length)
						tdata.imgSwap.frontStaticIndex = 0;
				} else {

				}
			}
			if (tdata.alwaysSwapBack || isReversed) {
				if (!tdata.imgSwap.doSwapBack)
					return;
				// get the new index
				swapIndex = this.getBackSwapIndex(tdata);
				tdata.imgSwap.prevBackIndex = swapIndex;
				// use the $face var for consistency
				$face = $back;
				$img = $face.find(tdata.imgSwap.imageCssSelector);
				image = typeof (tdata.backImages[swapIndex]) === "object" ? tdata.backImages[swapIndex] : { src: tdata.backImages[swapIndex] };
				swap = function () {
					// set src, alt, css and attribute values
					defaultModules.imageSwap.setImageProperties($img, image, tdata.imgSwap.backIsBackgroundImage);
				};
				if (tdata.fadeSwap) {
					$img.fadeOut(function () {
						swap(function () {
							$img.fadeIn();
						});
					});
				} else
					swap();
				// increment indexes
				tdata.imgSwap.backIndex++;
				if (tdata.imgSwap.backIndex >= tdata.backImages.length)
					tdata.imgSwap.backIndex = 0;
				if (!isList) {
					tdata.imgSwap.backStaticIndex++;
					if (tdata.imgSwap.backStaticIndex >= tdata.backImages.length)
						tdata.imgSwap.backStaticIndex = 0;
				} else {

				}
			}
		}
	}
};

// object to maintain timer state
$.fn.metrojs.TileTimer = function (interval, callback, repeatCount) {
	this.timerId = null;                                                        // the id of the current timeout
	this.interval = interval;                                                   // the amount of time to wait between each action call
	this.action = callback;                                                     // the method that is fired on each tick
	this.count = 0;                                                             // the number of times the action has been fired
	this.repeatCount = typeof (repeatCount) === "undefined" ? 0 : repeatCount;   // the number of times the action will be fired        
	// call the action method after a delay and call start | stop based on repeat count
	this.start = function (delay) {
		window.clearTimeout(this.timerId);
		var t = this;
		this.timerId = window.setTimeout(function () {
			t.tick.call(t, interval);
		}, delay);
	};

	this.tick = function (when) {
		this.action(this.count + 1);
		this.count++;
		// reset the loop count
		if (this.count >= MAX_LOOP_COUNT)
			this.count = 0;
		if (this.repeatCount > 0 || this.repeatCount == -1) {
			if (this.count != this.repeatCount) {
				this.start(when);
			} else
				this.stop();
		}
	}
	// clear the timer and reset the count
	this.stop = function () {
		this.timerId = window.clearTimeout(this.timerId);
		this.reset();
	};

	this.resume = function () {
		if (this.repeatCount > 0 || this.repeatCount == -1) {
			if (this.count != this.repeatCount) {
				this.start(interval);
			}
		}
	};

	// clear the timer but leave the count intact
	this.pause = function () {
		this.timerId = window.clearTimeout(this.timerId);
	};

	// reset count
	this.reset = function () {
		this.count = 0;
	};

	// reset count and timer
	this.restart = function (delay) {
		this.stop();
		this.start(delay);
	};
};
jQuery.fn.metrojs.theme = {
	loadDefaultTheme: function (stgs) {
		if (typeof (stgs) === "undefined" || stgs == null) {
			stgs = jQuery.fn.metrojs.theme.defaults;
		} else {
			var stg = jQuery.fn.metrojs.theme.defaults;
			jQuery.extend(stg, stgs);
			stgs = stg;
		}
		//get theme from local storage or set base theme
		var hasLocalStorage = typeof (window.localStorage) !== "undefined";
		var hasKeyAndValue = function (key) {
			return (typeof (window.localStorage[key]) !== "undefined" && window.localStorage[key] != null);
		};
		if (hasLocalStorage && (!hasKeyAndValue("Metro.JS.AccentColor") || !hasKeyAndValue("Metro.JS.BaseAccentColor"))) {
			//base theme
			window.localStorage["Metro.JS.AccentColor"] = stgs.accentColor;
			window.localStorage["Metro.JS.BaseAccentColor"] = stgs.baseTheme;
			jQuery(stgs.accentCssSelector).addClass(stgs.accentColor).data("accent", stgs.accentColor);
			jQuery(stgs.baseThemeCssSelector).addClass(stgs.baseTheme);
			if (typeof (stgs.loaded) === "function")
				stgs.loaded(stgs.baseTheme, stgs.accentColor);
			//preload light theme image
			if (typeof (stgs.preloadAltBaseTheme) !== "undefined" && stgs.preloadAltBaseTheme)
				jQuery([(stgs.baseTheme == 'dark') ? stgs.metroLightUrl : stgs.metroDarkUrl]).metrojs.preloadImages(function () { });
		} else {
			if (hasLocalStorage) {
				stgs.accentColor = window.localStorage["Metro.JS.AccentColor"];
				stgs.baseTheme = window.localStorage["Metro.JS.BaseAccentColor"];
				jQuery(stgs.accentCssSelector).addClass(stgs.accentColor).data("accent", stgs.accentColor);
				jQuery(stgs.baseThemeCssSelector).addClass(stgs.baseTheme);
				if (typeof (stgs.loaded) === "function")
					stgs.loaded(stgs.baseTheme, stgs.accentColor);
			} else {
				jQuery(stgs.accentCssSelector).addClass(stgs.accentColor).data("accent", stgs.accentColor);
				jQuery(stgs.baseThemeCssSelector).addClass(stgs.baseTheme);
				if (typeof (stgs.loaded) === "function")
					stgs.loaded(stgs.baseTheme, stgs.accentColor);
				//preload light theme image
				if (typeof (stgs.preloadAltBaseTheme) !== "undefined" && stgs.preloadAltBaseTheme)
					jQuery([(stgs.baseTheme == 'dark') ? stgs.metroLightUrl : stgs.metroDarkUrl]).metrojs.preloadImages(function () { });
			}
		}
	},
	applyTheme: function (tColor, aColor, stgs) {
		if (typeof (stgs) === "undefined" || stgs == null) {
			stgs = jQuery.fn.metrojs.theme.defaults;
		} else {
			var stg = jQuery.fn.metrojs.theme.defaults;
			stgs = jQuery.extend({}, stg, stgs);
		}

		if (typeof (tColor) !== "undefined" && tColor != null) {
			if (typeof (window.localStorage) !== "undefined") {
				window.localStorage["Metro.JS.BaseAccentColor"] = tColor;
			}
			var $theme = jQuery(stgs.baseThemeCssSelector);
			if ($theme.length > 0) {
				if (tColor == "dark")
					$theme.addClass("dark").removeClass("light");
				else if (tColor == "light")
					$theme.addClass("light").removeClass("dark");
			}
		}
		if (typeof (aColor) !== "undefined" && aColor != null) {
			if (typeof (window.localStorage) !== "undefined") {
				window.localStorage["Metro.JS.AccentColor"] = aColor;
			}
			var $accent = jQuery(stgs.accentCssSelector);
			if ($accent.length > 0) {
				var themeset = false;
				$accent.each(function () {
					jQuery(this).addClass(aColor);
					var dAccent = jQuery(this).data("accent");
					if (dAccent != aColor) {
						var cleanClass = jQuery(this).attr("class").replace(dAccent, "");
						cleanClass = cleanClass.replace(/(\s)+/, ' ');
						jQuery(this).attr("class", cleanClass);
						jQuery(this).data("accent", aColor);
						themeset = true;
					}
				});
				if (themeset && typeof (stgs.accentPicked) === "function")
					stgs.accentPicked(aColor);
			}
		}
	},
	appendAccentColors: function (stgs) {
		if (typeof (stgs) === "undefined" || stgs == null) {
			stgs = jQuery.fn.metrojs.theme.defaults;
		} else {
			var stg = jQuery.fn.metrojs.theme.defaults;
			stgs = jQuery.extend({}, stg, stgs);
		}
		var themeList = "";
		var themes = stgs.accentColors;
		var template = stgs.accentListTemplate;
		for (var i = 0; i < themes.length; i++) {
			themeList += template.replace(/\{0\}/g, themes[i]);
		}
		$(themeList).appendTo(stgs.accentListContainer);
	},
	appendBaseThemes: function (stgs) {
		if (typeof (stgs) === "undefined" || stgs == null) {
			stgs = jQuery.fn.metrojs.theme.defaults;
		} else {
			var stg = jQuery.fn.metrojs.theme.defaults;
			stgs = jQuery.extend({}, stg, stgs);
		}
		var themeList = "",
            themes = stgs.baseThemes,
            template = stgs.baseThemeListTemplate;
		for (var i = 0; i < themes.length; i++) {
			themeList += template.replace(/\{0\}/g, themes[i]);
		}
		$(themeList).appendTo(stgs.baseThemeListContainer);
	},
	// default options for theme
	defaults: {
		baseThemeCssSelector: 'body',                           // selector to place dark or light class after load or selection
		accentCssSelector: '.tiles',                            // selector to place accent color class after load or selection
		accentColor: 'blue',                                    // the default accent color. options are blue, brown, green, lime, magenta, mango, pink, purple, red, teal
		baseTheme: 'dark',                                      // the default theme color. options are dark, light
		accentColors: [
             'amber', 'blue', 'brown', 'cobalt', 'crimson', 'cyan',
             'magenta', 'lime', 'indigo', 'green', 'emerald',
             'mango', 'mauve', 'olive', 'orange', 'pink', 'red',
             'sienna', 'steel', 'teal', 'violet', 'yellow'
		],
		baseThemes: [
            'light',
            'dark'
		],
		accentListTemplate: "<li><a href='javascript:;' title='{0}' class='accent {0}'></a></li>", // template to generate accent options
		accentListContainer: "ul.theme-options,.theme-options>ul",                   // selector of container to append accents
		baseThemeListTemplate: "<li><a href='javascript:;' title='{0}' class='accent {0}'></a></li>", // template to generate accent options
		baseThemeListContainer: "ul.base-theme-options,.base-theme-options>ul"                    // selector of container to append accents
	}
};

jQuery.fn.applicationBar = function (options) {    
    /* Setup the public options for the applicationBar  */
    var stgs = typeof (jQuery.fn.metrojs.theme) !== "undefined" ? jQuery.fn.metrojs.theme.defaults : {};
    jQuery.extend(stgs, jQuery.fn.applicationBar.defaults, options);
    if (typeof (jQuery.fn.metrojs.theme) != "undefined") {
        var theme = jQuery.fn.metrojs.theme;
        if (stgs.shouldApplyTheme) {         
            theme.loadDefaultTheme(stgs);
        }
        var themeContainer = stgs.accentListContainer.replace(",", " a,") + " a";
        var themeContainerClick = function () {
            var accent = jQuery(this).attr("class").replace("accent", "").replace(" ", "");
            theme.applyTheme(null, accent, stgs);
            if (typeof (stgs.accentPicked) == "function")
                stgs.accentPicked(accent);
        };
        var baseContainer = stgs.baseThemeListContainer.replace(","," a,") + " a";
        var baseContainerClick = function () {
            var accent = jQuery(this).attr("class").replace("accent", '').replace(' ', '');
            theme.applyTheme(accent, null, stgs);
            if (typeof (stgs.themePicked) == "function")
                stgs.themePicked(accent);
        };
        if (typeof ($.fn.on) === "function") {
            $(this).on("click.appBar", themeContainer, themeContainerClick);
            $(this).on("click.appBar", baseContainer, baseContainerClick);
        } else {
            $(themeContainer).live("click.appBar", themeContainerClick);
            $(baseContainer).live("click.appBar", baseContainerClick);
        }
    }
    //this should really only run once but we can support multiple application bars
    return $(this).each(function (idx, ele) {
    	var $this = $(ele),
            data = $.extend({}, stgs);
    	if(data.collapseHeight == "auto")
        	data.collapseHeight = $(this).outerHeight();

        //unfortunately we have to sniff out mobile browsers because of the inconsistent implementation of position:fixed
        //most desktop methods return false positives on a mobile
        //todo: find/come up with a better fixed position test
        if (navigator.userAgent.match(/(Android|webOS|iPhone|iPod|BlackBerry|PIE|IEMobile)/i)) {
            // IEMobile10 supports position:fixed. This should cover up to IE20 or at least until fixed positioning gets sorted            
            // let iOS 5+ pass as well, hopefully by iOS 9 fixed pos will be standard :/
            if (!navigator.userAgent.match(/(IEMobile\/1)/i) && !navigator.userAgent.match(/(iPhone OS [56789])/i)) {
                $this.css({ position: 'absolute', bottom: '0px' });
            }
        }
        data.slideOpen = function () {
            if (!$this.hasClass("expanded"))
                data.animateAppBar(false);
        };
        data.slideClosed = function () {
            if ($this.hasClass("expanded"))
                data.animateAppBar(true);
        };
        data.animateAppBar = function (isExpanded) {
        	var hgt = isExpanded ? data.collapseHeight : data.expandHeight,
        		t;
        	if (isExpanded) {
        		t = stgs.collapse();
        		if (typeof (t) != "undefined" && t === false)
        			return;
        		$this.removeClass("expanded");
        	} else {
        		t = stgs.expand();
        		if (typeof (t) != "undefined" && t === false)
					return
        		if (!$this.hasClass("expanded"))
        			$this.addClass("expanded");
        	}
            $this.stop().animate({ height: hgt }, { duration: data.duration }, function () {
            	if (isExpanded) {
            		stgs.collapsed();
            	} else {
            		stgs.expanded();
            	}
            });
        };
        $this.data("ApplicationBar", data)

        $this.find(stgs.handleSelector).click(function () {
            data.animateAppBar($this.hasClass("expanded"));
        });

        if (data.bindKeyboard == true) {
            jQuery(document.documentElement).keyup(function (event) {
                // handle cursor keys
                if (event.keyCode == 38) {
                    // expand
                    if (event.target && event.target.tagName.match(/INPUT|TEXTAREA|SELECT/i) == null) {
                        if (!$this.hasClass("expanded")) {
                            data.animateAppBar(false);
                        }
                    }
                    
                } else if (event.keyCode == 40) {
                    // collapse
                    if (event.target && event.target.tagName.match(/INPUT|TEXTAREA|SELECT/i) == null) {
                        if ($this.hasClass("expanded")) {
                            data.animateAppBar(true);
                        }
                    }
                }
            });            
        }
    });
};

// default options for applicationBar, the theme defaults are merged with this object when the applicationBar function is called
jQuery.fn.applicationBar.defaults = {
    applyTheme: true,                                       // should the theme be loaded from local storage and applied to the page
    themePicked: function (tColor) { },                     // called when a new theme is chosen. the chosen theme (dark | light)
    accentPicked: function (aColor) { },                    // called when a new accent is chosen. the chosen theme (blue, mango, purple, etc.)
    loaded: function (tColor, aColor) { },                  // called if applyTheme is true onload when a theme has been loaded from local storage or overridden by options
    duration: 300,                                          // how fast should animation be performed, in milliseconds
    expandHeight: "320px",                                  // height the application bar to expand to when opened
    collapseHeight: "auto",                                 // height the application bar will collapse back to when closed
    bindKeyboard: true,                                     // should up and down keys on keyborad be bound to the application bar
    handleSelector: "a.etc",
    metroLightUrl: 'images/metroIcons_light.jpg',  // the url for the metro light icons (only needed if preload 'preloadAltBaseTheme' is true)
    metroDarkUrl: 'images/metroIcons.jpg',         // the url for the metro dark icons (only needed if preload 'preloadAltBaseTheme' is true)
    preloadAltBaseTheme: false,                             // should the applicationBar icons be pre loaded for the alternate theme to enable fast theme switching
    expand: function () { },								// called before expanding. return false to cancel
    collapse: function() { },								// called before collapsing. return false to cancel
    expanded: function () { },								// called after expanding
    collapsed: function () { }								// called agter collapsing
};
/* Preload Images */
// Usage: jQuery(['img1.jpg', { src: 'img2.jpg' }]).metrojs.preloadImages(function(){ ... });
// Callback function gets called after all images are preloaded
$.fn.metrojs.preloadImages = function (callback) {
        var checklist = $(this).toArray();
        var $img = $("<img style='display:none;' />").appendTo("body");
        $(this).each(function () {
                var src = this;
                if (typeof(this) == "object")
                        src = this.src;
                $img.attr({ src: src }).load(function() {
                        for (var i = 0; i < checklist.length; i++) {
                                if (checklist[i] == element) {
                                        checklist.splice(i, 1);
                                }
                        }
                        if (checklist.length == 0) {
                                callback();
                        }
                });
               
        });
    $img.remove();
};
// object used for compatibility checks
$.fn.metrojs.MetroModernizr = function (stgs) {
    if(typeof(stgs) === "undefined") {
                stgs = { useHardwareAccel: true, useModernizr: typeof(window.Modernizr) !== "undefined" };
        }
    this.isOldJQuery =  /^1\.[0123]/.test($.fn.jquery),
    this.isOldAndroid = (function(){
        try{
            var ua = navigator.userAgent;        
            if( ua.indexOf("Android") >= 0 )
            {
                var androidversion = parseFloat(ua.slice(ua.indexOf("Android")+8));
                if (androidversion < 2.3)
                    return true;
            }
        }catch(err){ $.error(err); }
        return false;
    })();
    this.canTransform = false;
    this.canTransition = false;
    this.canTransform3d = false;
    this.canAnimate = false;
    this.canTouch = false;
    this.canFlip3d = stgs.useHardwareAccel;
    if (stgs.useHardwareAccel == true) {
        if (stgs.useModernizr == false) {
            //determine if the browser supports the neccessary accelerated features
            if (typeof (window.MetroModernizr) !== "undefined") {
                this.canTransform = window.MetroModernizr.canTransform;
                this.canTransition = window.MetroModernizr.canTransition;
                this.canTransform3d = window.MetroModernizr.canTransform3d;
                this.canAnimate = window.MetroModernizr.canAnimate;
                this.canTouch = window.MetroModernizr.canTouch;
            } else {
                window.MetroModernizr = {};
                /***** check for browser capabilities credit: modernizr-1.7 http://modernizr.com/ *****/
                var mod = 'metromodernizr';
                var docElement = document.documentElement;
                var docHead = document.head || document.getElementsByTagName('head')[0];
                var modElem = document.createElement(mod);
                var m_style = modElem.style;
                var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');
                var domPrefixes = 'Webkit Moz O ms Khtml'.split(' ');
                var test_props = function (props, callback) {
                    for (var i in props) {
                        if (m_style[props[i]] !== undefined && (!callback || callback(props[i], modElem))) {
                            return true;
                        }
                    }
                };
                var test_props_all = function (prop, callback) {
                    var uc_prop = prop.charAt(0).toUpperCase() + prop.substr(1),
                    props = (prop + ' ' + domPrefixes.join(uc_prop + ' ') + uc_prop).split(' ');
                    return !!test_props(props, callback);
                };
                var test_3d = function () {
                    var ret = !!test_props(['perspectiveProperty', 'WebkitPerspective', 'MozPerspective', 'OPerspective', 'msPerspective']);
                    if (ret && 'webkitPerspective' in docElement.style) {
                        // Webkit allows this media query to succeed only if the feature is enabled.
                        // '@media (transform-3d),(-o-transform-3d),(-moz-transform-3d),(-ms-transform-3d),(-webkit-transform-3d),(modernizr){ ... }'
                        ret = testMediaQuery(['@media (',prefixes.join('transform-3d),('),mod,')','{#metromodernizr{left:9px;position:absolute;height:3px;}}'].join(''), function(div){
                            return div.offsetHeight === 3 && div.offsetLeft === 9;
                        });
                    }
                    return ret;
                };
                var testMediaQuery = function (mq, predicate) {
                    var st = document.createElement('style'),
                        div = document.createElement('div'),
                        ret;
                    st.textContent = mq;
                    docHead.appendChild(st);
                    div.id = mod;
                    docElement.appendChild(div);
                    ret = predicate(div);
                    st.parentNode.removeChild(st);
                    div.parentNode.removeChild(div);
                    return !!ret;
                };
                var test_touch = function() {
                    return canTouch = ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch ||
                        (window.PointerEvent && window.navigator.maxTouchPoints > 0) ||
                        (window.MSPointerEvent && window.navigator.msMaxTouchPoints > 0) ||
                        testMediaQuery(['@media (',prefixes.join('touch-enabled),('),mod,')','{#metromodernizr{top:9px;position:absolute}}'].join(''), function(div){
                            return div.offsetTop === 9;
                        });
                };
                this.canTransform = !!test_props(['transformProperty', 'WebkitTransform', 'MozTransform', 'OTransform', 'msTransform']);
                this.canTransition = test_props_all('transitionProperty');
                this.canTransform3d = test_3d();
                this.canAnimate = test_props_all('animationName');
                this.canTouch = test_touch();
                window.MetroModernizr.canTransform = this.canTransform;
                window.MetroModernizr.canTransition = this.canTransition;
                window.MetroModernizr.canTransform3d = this.canTransform3d;
                window.MetroModernizr.canAnimate = this.canAnimate;
                window.MetroModernizr.canTouch = this.canTouch;
                docElement = null;
                docHead = null;
                modElem = null;
                m_style = null;
            }
        } else {
            this.canTransform = $("html").hasClass("csstransforms");
            this.canTransition = $("html").hasClass("csstransitions");
            this.canTransform3d = $("html").hasClass("csstransforms3d");
            this.canAnimate = $("html").hasClass("cssanimations");
            this.canTouch = $("html").hasClass("touch") || (typeof(window.navigator.msMaxTouchPoints) !== "undefined" && window.navigator.msMaxTouchPoints > 0);
        }
    }
    this.canFlip3d = this.canFlip3d && this.canAnimate && this.canTransform && this.canTransform3d;
};

})(jQuery);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ },

/***/ "./node_modules/rickshaw/rickshaw.css":
/***/ function(module, exports) {

module.exports = ".rickshaw_graph .detail {\n\tpointer-events: none;\n\tposition: absolute;\n\ttop: 0;\n\tz-index: 2;\n\tbackground: rgba(0, 0, 0, 0.1);\n\tbottom: 0;\n\twidth: 1px;\n\ttransition: opacity 0.25s linear;\n\t-moz-transition: opacity 0.25s linear;\n\t-o-transition: opacity 0.25s linear;\n\t-webkit-transition: opacity 0.25s linear;\n}\n.rickshaw_graph .detail.inactive {\n\topacity: 0;\n}\n.rickshaw_graph .detail .item.active {\n\topacity: 1;\n}\n.rickshaw_graph .detail .x_label {\n\tfont-family: Arial, sans-serif;\n\tborder-radius: 3px;\n\tpadding: 6px;\n\topacity: 0.5;\n\tborder: 1px solid #e0e0e0;\n\tfont-size: 12px;\n\tposition: absolute;\n\tbackground: white;\n\twhite-space: nowrap;\n}\n.rickshaw_graph .detail .x_label.left {\n\tleft: 0;\n}\n.rickshaw_graph .detail .x_label.right {\n\tright: 0;\n}\n.rickshaw_graph .detail .item {\n\tposition: absolute;\n\tz-index: 2;\n\tborder-radius: 3px;\n\tpadding: 0.25em;\n\tfont-size: 12px;\n\tfont-family: Arial, sans-serif;\n\topacity: 0;\n\tbackground: rgba(0, 0, 0, 0.4);\n\tcolor: white;\n\tborder: 1px solid rgba(0, 0, 0, 0.4);\n\tmargin-left: 1em;\n\tmargin-right: 1em;\n\tmargin-top: -1em;\n\twhite-space: nowrap;\n}\n.rickshaw_graph .detail .item.left {\n\tleft: 0;\n}\n.rickshaw_graph .detail .item.right {\n\tright: 0;\n}\n.rickshaw_graph .detail .item.active {\n\topacity: 1;\n\tbackground: rgba(0, 0, 0, 0.8);\n}\n.rickshaw_graph .detail .item:after {\n\tposition: absolute;\n\tdisplay: block;\n\twidth: 0;\n\theight: 0;\n\n\tcontent: \"\";\n\n\tborder: 5px solid transparent;\n}\n.rickshaw_graph .detail .item.left:after {\n\ttop: 1em;\n\tleft: -5px;\n\tmargin-top: -5px;\n\tborder-right-color: rgba(0, 0, 0, 0.8);\n\tborder-left-width: 0;\n}\n.rickshaw_graph .detail .item.right:after {\n\ttop: 1em;\n\tright: -5px;\n\tmargin-top: -5px;\n\tborder-left-color: rgba(0, 0, 0, 0.8);\n\tborder-right-width: 0;\n}\n.rickshaw_graph .detail .dot {\n\twidth: 4px;\n\theight: 4px;\n\tmargin-left: -3px;\n\tmargin-top: -3.5px;\n\tborder-radius: 5px;\n\tposition: absolute;\n\tbox-shadow: 0 0 2px rgba(0, 0, 0, 0.6);\n\tbox-sizing: content-box;\n\t-moz-box-sizing: content-box;\n\tbackground: white;\n\tborder-width: 2px;\n\tborder-style: solid;\n\tdisplay: none;\n\tbackground-clip: padding-box;\n}\n.rickshaw_graph .detail .dot.active {\n\tdisplay: block;\n}\n/* graph */\n\n.rickshaw_graph {\n\tposition: relative;\n}\n.rickshaw_graph svg {\n\tdisplay: block;\t\n\toverflow: hidden;\n}\n\n/* ticks */\n\n.rickshaw_graph .x_tick {\n\tposition: absolute;\n\ttop: 0;\n\tbottom: 0;\n\twidth: 0px;\n\tborder-left: 1px dotted rgba(0, 0, 0, 0.2);\n\tpointer-events: none;\n}\n.rickshaw_graph .x_tick .title {\n\tposition: absolute;\n\tfont-size: 12px;\n\tfont-family: Arial, sans-serif;\n\topacity: 0.5;\n\twhite-space: nowrap;\n\tmargin-left: 3px;\n\tbottom: 1px;\n}\n\n/* annotations */\n\n.rickshaw_annotation_timeline {\n\theight: 1px;\n\tborder-top: 1px solid #e0e0e0;\n\tmargin-top: 10px;\n\tposition: relative;\n}\n.rickshaw_annotation_timeline .annotation {\n\tposition: absolute;\n\theight: 6px;\n\twidth: 6px;\n\tmargin-left: -2px;\n\ttop: -3px;\n\tborder-radius: 5px;\n\tbackground-color: rgba(0, 0, 0, 0.25);\n}\n.rickshaw_graph .annotation_line {\n\tposition: absolute;\n\ttop: 0;\n\tbottom: -6px;\n\twidth: 0px;\n\tborder-left: 2px solid rgba(0, 0, 0, 0.3);\n\tdisplay: none;\n}\n.rickshaw_graph .annotation_line.active {\n\tdisplay: block;\n}\n\n.rickshaw_graph .annotation_range {\n        background: rgba(0, 0, 0, 0.1);\n        display: none;\n        position: absolute;\n        top: 0;\n        bottom: -6px;\n}\n.rickshaw_graph .annotation_range.active {\n        display: block;\n}\n.rickshaw_graph .annotation_range.active.offscreen {\n        display: none;\n}\n\n.rickshaw_annotation_timeline .annotation .content {\n\tbackground: white;\n\tcolor: black;\n\topacity: 0.9;\n\tpadding: 5px 5px;\n\tbox-shadow: 0 0 2px rgba(0, 0, 0, 0.8);\n\tborder-radius: 3px;\n\tposition: relative;\n\tz-index: 20;\n\tfont-size: 12px;\n\tpadding: 6px 8px 8px;\n\ttop: 18px;\n\tleft: -11px;\n\twidth: 160px;\n\tdisplay: none;\n\tcursor: pointer;\n}\n.rickshaw_annotation_timeline .annotation .content:before {\n\tcontent: \"\\25B2\";\n\tposition: absolute;\n\ttop: -11px;\n\tcolor: white;\n\ttext-shadow: 0 -1px 1px rgba(0, 0, 0, 0.8);\n}\n.rickshaw_annotation_timeline .annotation.active,\n.rickshaw_annotation_timeline .annotation:hover {\n\tbackground-color: rgba(0, 0, 0, 0.8);\n\tcursor: none;\n}\n.rickshaw_annotation_timeline .annotation .content:hover {\n\tz-index: 50;\n}\n.rickshaw_annotation_timeline .annotation.active .content {\n\tdisplay: block;\n}\n.rickshaw_annotation_timeline .annotation:hover .content {\n\tdisplay: block;\n\tz-index: 50;\n}\n.rickshaw_graph .y_axis,\n.rickshaw_graph  .x_axis_d3 {\n\tfill: none;\n}\n.rickshaw_graph .y_ticks .tick line,\n.rickshaw_graph .x_ticks_d3 .tick {\n\tstroke: rgba(0, 0, 0, 0.16);\n\tstroke-width: 2px;\n\tshape-rendering: crisp-edges;\n\tpointer-events: none;\n}\n.rickshaw_graph .y_grid .tick,\n.rickshaw_graph .x_grid_d3 .tick {\n\tz-index: -1;\n\tstroke: rgba(0, 0, 0, 0.20);\n\tstroke-width: 1px;\n\tstroke-dasharray: 1 1;\n}\n.rickshaw_graph .y_grid .tick[data-y-value=\"0\"] {\n\tstroke-dasharray: 1 0;\n}\n.rickshaw_graph .y_grid path,\n.rickshaw_graph .x_grid_d3 path  {\n\tfill: none;\n\tstroke: none;\n}\n.rickshaw_graph .y_ticks path,\n.rickshaw_graph .x_ticks_d3 path {\n\tfill: none;\n\tstroke: #808080;\n}\n.rickshaw_graph .y_ticks text,\n.rickshaw_graph .x_ticks_d3 text {\n\topacity: 0.5;\n\tfont-size: 12px;\n\tpointer-events: none;\n}\n.rickshaw_graph .x_tick.glow .title,\n.rickshaw_graph .y_ticks.glow text {\n\tfill: black;\n\tcolor: black;\n\ttext-shadow: \n\t\t-1px 1px 0 rgba(255, 255, 255, 0.1),\n\t\t1px -1px 0 rgba(255, 255, 255, 0.1),\n\t\t1px 1px 0 rgba(255, 255, 255, 0.1),\n\t\t0px 1px 0 rgba(255, 255, 255, 0.1),\n\t\t0px -1px 0 rgba(255, 255, 255, 0.1),\n\t\t1px 0px 0 rgba(255, 255, 255, 0.1),\n\t\t-1px 0px 0 rgba(255, 255, 255, 0.1),\n\t\t-1px -1px 0 rgba(255, 255, 255, 0.1);\n}\n.rickshaw_graph .x_tick.inverse .title,\n.rickshaw_graph .y_ticks.inverse text {\n\tfill: white;\n\tcolor: white;\n\ttext-shadow: \n\t\t-1px 1px 0 rgba(0, 0, 0, 0.8),\n\t\t1px -1px 0 rgba(0, 0, 0, 0.8),\n\t\t1px 1px 0 rgba(0, 0, 0, 0.8),\n\t\t0px 1px 0 rgba(0, 0, 0, 0.8),\n\t\t0px -1px 0 rgba(0, 0, 0, 0.8),\n\t\t1px 0px 0 rgba(0, 0, 0, 0.8),\n\t\t-1px 0px 0 rgba(0, 0, 0, 0.8),\n\t\t-1px -1px 0 rgba(0, 0, 0, 0.8);\n}\n.rickshaw_legend {\n\tfont-family: Arial;\n\tfont-size: 12px;\n\tcolor: white;\n\tbackground: #404040;\n\tdisplay: inline-block;\n\tpadding: 12px 5px; \n\tborder-radius: 2px;\n\tposition: relative;\n}\n.rickshaw_legend:hover {\n\tz-index: 10;\n}\n.rickshaw_legend .swatch {\n\twidth: 10px;\n\theight: 10px;\n\tborder: 1px solid rgba(0, 0, 0, 0.2);\n}\n.rickshaw_legend .line {\n\tclear: both;\n\tline-height: 140%;\n\tpadding-right: 15px;\n}\n.rickshaw_legend .line .swatch {\n\tdisplay: inline-block;\n\tmargin-right: 3px;\n\tborder-radius: 2px;\n}\n.rickshaw_legend .label {\n\tmargin: 0;\n\twhite-space: nowrap;\n\tdisplay: inline;\n\tfont-size: inherit;\n\tbackground-color: transparent;\n\tcolor: inherit;\n\tfont-weight: normal;\n\tline-height: normal;\n\tpadding: 0px;\n\ttext-shadow: none;\n}\n.rickshaw_legend .action:hover {\n\topacity: 0.6;\n}\n.rickshaw_legend .action {\n\tmargin-right: 0.2em;\n\tfont-size: 10px;\n\topacity: 0.2;\n\tcursor: pointer;\n\tfont-size: 14px;\n}\n.rickshaw_legend .line.disabled {\n\topacity: 0.4;\n}\n.rickshaw_legend ul {\n\tlist-style-type: none;\n\tmargin: 0;\n\tpadding: 0;\n\tmargin: 2px;\n\tcursor: pointer;\n}\n.rickshaw_legend li {\n\tpadding: 0 0 0 2px;\n\tmin-width: 80px;\n\twhite-space: nowrap;\n}\n.rickshaw_legend li:hover {\n\tbackground: rgba(255, 255, 255, 0.08);\n\tborder-radius: 3px;\n}\n.rickshaw_legend li:active {\n\tbackground: rgba(255, 255, 255, 0.2);\n\tborder-radius: 3px;\n}\n"

/***/ },

/***/ "./node_modules/rickshaw/rickshaw.js":
/***/ function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery, __webpack_provided_window_dot_jQuery) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__("./node_modules/d3/d3.js")], __WEBPACK_AMD_DEFINE_RESULT__ = function (d3) {
            return (root.Rickshaw = factory(d3));
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (typeof exports === 'object') {
        module.exports = factory(require('d3'));
    } else {
        root.Rickshaw = factory(d3);
    }
}(this, function (d3) {
/* jshint -W079 */ 

var Rickshaw = {

	namespace: function(namespace, obj) {

		var parts = namespace.split('.');

		var parent = Rickshaw;

		for(var i = 1, length = parts.length; i < length; i++) {
			var currentPart = parts[i];
			parent[currentPart] = parent[currentPart] || {};
			parent = parent[currentPart];
		}
		return parent;
	},

	keys: function(obj) {
		var keys = [];
		for (var key in obj) keys.push(key);
		return keys;
	},

	extend: function(destination, source) {

		for (var property in source) {
			destination[property] = source[property];
		}
		return destination;
	},

	clone: function(obj) {
		return JSON.parse(JSON.stringify(obj));
	}
};
/* Adapted from https://github.com/Jakobo/PTClass */

/*
Copyright (c) 2005-2010 Sam Stephenson

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
/* Based on Alex Arnell's inheritance implementation. */
/** section: Language
 * class Class
 *
 *  Manages Prototype's class-based OOP system.
 *
 *  Refer to Prototype's web site for a [tutorial on classes and
 *  inheritance](http://prototypejs.org/learn/class-inheritance).
**/
(function(globalContext) {
/* ------------------------------------ */
/* Import from object.js                */
/* ------------------------------------ */
var _toString = Object.prototype.toString,
    NULL_TYPE = 'Null',
    UNDEFINED_TYPE = 'Undefined',
    BOOLEAN_TYPE = 'Boolean',
    NUMBER_TYPE = 'Number',
    STRING_TYPE = 'String',
    OBJECT_TYPE = 'Object',
    FUNCTION_CLASS = '[object Function]';
function isFunction(object) {
  return _toString.call(object) === FUNCTION_CLASS;
}
function extend(destination, source) {
  for (var property in source) if (source.hasOwnProperty(property)) // modify protect primitive slaughter
    destination[property] = source[property];
  return destination;
}
function keys(object) {
  if (Type(object) !== OBJECT_TYPE) { throw new TypeError(); }
  var results = [];
  for (var property in object) {
    if (object.hasOwnProperty(property)) {
      results.push(property);
    }
  }
  return results;
}
function Type(o) {
  switch(o) {
    case null: return NULL_TYPE;
    case (void 0): return UNDEFINED_TYPE;
  }
  var type = typeof o;
  switch(type) {
    case 'boolean': return BOOLEAN_TYPE;
    case 'number':  return NUMBER_TYPE;
    case 'string':  return STRING_TYPE;
  }
  return OBJECT_TYPE;
}
function isUndefined(object) {
  return typeof object === "undefined";
}
/* ------------------------------------ */
/* Import from Function.js              */
/* ------------------------------------ */
var slice = Array.prototype.slice;
function argumentNames(fn) {
  var names = fn.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1]
    .replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g, '')
    .replace(/\s+/g, '').split(',');
  return names.length == 1 && !names[0] ? [] : names;
}
function wrap(fn, wrapper) {
  var __method = fn;
  return function() {
    var a = update([bind(__method, this)], arguments);
    return wrapper.apply(this, a);
  }
}
function update(array, args) {
  var arrayLength = array.length, length = args.length;
  while (length--) array[arrayLength + length] = args[length];
  return array;
}
function merge(array, args) {
  array = slice.call(array, 0);
  return update(array, args);
}
function bind(fn, context) {
  if (arguments.length < 2 && isUndefined(arguments[0])) return this;
  var __method = fn, args = slice.call(arguments, 2);
  return function() {
    var a = merge(args, arguments);
    return __method.apply(context, a);
  }
}

/* ------------------------------------ */
/* Import from Prototype.js             */
/* ------------------------------------ */
var emptyFunction = function(){};

var Class = (function() {
  
  // Some versions of JScript fail to enumerate over properties, names of which 
  // correspond to non-enumerable properties in the prototype chain
  var IS_DONTENUM_BUGGY = (function(){
    for (var p in { toString: 1 }) {
      // check actual property name, so that it works with augmented Object.prototype
      if (p === 'toString') return false;
    }
    return true;
  })();
  
  function subclass() {};
  function create() {
    var parent = null, properties = [].slice.apply(arguments);
    if (isFunction(properties[0]))
      parent = properties.shift();

    function klass() {
      this.initialize.apply(this, arguments);
    }

    extend(klass, Class.Methods);
    klass.superclass = parent;
    klass.subclasses = [];

    if (parent) {
      subclass.prototype = parent.prototype;
      klass.prototype = new subclass;
      try { parent.subclasses.push(klass) } catch(e) {}
    }

    for (var i = 0, length = properties.length; i < length; i++)
      klass.addMethods(properties[i]);

    if (!klass.prototype.initialize)
      klass.prototype.initialize = emptyFunction;

    klass.prototype.constructor = klass;
    return klass;
  }

  function addMethods(source) {
    var ancestor   = this.superclass && this.superclass.prototype,
        properties = keys(source);

    // IE6 doesn't enumerate `toString` and `valueOf` (among other built-in `Object.prototype`) properties,
    // Force copy if they're not Object.prototype ones.
    // Do not copy other Object.prototype.* for performance reasons
    if (IS_DONTENUM_BUGGY) {
      if (source.toString != Object.prototype.toString)
        properties.push("toString");
      if (source.valueOf != Object.prototype.valueOf)
        properties.push("valueOf");
    }

    for (var i = 0, length = properties.length; i < length; i++) {
      var property = properties[i], value = source[property];
      if (ancestor && isFunction(value) &&
          argumentNames(value)[0] == "$super") {
        var method = value;
        value = wrap((function(m) {
          return function() { return ancestor[m].apply(this, arguments); };
        })(property), method);

        value.valueOf = bind(method.valueOf, method);
        value.toString = bind(method.toString, method);
      }
      this.prototype[property] = value;
    }

    return this;
  }

  return {
    create: create,
    Methods: {
      addMethods: addMethods
    }
  };
})();

if (globalContext.exports) {
  globalContext.exports.Class = Class;
}
else {
  globalContext.Class = Class;
}
})(Rickshaw);
Rickshaw.namespace('Rickshaw.Compat.ClassList');

Rickshaw.Compat.ClassList = function() {

	/* adapted from http://purl.eligrey.com/github/classList.js/blob/master/classList.js */

	if (typeof document !== "undefined" && !("classList" in document.createElement("a"))) {

	(function (view) {

	"use strict";

	var
		  classListProp = "classList"
		, protoProp = "prototype"
		, elemCtrProto = (view.HTMLElement || view.Element)[protoProp]
		, objCtr = Object
		, strTrim = String[protoProp].trim || function () {
			return this.replace(/^\s+|\s+$/g, "");
		}
		, arrIndexOf = Array[protoProp].indexOf || function (item) {
			var
				  i = 0
				, len = this.length
			;
			for (; i < len; i++) {
				if (i in this && this[i] === item) {
					return i;
				}
			}
			return -1;
		}
		// Vendors: please allow content code to instantiate DOMExceptions
		, DOMEx = function (type, message) {
			this.name = type;
			this.code = DOMException[type];
			this.message = message;
		}
		, checkTokenAndGetIndex = function (classList, token) {
			if (token === "") {
				throw new DOMEx(
					  "SYNTAX_ERR"
					, "An invalid or illegal string was specified"
				);
			}
			if (/\s/.test(token)) {
				throw new DOMEx(
					  "INVALID_CHARACTER_ERR"
					, "String contains an invalid character"
				);
			}
			return arrIndexOf.call(classList, token);
		}
		, ClassList = function (elem) {
			var
				  trimmedClasses = strTrim.call(elem.className)
				, classes = trimmedClasses ? trimmedClasses.split(/\s+/) : []
				, i = 0
				, len = classes.length
			;
			for (; i < len; i++) {
				this.push(classes[i]);
			}
			this._updateClassName = function () {
				elem.className = this.toString();
			};
		}
		, classListProto = ClassList[protoProp] = []
		, classListGetter = function () {
			return new ClassList(this);
		}
	;
	// Most DOMException implementations don't allow calling DOMException's toString()
	// on non-DOMExceptions. Error's toString() is sufficient here.
	DOMEx[protoProp] = Error[protoProp];
	classListProto.item = function (i) {
		return this[i] || null;
	};
	classListProto.contains = function (token) {
		token += "";
		return checkTokenAndGetIndex(this, token) !== -1;
	};
	classListProto.add = function (token) {
		token += "";
		if (checkTokenAndGetIndex(this, token) === -1) {
			this.push(token);
			this._updateClassName();
		}
	};
	classListProto.remove = function (token) {
		token += "";
		var index = checkTokenAndGetIndex(this, token);
		if (index !== -1) {
			this.splice(index, 1);
			this._updateClassName();
		}
	};
	classListProto.toggle = function (token) {
		token += "";
		if (checkTokenAndGetIndex(this, token) === -1) {
			this.add(token);
		} else {
			this.remove(token);
		}
	};
	classListProto.toString = function () {
		return this.join(" ");
	};

	if (objCtr.defineProperty) {
		var classListPropDesc = {
			  get: classListGetter
			, enumerable: true
			, configurable: true
		};
		try {
			objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
		} catch (ex) { // IE 8 doesn't support enumerable:true
			if (ex.number === -0x7FF5EC54) {
				classListPropDesc.enumerable = false;
				objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
			}
		}
	} else if (objCtr[protoProp].__defineGetter__) {
		elemCtrProto.__defineGetter__(classListProp, classListGetter);
	}

	}(window));

	}
};

if ( (typeof RICKSHAW_NO_COMPAT !== "undefined" && !RICKSHAW_NO_COMPAT) || typeof RICKSHAW_NO_COMPAT === "undefined") {
	new Rickshaw.Compat.ClassList();
}
Rickshaw.namespace('Rickshaw.Graph');

Rickshaw.Graph = function(args) {

	var self = this;

	this.initialize = function(args) {

		if (!args.element) throw "Rickshaw.Graph needs a reference to an element";
		if (args.element.nodeType !== 1) throw "Rickshaw.Graph element was defined but not an HTML element";

		this.element = args.element;
		this.series = args.series;
		this.window = {};

		this.updateCallbacks = [];
		this.configureCallbacks = [];

		this.defaults = {
			interpolation: 'cardinal',
			offset: 'zero',
			min: undefined,
			max: undefined,
			preserve: false,
			xScale: undefined,
			yScale: undefined,
			stack: true
		};

		this._loadRenderers();
		this.configure(args);
		this.validateSeries(args.series);

		this.series.active = function() { return self.series.filter( function(s) { return !s.disabled } ) };
		this.setSize({ width: args.width, height: args.height });
		this.element.classList.add('rickshaw_graph');

		this.vis = d3.select(this.element)
			.append("svg:svg")
			.attr('width', this.width)
			.attr('height', this.height);

		this.discoverRange();
	};

	this._loadRenderers = function() {

		for (var name in Rickshaw.Graph.Renderer) {
			if (!name || !Rickshaw.Graph.Renderer.hasOwnProperty(name)) continue;
			var r = Rickshaw.Graph.Renderer[name];
			if (!r || !r.prototype || !r.prototype.render) continue;
			self.registerRenderer(new r( { graph: self } ));
		}
	};

	this.validateSeries = function(series) {

		if (!Array.isArray(series) && !(series instanceof Rickshaw.Series)) {
			var seriesSignature = Object.prototype.toString.apply(series);
			throw "series is not an array: " + seriesSignature;
		}

		var pointsCount;

		series.forEach( function(s) {

			if (!(s instanceof Object)) {
				throw "series element is not an object: " + s;
			}
			if (!(s.data)) {
				throw "series has no data: " + JSON.stringify(s);
			}
			if (!Array.isArray(s.data)) {
				throw "series data is not an array: " + JSON.stringify(s.data);
			}
			
			if (s.data.length > 0) {
				var x = s.data[0].x;
				var y = s.data[0].y;

				if (typeof x != 'number' || ( typeof y != 'number' && y !== null ) ) {
					throw "x and y properties of points should be numbers instead of " +
						(typeof x) + " and " + (typeof y);
				}
			}

			if (s.data.length >= 3) {
				// probe to sanity check sort order
				if (s.data[2].x < s.data[1].x || s.data[1].x < s.data[0].x || s.data[s.data.length - 1].x < s.data[0].x) {
					throw "series data needs to be sorted on x values for series name: " + s.name;
				}
			}

		}, this );
	};

	this.dataDomain = function() {

		var data = this.series.map( function(s) { return s.data } );

		var min = d3.min( data.map( function(d) { return d[0].x } ) );
		var max = d3.max( data.map( function(d) { return d[d.length - 1].x } ) );

		return [min, max];
	};

	this.discoverRange = function() {

		var domain = this.renderer.domain();

		// this.*Scale is coming from the configuration dictionary
		// which may be referenced by the Graph creator, or shared
		// with other Graphs. We need to ensure we copy the scale
		// so that our mutations do not change the object given to us.
		// Hence the .copy()
		this.x = (this.xScale || d3.scale.linear()).copy().domain(domain.x).range([0, this.width]);
		this.y = (this.yScale || d3.scale.linear()).copy().domain(domain.y).range([this.height, 0]);

		this.x.magnitude = d3.scale.linear()
			.domain([domain.x[0] - domain.x[0], domain.x[1] - domain.x[0]])
			.range([0, this.width]);

		this.y.magnitude = d3.scale.linear()
			.domain([domain.y[0] - domain.y[0], domain.y[1] - domain.y[0]])
			.range([0, this.height]);
	};

	this.render = function() {

		var stackedData = this.stackData();
		this.discoverRange();

		this.renderer.render();

		this.updateCallbacks.forEach( function(callback) {
			callback();
		} );

	};

	this.update = this.render;

	this.stackData = function() {

		var data = this.series.active()
			.map( function(d) { return d.data } )
			.map( function(d) { return d.filter( function(d) { return this._slice(d) }, this ) }, this);

		var preserve = this.preserve;
		if (!preserve) {
			this.series.forEach( function(series) {
				if (series.scale) {
					// data must be preserved when a scale is used
					preserve = true;
				}
			} );
		}

		data = preserve ? Rickshaw.clone(data) : data;

		this.series.active().forEach( function(series, index) {
			if (series.scale) {
				// apply scale to each series
				var seriesData = data[index];
				if(seriesData) {
					seriesData.forEach( function(d) {
						d.y = series.scale(d.y);
					} );
				}
			}
		} );

		this.stackData.hooks.data.forEach( function(entry) {
			data = entry.f.apply(self, [data]);
		} );

		var stackedData;

		if (!this.renderer.unstack) {

			this._validateStackable();

			var layout = d3.layout.stack();
			layout.offset( self.offset );
			stackedData = layout(data);
		}

		stackedData = stackedData || data;

		if (this.renderer.unstack) {
			stackedData.forEach( function(seriesData) {
				seriesData.forEach( function(d) {
					d.y0 = d.y0 === undefined ? 0 : d.y0;
				} );
			} );
		}

		this.stackData.hooks.after.forEach( function(entry) {
			stackedData = entry.f.apply(self, [data]);
		} );

		var i = 0;
		this.series.forEach( function(series) {
			if (series.disabled) return;
			series.stack = stackedData[i++];
		} );

		this.stackedData = stackedData;
		return stackedData;
	};

	this._validateStackable = function() {

		var series = this.series;
		var pointsCount;

		series.forEach( function(s) {

			pointsCount = pointsCount || s.data.length;

			if (pointsCount && s.data.length != pointsCount) {
				throw "stacked series cannot have differing numbers of points: " +
					pointsCount + " vs " + s.data.length + "; see Rickshaw.Series.fill()";
			}

		}, this );
	};

	this.stackData.hooks = { data: [], after: [] };

	this._slice = function(d) {

		if (this.window.xMin || this.window.xMax) {

			var isInRange = true;

			if (this.window.xMin && d.x < this.window.xMin) isInRange = false;
			if (this.window.xMax && d.x > this.window.xMax) isInRange = false;

			return isInRange;
		}

		return true;
	};

	this.onUpdate = function(callback) {
		this.updateCallbacks.push(callback);
	};

	this.onConfigure = function(callback) {
		this.configureCallbacks.push(callback);
	};

	this.registerRenderer = function(renderer) {
		this._renderers = this._renderers || {};
		this._renderers[renderer.name] = renderer;
	};

	this.configure = function(args) {

		this.config = this.config || {};

		if (args.width || args.height) {
			this.setSize(args);
		}

		Rickshaw.keys(this.defaults).forEach( function(k) {
			this.config[k] = k in args ? args[k]
				: k in this ? this[k]
				: this.defaults[k];
		}, this );

		Rickshaw.keys(this.config).forEach( function(k) {
			this[k] = this.config[k];
		}, this );

		if ('stack' in args) args.unstack = !args.stack;

		var renderer = args.renderer || (this.renderer && this.renderer.name) || 'stack';
		this.setRenderer(renderer, args);

		this.configureCallbacks.forEach( function(callback) {
			callback(args);
		} );
	};

	this.setRenderer = function(r, args) {
		if (typeof r == 'function') {
			this.renderer = new r( { graph: self } );
			this.registerRenderer(this.renderer);
		} else {
			if (!this._renderers[r]) {
				throw "couldn't find renderer " + r;
			}
			this.renderer = this._renderers[r];
		}

		if (typeof args == 'object') {
			this.renderer.configure(args);
		}
	};

	this.setSize = function(args) {

		args = args || {};

		if (typeof window !== undefined) {
			var style = window.getComputedStyle(this.element, null);
			var elementWidth = parseInt(style.getPropertyValue('width'), 10);
			var elementHeight = parseInt(style.getPropertyValue('height'), 10);
		}

		this.width = args.width || elementWidth || 400;
		this.height = args.height || elementHeight || 250;

		this.vis && this.vis
			.attr('width', this.width)
			.attr('height', this.height);
	};

	this.initialize(args);
};
Rickshaw.namespace('Rickshaw.Fixtures.Color');

Rickshaw.Fixtures.Color = function() {

	this.schemes = {};

	this.schemes.spectrum14 = [
		'#ecb796',
		'#dc8f70',
		'#b2a470',
		'#92875a',
		'#716c49',
		'#d2ed82',
		'#bbe468',
		'#a1d05d',
		'#e7cbe6',
		'#d8aad6',
		'#a888c2',
		'#9dc2d3',
		'#649eb9',
		'#387aa3'
	].reverse();

	this.schemes.spectrum2000 = [
		'#57306f',
		'#514c76',
		'#646583',
		'#738394',
		'#6b9c7d',
		'#84b665',
		'#a7ca50',
		'#bfe746',
		'#e2f528',
		'#fff726',
		'#ecdd00',
		'#d4b11d',
		'#de8800',
		'#de4800',
		'#c91515',
		'#9a0000',
		'#7b0429',
		'#580839',
		'#31082b'
	];

	this.schemes.spectrum2001 = [
		'#2f243f',
		'#3c2c55',
		'#4a3768',
		'#565270',
		'#6b6b7c',
		'#72957f',
		'#86ad6e',
		'#a1bc5e',
		'#b8d954',
		'#d3e04e',
		'#ccad2a',
		'#cc8412',
		'#c1521d',
		'#ad3821',
		'#8a1010',
		'#681717',
		'#531e1e',
		'#3d1818',
		'#320a1b'
	];

	this.schemes.classic9 = [
		'#423d4f',
		'#4a6860',
		'#848f39',
		'#a2b73c',
		'#ddcb53',
		'#c5a32f',
		'#7d5836',
		'#963b20',
		'#7c2626',
		'#491d37',
		'#2f254a'
	].reverse();

	this.schemes.httpStatus = {
		503: '#ea5029',
		502: '#d23f14',
		500: '#bf3613',
		410: '#efacea',
		409: '#e291dc',
		403: '#f457e8',
		408: '#e121d2',
		401: '#b92dae',
		405: '#f47ceb',
		404: '#a82a9f',
		400: '#b263c6',
		301: '#6fa024',
		302: '#87c32b',
		307: '#a0d84c',
		304: '#28b55c',
		200: '#1a4f74',
		206: '#27839f',
		201: '#52adc9',
		202: '#7c979f',
		203: '#a5b8bd',
		204: '#c1cdd1'
	};

	this.schemes.colorwheel = [
		'#b5b6a9',
		'#858772',
		'#785f43',
		'#96557e',
		'#4682b4',
		'#65b9ac',
		'#73c03a',
		'#cb513a'
	].reverse();

	this.schemes.cool = [
		'#5e9d2f',
		'#73c03a',
		'#4682b4',
		'#7bc3b8',
		'#a9884e',
		'#c1b266',
		'#a47493',
		'#c09fb5'
	];

	this.schemes.munin = [
		'#00cc00',
		'#0066b3',
		'#ff8000',
		'#ffcc00',
		'#330099',
		'#990099',
		'#ccff00',
		'#ff0000',
		'#808080',
		'#008f00',
		'#00487d',
		'#b35a00',
		'#b38f00',
		'#6b006b',
		'#8fb300',
		'#b30000',
		'#bebebe',
		'#80ff80',
		'#80c9ff',
		'#ffc080',
		'#ffe680',
		'#aa80ff',
		'#ee00cc',
		'#ff8080',
		'#666600',
		'#ffbfff',
		'#00ffcc',
		'#cc6699',
		'#999900'
	];
};
Rickshaw.namespace('Rickshaw.Fixtures.RandomData');

Rickshaw.Fixtures.RandomData = function(timeInterval) {

	var addData;
	timeInterval = timeInterval || 1;

	var lastRandomValue = 200;

	var timeBase = Math.floor(new Date().getTime() / 1000);

	this.addData = function(data) {

		var randomValue = Math.random() * 100 + 15 + lastRandomValue;
		var index = data[0].length;

		var counter = 1;

		data.forEach( function(series) {
			var randomVariance = Math.random() * 20;
			var v = randomValue / 25  + counter++ +
				(Math.cos((index * counter * 11) / 960) + 2) * 15 +
				(Math.cos(index / 7) + 2) * 7 +
				(Math.cos(index / 17) + 2) * 1;

			series.push( { x: (index * timeInterval) + timeBase, y: v + randomVariance } );
		} );

		lastRandomValue = randomValue * 0.85;
	};

	this.removeData = function(data) {
		data.forEach( function(series) {
			series.shift();
		} );
		timeBase += timeInterval;
	};
};

Rickshaw.namespace('Rickshaw.Fixtures.Time');

Rickshaw.Fixtures.Time = function() {

	var self = this;

	this.months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

	this.units = [
		{
			name: 'decade',
			seconds: 86400 * 365.25 * 10,
			formatter: function(d) { return (parseInt(d.getUTCFullYear() / 10, 10) * 10) }
		}, {
			name: 'year',
			seconds: 86400 * 365.25,
			formatter: function(d) { return d.getUTCFullYear() }
		}, {
			name: 'month',
			seconds: 86400 * 30.5,
			formatter: function(d) { return self.months[d.getUTCMonth()] }
		}, {
			name: 'week',
			seconds: 86400 * 7,
			formatter: function(d) { return self.formatDate(d) }
		}, {
			name: 'day',
			seconds: 86400,
			formatter: function(d) { return d.getUTCDate() }
		}, {
			name: '6 hour',
			seconds: 3600 * 6,
			formatter: function(d) { return self.formatTime(d) }
		}, {
			name: 'hour',
			seconds: 3600,
			formatter: function(d) { return self.formatTime(d) }
		}, {
			name: '15 minute',
			seconds: 60 * 15,
			formatter: function(d) { return self.formatTime(d) }
		}, {
			name: 'minute',
			seconds: 60,
			formatter: function(d) { return d.getUTCMinutes() }
		}, {
			name: '15 second',
			seconds: 15,
			formatter: function(d) { return d.getUTCSeconds() + 's' }
		}, {
			name: 'second',
			seconds: 1,
			formatter: function(d) { return d.getUTCSeconds() + 's' }
		}, {
			name: 'decisecond',
			seconds: 1/10,
			formatter: function(d) { return d.getUTCMilliseconds() + 'ms' }
		}, {
			name: 'centisecond',
			seconds: 1/100,
			formatter: function(d) { return d.getUTCMilliseconds() + 'ms' }
		}
	];

	this.unit = function(unitName) {
		return this.units.filter( function(unit) { return unitName == unit.name } ).shift();
	};

	this.formatDate = function(d) {
		return d3.time.format('%b %e')(d);
	};

	this.formatTime = function(d) {
		return d.toUTCString().match(/(\d+:\d+):/)[1];
	};

	this.ceil = function(time, unit) {

		var date, floor, year;

		if (unit.name == 'month') {

			date = new Date(time * 1000);

			floor = Date.UTC(date.getUTCFullYear(), date.getUTCMonth()) / 1000;
			if (floor == time) return time;

			year = date.getUTCFullYear();
			var month = date.getUTCMonth();

			if (month == 11) {
				month = 0;
				year = year + 1;
			} else {
				month += 1;
			}

			return Date.UTC(year, month) / 1000;
		}

		if (unit.name == 'year') {

			date = new Date(time * 1000);

			floor = Date.UTC(date.getUTCFullYear(), 0) / 1000;
			if (floor == time) return time;

			year = date.getUTCFullYear() + 1;

			return Date.UTC(year, 0) / 1000;
		}

		return Math.ceil(time / unit.seconds) * unit.seconds;
	};
};
Rickshaw.namespace('Rickshaw.Fixtures.Time.Local');

Rickshaw.Fixtures.Time.Local = function() {

	var self = this;

	this.months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

	this.units = [
		{
			name: 'decade',
			seconds: 86400 * 365.25 * 10,
			formatter: function(d) { return (parseInt(d.getFullYear() / 10, 10) * 10) }
		}, {
			name: 'year',
			seconds: 86400 * 365.25,
			formatter: function(d) { return d.getFullYear() }
		}, {
			name: 'month',
			seconds: 86400 * 30.5,
			formatter: function(d) { return self.months[d.getMonth()] }
		}, {
			name: 'week',
			seconds: 86400 * 7,
			formatter: function(d) { return self.formatDate(d) }
		}, {
			name: 'day',
			seconds: 86400,
			formatter: function(d) { return d.getDate() }
		}, {
			name: '6 hour',
			seconds: 3600 * 6,
			formatter: function(d) { return self.formatTime(d) }
		}, {
			name: 'hour',
			seconds: 3600,
			formatter: function(d) { return self.formatTime(d) }
		}, {
			name: '15 minute',
			seconds: 60 * 15,
			formatter: function(d) { return self.formatTime(d) }
		}, {
			name: 'minute',
			seconds: 60,
			formatter: function(d) { return d.getMinutes() }
		}, {
			name: '15 second',
			seconds: 15,
			formatter: function(d) { return d.getSeconds() + 's' }
		}, {
			name: 'second',
			seconds: 1,
			formatter: function(d) { return d.getSeconds() + 's' }
		}, {
			name: 'decisecond',
			seconds: 1/10,
			formatter: function(d) { return d.getMilliseconds() + 'ms' }
		}, {
			name: 'centisecond',
			seconds: 1/100,
			formatter: function(d) { return d.getMilliseconds() + 'ms' }
		}
	];

	this.unit = function(unitName) {
		return this.units.filter( function(unit) { return unitName == unit.name } ).shift();
	};

	this.formatDate = function(d) {
		return d3.time.format('%b %e')(d);
	};

	this.formatTime = function(d) {
		return d.toString().match(/(\d+:\d+):/)[1];
	};

	this.ceil = function(time, unit) {

		var date, floor, year;

		if (unit.name == 'day') {

			var nearFuture = new Date((time + unit.seconds - 1) * 1000);

			var rounded = new Date(0);
			rounded.setFullYear(nearFuture.getFullYear());
			rounded.setMonth(nearFuture.getMonth());
			rounded.setDate(nearFuture.getDate());
			rounded.setMilliseconds(0);
			rounded.setSeconds(0);
			rounded.setMinutes(0);
			rounded.setHours(0);

			return rounded.getTime() / 1000;
		}

		if (unit.name == 'month') {

			date = new Date(time * 1000);

			floor = new Date(date.getFullYear(), date.getMonth()).getTime() / 1000;
			if (floor == time) return time;

			year = date.getFullYear();
			var month = date.getMonth();

			if (month == 11) {
				month = 0;
				year = year + 1;
			} else {
				month += 1;
			}

			return new Date(year, month).getTime() / 1000;
		}

		if (unit.name == 'year') {

			date = new Date(time * 1000);

			floor = new Date(date.getUTCFullYear(), 0).getTime() / 1000;
			if (floor == time) return time;

			year = date.getFullYear() + 1;

			return new Date(year, 0).getTime() / 1000;
		}

		return Math.ceil(time / unit.seconds) * unit.seconds;
	};
};
Rickshaw.namespace('Rickshaw.Fixtures.Number');

Rickshaw.Fixtures.Number.formatKMBT = function(y) {
	var abs_y = Math.abs(y);
	if (abs_y >= 1000000000000)   { return y / 1000000000000 + "T" }
	else if (abs_y >= 1000000000) { return y / 1000000000 + "B" }
	else if (abs_y >= 1000000)    { return y / 1000000 + "M" }
	else if (abs_y >= 1000)       { return y / 1000 + "K" }
	else if (abs_y < 1 && y > 0)  { return y.toFixed(2) }
	else if (abs_y === 0)         { return '' }
	else                      { return y }
};

Rickshaw.Fixtures.Number.formatBase1024KMGTP = function(y) {
    var abs_y = Math.abs(y);
    if (abs_y >= 1125899906842624)  { return y / 1125899906842624 + "P" }
    else if (abs_y >= 1099511627776){ return y / 1099511627776 + "T" }
    else if (abs_y >= 1073741824)   { return y / 1073741824 + "G" }
    else if (abs_y >= 1048576)      { return y / 1048576 + "M" }
    else if (abs_y >= 1024)         { return y / 1024 + "K" }
    else if (abs_y < 1 && y > 0)    { return y.toFixed(2) }
    else if (abs_y === 0)           { return '' }
    else                        { return y }
};
Rickshaw.namespace("Rickshaw.Color.Palette");

Rickshaw.Color.Palette = function(args) {

	var color = new Rickshaw.Fixtures.Color();

	args = args || {};
	this.schemes = {};

	this.scheme = color.schemes[args.scheme] || args.scheme || color.schemes.colorwheel;
	this.runningIndex = 0;
	this.generatorIndex = 0;

	if (args.interpolatedStopCount) {
		var schemeCount = this.scheme.length - 1;
		var i, j, scheme = [];
		for (i = 0; i < schemeCount; i++) {
			scheme.push(this.scheme[i]);
			var generator = d3.interpolateHsl(this.scheme[i], this.scheme[i + 1]);
			for (j = 1; j < args.interpolatedStopCount; j++) {
				scheme.push(generator((1 / args.interpolatedStopCount) * j));
			}
		}
		scheme.push(this.scheme[this.scheme.length - 1]);
		this.scheme = scheme;
	}
	this.rotateCount = this.scheme.length;

	this.color = function(key) {
		return this.scheme[key] || this.scheme[this.runningIndex++] || this.interpolateColor() || '#808080';
	};

	this.interpolateColor = function() {
		if (!Array.isArray(this.scheme)) return;
		var color;
		if (this.generatorIndex == this.rotateCount * 2 - 1) {
			color = d3.interpolateHsl(this.scheme[this.generatorIndex], this.scheme[0])(0.5);
			this.generatorIndex = 0;
			this.rotateCount *= 2;
		} else {
			color = d3.interpolateHsl(this.scheme[this.generatorIndex], this.scheme[this.generatorIndex + 1])(0.5);
			this.generatorIndex++;
		}
		this.scheme.push(color);
		return color;
	};

};
Rickshaw.namespace('Rickshaw.Graph.Ajax');

Rickshaw.Graph.Ajax = Rickshaw.Class.create( {

	initialize: function(args) {

		this.dataURL = args.dataURL;

		this.onData = args.onData || function(d) { return d };
		this.onComplete = args.onComplete || function() {};
		this.onError = args.onError || function() {};

		this.args = args; // pass through to Rickshaw.Graph

		this.request();
	},

	request: function() {

		jQuery.ajax( {
			url: this.dataURL,
			dataType: 'json',
			success: this.success.bind(this),
			error: this.error.bind(this)
		} );
	},

	error: function() {

		console.log("error loading dataURL: " + this.dataURL);
		this.onError(this);
	},

	success: function(data, status) {

		data = this.onData(data);
		this.args.series = this._splice({ data: data, series: this.args.series });

		this.graph = this.graph || new Rickshaw.Graph(this.args);
		this.graph.render();

		this.onComplete(this);
	},

	_splice: function(args) {

		var data = args.data;
		var series = args.series;

		if (!args.series) return data;

		series.forEach( function(s) {

			var seriesKey = s.key || s.name;
			if (!seriesKey) throw "series needs a key or a name";

			data.forEach( function(d) {

				var dataKey = d.key || d.name;
				if (!dataKey) throw "data needs a key or a name";

				if (seriesKey == dataKey) {
					var properties = ['color', 'name', 'data'];
					properties.forEach( function(p) {
						if (d[p]) s[p] = d[p];
					} );
				}
			} );
		} );

		return series;
	}
} );

Rickshaw.namespace('Rickshaw.Graph.Annotate');

Rickshaw.Graph.Annotate = function(args) {

	var graph = this.graph = args.graph;
	this.elements = { timeline: args.element };
	
	var self = this;

	this.data = {};

	this.elements.timeline.classList.add('rickshaw_annotation_timeline');

	this.add = function(time, content, end_time) {
		self.data[time] = self.data[time] || {'boxes': []};
		self.data[time].boxes.push({content: content, end: end_time});
	};

	this.update = function() {

		Rickshaw.keys(self.data).forEach( function(time) {

			var annotation = self.data[time];
			var left = self.graph.x(time);

			if (left < 0 || left > self.graph.x.range()[1]) {
				if (annotation.element) {
					annotation.line.classList.add('offscreen');
					annotation.element.style.display = 'none';
				}

				annotation.boxes.forEach( function(box) {
					if ( box.rangeElement ) box.rangeElement.classList.add('offscreen');
				});

				return;
			}

			if (!annotation.element) {
				var element = annotation.element = document.createElement('div');
				element.classList.add('annotation');
				this.elements.timeline.appendChild(element);
				element.addEventListener('click', function(e) {
					element.classList.toggle('active');
					annotation.line.classList.toggle('active');
					annotation.boxes.forEach( function(box) {
						if ( box.rangeElement ) box.rangeElement.classList.toggle('active');
					});
				}, false);
					
			}

			annotation.element.style.left = left + 'px';
			annotation.element.style.display = 'block';

			annotation.boxes.forEach( function(box) {


				var element = box.element;

				if (!element) {
					element = box.element = document.createElement('div');
					element.classList.add('content');
					element.innerHTML = box.content;
					annotation.element.appendChild(element);

					annotation.line = document.createElement('div');
					annotation.line.classList.add('annotation_line');
					self.graph.element.appendChild(annotation.line);

					if ( box.end ) {
						box.rangeElement = document.createElement('div');
						box.rangeElement.classList.add('annotation_range');
						self.graph.element.appendChild(box.rangeElement);
					}

				}

				if ( box.end ) {

					var annotationRangeStart = left;
					var annotationRangeEnd   = Math.min( self.graph.x(box.end), self.graph.x.range()[1] );

					// annotation makes more sense at end
					if ( annotationRangeStart > annotationRangeEnd ) {
						annotationRangeEnd   = left;
						annotationRangeStart = Math.max( self.graph.x(box.end), self.graph.x.range()[0] );
					}

					var annotationRangeWidth = annotationRangeEnd - annotationRangeStart;

					box.rangeElement.style.left  = annotationRangeStart + 'px';
					box.rangeElement.style.width = annotationRangeWidth + 'px';

					box.rangeElement.classList.remove('offscreen');
				}

				annotation.line.classList.remove('offscreen');
				annotation.line.style.left = left + 'px';
			} );
		}, this );
	};

	this.graph.onUpdate( function() { self.update() } );
};
Rickshaw.namespace('Rickshaw.Graph.Axis.Time');

Rickshaw.Graph.Axis.Time = function(args) {

	var self = this;

	this.graph = args.graph;
	this.elements = [];
	this.ticksTreatment = args.ticksTreatment || 'plain';
	this.fixedTimeUnit = args.timeUnit;

	var time = args.timeFixture || new Rickshaw.Fixtures.Time();

	this.appropriateTimeUnit = function() {

		var unit;
		var units = time.units;

		var domain = this.graph.x.domain();
		var rangeSeconds = domain[1] - domain[0];

		units.forEach( function(u) {
			if (Math.floor(rangeSeconds / u.seconds) >= 2) {
				unit = unit || u;
			}
		} );

		return (unit || time.units[time.units.length - 1]);
	};

	this.tickOffsets = function() {

		var domain = this.graph.x.domain();

		var unit = this.fixedTimeUnit || this.appropriateTimeUnit();
		var count = Math.ceil((domain[1] - domain[0]) / unit.seconds);

		var runningTick = domain[0];

		var offsets = [];

		for (var i = 0; i < count; i++) {

			var tickValue = time.ceil(runningTick, unit);
			runningTick = tickValue + unit.seconds / 2;

			offsets.push( { value: tickValue, unit: unit } );
		}

		return offsets;
	};

	this.render = function() {

		this.elements.forEach( function(e) {
			e.parentNode.removeChild(e);
		} );

		this.elements = [];

		var offsets = this.tickOffsets();

		offsets.forEach( function(o) {
			
			if (self.graph.x(o.value) > self.graph.x.range()[1]) return;
	
			var element = document.createElement('div');
			element.style.left = self.graph.x(o.value) + 'px';
			element.classList.add('x_tick');
			element.classList.add(self.ticksTreatment);

			var title = document.createElement('div');
			title.classList.add('title');
			title.innerHTML = o.unit.formatter(new Date(o.value * 1000));
			element.appendChild(title);

			self.graph.element.appendChild(element);
			self.elements.push(element);

		} );
	};

	this.graph.onUpdate( function() { self.render() } );
};

Rickshaw.namespace('Rickshaw.Graph.Axis.X');

Rickshaw.Graph.Axis.X = function(args) {

	var self = this;
	var berthRate = 0.10;

	this.initialize = function(args) {

		this.graph = args.graph;
		this.orientation = args.orientation || 'top';

		this.pixelsPerTick = args.pixelsPerTick || 75;
		if (args.ticks) this.staticTicks = args.ticks;
		if (args.tickValues) this.tickValues = args.tickValues;

		this.tickSize = args.tickSize || 4;
		this.ticksTreatment = args.ticksTreatment || 'plain';

		if (args.element) {

			this.element = args.element;
			this._discoverSize(args.element, args);

			this.vis = d3.select(args.element)
				.append("svg:svg")
				.attr('height', this.height)
				.attr('width', this.width)
				.attr('class', 'rickshaw_graph x_axis_d3');

			this.element = this.vis[0][0];
			this.element.style.position = 'relative';

			this.setSize({ width: args.width, height: args.height });

		} else {
			this.vis = this.graph.vis;
		}

		this.graph.onUpdate( function() { self.render() } );
	};

	this.setSize = function(args) {

		args = args || {};
		if (!this.element) return;

		this._discoverSize(this.element.parentNode, args);

		this.vis
			.attr('height', this.height)
			.attr('width', this.width * (1 + berthRate));

		var berth = Math.floor(this.width * berthRate / 2);
		this.element.style.left = -1 * berth + 'px';
	};

	this.render = function() {

		if (this._renderWidth !== undefined && this.graph.width !== this._renderWidth) this.setSize({ auto: true });

		var axis = d3.svg.axis().scale(this.graph.x).orient(this.orientation);
		axis.tickFormat( args.tickFormat || function(x) { return x } );
		if (this.tickValues) axis.tickValues(this.tickValues);

		this.ticks = this.staticTicks || Math.floor(this.graph.width / this.pixelsPerTick);

		var berth = Math.floor(this.width * berthRate / 2) || 0;
		var transform;

		if (this.orientation == 'top') {
			var yOffset = this.height || this.graph.height;
			transform = 'translate(' + berth + ',' + yOffset + ')';
		} else {
			transform = 'translate(' + berth + ', 0)';
		}

		if (this.element) {
			this.vis.selectAll('*').remove();
		}

		this.vis
			.append("svg:g")
			.attr("class", ["x_ticks_d3", this.ticksTreatment].join(" "))
			.attr("transform", transform)
			.call(axis.ticks(this.ticks).tickSubdivide(0).tickSize(this.tickSize));

		var gridSize = (this.orientation == 'bottom' ? 1 : -1) * this.graph.height;

		this.graph.vis
			.append("svg:g")
			.attr("class", "x_grid_d3")
			.call(axis.ticks(this.ticks).tickSubdivide(0).tickSize(gridSize))
			.selectAll('text')
			.each(function() { this.parentNode.setAttribute('data-x-value', this.textContent) });

		this._renderHeight = this.graph.height;
	};

	this._discoverSize = function(element, args) {

		if (typeof window !== 'undefined') {

			var style = window.getComputedStyle(element, null);
			var elementHeight = parseInt(style.getPropertyValue('height'), 10);

			if (!args.auto) {
				var elementWidth = parseInt(style.getPropertyValue('width'), 10);
			}
		}

		this.width = (args.width || elementWidth || this.graph.width) * (1 + berthRate);
		this.height = args.height || elementHeight || 40;
	};

	this.initialize(args);
};

Rickshaw.namespace('Rickshaw.Graph.Axis.Y');

Rickshaw.Graph.Axis.Y = Rickshaw.Class.create( {

	initialize: function(args) {

		this.graph = args.graph;
		this.orientation = args.orientation || 'right';

		this.pixelsPerTick = args.pixelsPerTick || 75;
		if (args.ticks) this.staticTicks = args.ticks;
		if (args.tickValues) this.tickValues = args.tickValues;

		this.tickSize = args.tickSize || 4;
		this.ticksTreatment = args.ticksTreatment || 'plain';

		this.tickFormat = args.tickFormat || function(y) { return y };

		this.berthRate = 0.10;

		if (args.element) {

			this.element = args.element;
			this.vis = d3.select(args.element)
				.append("svg:svg")
				.attr('class', 'rickshaw_graph y_axis');

			this.element = this.vis[0][0];
			this.element.style.position = 'relative';

			this.setSize({ width: args.width, height: args.height });

		} else {
			this.vis = this.graph.vis;
		}

		var self = this;
		this.graph.onUpdate( function() { self.render() } );
	},

	setSize: function(args) {

		args = args || {};

		if (!this.element) return;

		if (typeof window !== 'undefined') {

			var style = window.getComputedStyle(this.element.parentNode, null);
			var elementWidth = parseInt(style.getPropertyValue('width'), 10);

			if (!args.auto) {
				var elementHeight = parseInt(style.getPropertyValue('height'), 10);
			}
		}

		this.width = args.width || elementWidth || this.graph.width * this.berthRate;
		this.height = args.height || elementHeight || this.graph.height;

		this.vis
			.attr('width', this.width)
			.attr('height', this.height * (1 + this.berthRate));

		var berth = this.height * this.berthRate;

		if (this.orientation == 'left') {
			this.element.style.top = -1 * berth + 'px';
		}
	},

	render: function() {

		if (this._renderHeight !== undefined && this.graph.height !== this._renderHeight) this.setSize({ auto: true });

		this.ticks = this.staticTicks || Math.floor(this.graph.height / this.pixelsPerTick);

		var axis = this._drawAxis(this.graph.y);

		this._drawGrid(axis);

		this._renderHeight = this.graph.height;
	},

	_drawAxis: function(scale) {
		var axis = d3.svg.axis().scale(scale).orient(this.orientation);
		axis.tickFormat(this.tickFormat);
		if (this.tickValues) axis.tickValues(this.tickValues);

		if (this.orientation == 'left') {
			var berth = this.height * this.berthRate;
			var transform = 'translate(' + this.width + ', ' + berth + ')';
		}

		if (this.element) {
			this.vis.selectAll('*').remove();
		}

		this.vis
			.append("svg:g")
			.attr("class", ["y_ticks", this.ticksTreatment].join(" "))
			.attr("transform", transform)
			.call(axis.ticks(this.ticks).tickSubdivide(0).tickSize(this.tickSize));

		return axis;
	},

	_drawGrid: function(axis) {
		var gridSize = (this.orientation == 'right' ? 1 : -1) * this.graph.width;

		this.graph.vis
			.append("svg:g")
			.attr("class", "y_grid")
			.call(axis.ticks(this.ticks).tickSubdivide(0).tickSize(gridSize))
			.selectAll('text')
			.each(function() { this.parentNode.setAttribute('data-y-value', this.textContent) });
	}
} );
Rickshaw.namespace('Rickshaw.Graph.Axis.Y.Scaled');

Rickshaw.Graph.Axis.Y.Scaled = Rickshaw.Class.create( Rickshaw.Graph.Axis.Y, {

  initialize: function($super, args) {

    if (typeof(args.scale) === 'undefined') {
      throw new Error('Scaled requires scale');
    }

    this.scale = args.scale;

    if (typeof(args.grid) === 'undefined') {
      this.grid = true;
    } else {
      this.grid = args.grid;
    }

    $super(args);

  },

  _drawAxis: function($super, scale) {
    // Adjust scale's domain to compensate for adjustments to the
    // renderer's domain (e.g. padding).
    var domain = this.scale.domain();
    var renderDomain = this.graph.renderer.domain().y;

    var extents = [
      Math.min.apply(Math, domain),
      Math.max.apply(Math, domain)];

    // A mapping from the ideal render domain [0, 1] to the extent
    // of the original scale's domain.  This is used to calculate
    // the extents of the adjusted domain.
    var extentMap = d3.scale.linear().domain([0, 1]).range(extents);

    var adjExtents = [
      extentMap(renderDomain[0]),
      extentMap(renderDomain[1])];

    // A mapping from the original domain to the adjusted domain.
    var adjustment = d3.scale.linear().domain(extents).range(adjExtents);

    // Make a copy of the custom scale, apply the adjusted domain, and
    // copy the range to match the graph's scale.
    var adjustedScale = this.scale.copy()
      .domain(domain.map(adjustment))
      .range(scale.range());

    return $super(adjustedScale);
  },

  _drawGrid: function($super, axis) {
    if (this.grid) {
      // only draw the axis if the grid option is true
      $super(axis);
    }
  }
} );
Rickshaw.namespace('Rickshaw.Graph.Behavior.Series.Highlight');

Rickshaw.Graph.Behavior.Series.Highlight = function(args) {

	this.graph = args.graph;
	this.legend = args.legend;

	var self = this;

	var colorSafe = {};
	var activeLine = null;

	var disabledColor = args.disabledColor || function(seriesColor) {
		return d3.interpolateRgb(seriesColor, d3.rgb('#d8d8d8'))(0.8).toString();
	};

	this.addHighlightEvents = function (l) {

		l.element.addEventListener( 'mouseover', function(e) {

			if (activeLine) return;
			else activeLine = l;

			self.legend.lines.forEach( function(line) {

				if (l === line) {

					// if we're not in a stacked renderer bring active line to the top
					if (self.graph.renderer.unstack && (line.series.renderer ? line.series.renderer.unstack : true)) {

						var seriesIndex = self.graph.series.indexOf(line.series);
						line.originalIndex = seriesIndex;

						var series = self.graph.series.splice(seriesIndex, 1)[0];
						self.graph.series.push(series);
					}
					return;
				}

				colorSafe[line.series.name] = colorSafe[line.series.name] || line.series.color;
				line.series.color = disabledColor(line.series.color);

			} );

			self.graph.update();

		}, false );

		l.element.addEventListener( 'mouseout', function(e) {

			if (!activeLine) return;
			else activeLine = null;

			self.legend.lines.forEach( function(line) {

				// return reordered series to its original place
				if (l === line && line.hasOwnProperty('originalIndex')) {

					var series = self.graph.series.pop();
					self.graph.series.splice(line.originalIndex, 0, series);
					delete line.originalIndex;
				}

				if (colorSafe[line.series.name]) {
					line.series.color = colorSafe[line.series.name];
				}
			} );

			self.graph.update();

		}, false );
	};

	if (this.legend) {
		this.legend.lines.forEach( function(l) {
			self.addHighlightEvents(l);
		} );
	}

};
Rickshaw.namespace('Rickshaw.Graph.Behavior.Series.Order');

Rickshaw.Graph.Behavior.Series.Order = function(args) {

	this.graph = args.graph;
	this.legend = args.legend;

	var self = this;

	if (typeof __webpack_provided_window_dot_jQuery == 'undefined') {
		throw "couldn't find jQuery at window.jQuery";
	}

	if (typeof __webpack_provided_window_dot_jQuery.ui == 'undefined') {
		throw "couldn't find jQuery UI at window.jQuery.ui";
	}

	jQuery(function() {
		jQuery(self.legend.list).sortable( {
			containment: 'parent',
			tolerance: 'pointer',
			update: function( event, ui ) {
				var series = [];
				jQuery(self.legend.list).find('li').each( function(index, item) {
					if (!item.series) return;
					series.push(item.series);
				} );

				for (var i = self.graph.series.length - 1; i >= 0; i--) {
					self.graph.series[i] = series.shift();
				}

				self.graph.update();
			}
		} );
		jQuery(self.legend.list).disableSelection();
	});

	//hack to make jquery-ui sortable behave
	this.graph.onUpdate( function() { 
		var h = window.getComputedStyle(self.legend.element).height;
		self.legend.element.style.height = h;
	} );
};
Rickshaw.namespace('Rickshaw.Graph.Behavior.Series.Toggle');

Rickshaw.Graph.Behavior.Series.Toggle = function(args) {

	this.graph = args.graph;
	this.legend = args.legend;

	var self = this;

	this.addAnchor = function(line) {

		var anchor = document.createElement('a');
		anchor.innerHTML = '&#10004;';
		anchor.classList.add('action');
		line.element.insertBefore(anchor, line.element.firstChild);

		anchor.onclick = function(e) {
			if (line.series.disabled) {
				line.series.enable();
				line.element.classList.remove('disabled');
			} else { 
				if (this.graph.series.filter(function(s) { return !s.disabled }).length <= 1) return;
				line.series.disable();
				line.element.classList.add('disabled');
			}

			self.graph.update();

		}.bind(this);
		
                var label = line.element.getElementsByTagName('span')[0];
                label.onclick = function(e){

                        var disableAllOtherLines = line.series.disabled;
                        if ( ! disableAllOtherLines ) {
                                for ( var i = 0; i < self.legend.lines.length; i++ ) {
                                        var l = self.legend.lines[i];
                                        if ( line.series === l.series ) {
                                                // noop
                                        } else if ( l.series.disabled ) {
                                                // noop
                                        } else {
                                                disableAllOtherLines = true;
                                                break;
                                        }
                                }
                        }

                        // show all or none
                        if ( disableAllOtherLines ) {

                                // these must happen first or else we try ( and probably fail ) to make a no line graph
                                line.series.enable();
                                line.element.classList.remove('disabled');

                                self.legend.lines.forEach(function(l){
                                        if ( line.series === l.series ) {
                                                // noop
                                        } else {
                                                l.series.disable();
                                                l.element.classList.add('disabled');
                                        }
                                });

                        } else {

                                self.legend.lines.forEach(function(l){
                                        l.series.enable();
                                        l.element.classList.remove('disabled');
                                });

                        }

                        self.graph.update();

                };

	};

	if (this.legend) {

		var $ = jQuery;
		if (typeof $ != 'undefined' && $(this.legend.list).sortable) {

			$(this.legend.list).sortable( {
				start: function(event, ui) {
					ui.item.bind('no.onclick',
						function(event) {
							event.preventDefault();
						}
					);
				},
				stop: function(event, ui) {
					setTimeout(function(){
						ui.item.unbind('no.onclick');
					}, 250);
				}
			});
		}

		this.legend.lines.forEach( function(l) {
			self.addAnchor(l);
		} );
	}

	this._addBehavior = function() {

		this.graph.series.forEach( function(s) {
			
			s.disable = function() {

				if (self.graph.series.length <= 1) {
					throw('only one series left');
				}
				
				s.disabled = true;
			};

			s.enable = function() {
				s.disabled = false;
			};
		} );
	};
	this._addBehavior();

	this.updateBehaviour = function () { this._addBehavior() };

};
Rickshaw.namespace('Rickshaw.Graph.HoverDetail');

Rickshaw.Graph.HoverDetail = Rickshaw.Class.create({

	initialize: function(args) {

		var graph = this.graph = args.graph;

		this.xFormatter = args.xFormatter || function(x) {
			return new Date( x * 1000 ).toUTCString();
		};

		this.yFormatter = args.yFormatter || function(y) {
			return y === null ? y : y.toFixed(2);
		};

		var element = this.element = document.createElement('div');
		element.className = 'detail';

		this.visible = true;
		graph.element.appendChild(element);

		this.lastEvent = null;
		this._addListeners();

		this.onShow = args.onShow;
		this.onHide = args.onHide;
		this.onRender = args.onRender;

		this.formatter = args.formatter || this.formatter;

	},

	formatter: function(series, x, y, formattedX, formattedY, d) {
		return series.name + ':&nbsp;' + formattedY;
	},

	update: function(e) {

		e = e || this.lastEvent;
		if (!e) return;
		this.lastEvent = e;

		if (!e.target.nodeName.match(/^(path|svg|rect|circle)$/)) return;

		var graph = this.graph;

		var eventX = e.offsetX || e.layerX;
		var eventY = e.offsetY || e.layerY;

		var j = 0;
		var points = [];
		var nearestPoint;

		this.graph.series.active().forEach( function(series) {

			var data = this.graph.stackedData[j++];

			if (!data.length)
				return;

			var domainX = graph.x.invert(eventX);

			var domainIndexScale = d3.scale.linear()
				.domain([data[0].x, data.slice(-1)[0].x])
				.range([0, data.length - 1]);

			var approximateIndex = Math.round(domainIndexScale(domainX));
			if (approximateIndex == data.length - 1) approximateIndex--;

			var dataIndex = Math.min(approximateIndex || 0, data.length - 1);

			for (var i = approximateIndex; i < data.length - 1;) {

				if (!data[i] || !data[i + 1]) break;

				if (data[i].x <= domainX && data[i + 1].x > domainX) {
					dataIndex = Math.abs(domainX - data[i].x) < Math.abs(domainX - data[i + 1].x) ? i : i + 1;
					break;
				}

				if (data[i + 1].x <= domainX) { i++ } else { i-- }
			}

			if (dataIndex < 0) dataIndex = 0;
			var value = data[dataIndex];

			var distance = Math.sqrt(
				Math.pow(Math.abs(graph.x(value.x) - eventX), 2) +
				Math.pow(Math.abs(graph.y(value.y + value.y0) - eventY), 2)
			);

			var xFormatter = series.xFormatter || this.xFormatter;
			var yFormatter = series.yFormatter || this.yFormatter;

			var point = {
				formattedXValue: xFormatter(value.x),
				formattedYValue: yFormatter(series.scale ? series.scale.invert(value.y) : value.y),
				series: series,
				value: value,
				distance: distance,
				order: j,
				name: series.name
			};

			if (!nearestPoint || distance < nearestPoint.distance) {
				nearestPoint = point;
			}

			points.push(point);

		}, this );

		if (!nearestPoint)
			return;

		nearestPoint.active = true;

		var domainX = nearestPoint.value.x;
		var formattedXValue = nearestPoint.formattedXValue;

		this.element.innerHTML = '';
		this.element.style.left = graph.x(domainX) + 'px';

		this.visible && this.render( {
			points: points,
			detail: points, // for backwards compatibility
			mouseX: eventX,
			mouseY: eventY,
			formattedXValue: formattedXValue,
			domainX: domainX
		} );
	},

	hide: function() {
		this.visible = false;
		this.element.classList.add('inactive');

		if (typeof this.onHide == 'function') {
			this.onHide();
		}
	},

	show: function() {
		this.visible = true;
		this.element.classList.remove('inactive');

		if (typeof this.onShow == 'function') {
			this.onShow();
		}
	},

	render: function(args) {

		var graph = this.graph;
		var points = args.points;
		var point = points.filter( function(p) { return p.active } ).shift();

		if (point.value.y === null) return;

		var formattedXValue = point.formattedXValue;
		var formattedYValue = point.formattedYValue;

		this.element.innerHTML = '';
		this.element.style.left = graph.x(point.value.x) + 'px';

		var xLabel = document.createElement('div');

		xLabel.className = 'x_label';
		xLabel.innerHTML = formattedXValue;
		this.element.appendChild(xLabel);

		var item = document.createElement('div');

		item.className = 'item';

		// invert the scale if this series displays using a scale
		var series = point.series;
		var actualY = series.scale ? series.scale.invert(point.value.y) : point.value.y;

		item.innerHTML = this.formatter(series, point.value.x, actualY, formattedXValue, formattedYValue, point);
		item.style.top = this.graph.y(point.value.y0 + point.value.y) + 'px';

		this.element.appendChild(item);

		var dot = document.createElement('div');

		dot.className = 'dot';
		dot.style.top = item.style.top;
		dot.style.borderColor = series.color;

		this.element.appendChild(dot);

		if (point.active) {
			item.classList.add('active');
			dot.classList.add('active');
		}

		// Assume left alignment until the element has been displayed and
		// bounding box calculations are possible.
		var alignables = [xLabel, item];
		alignables.forEach(function(el) {
			el.classList.add('left');
		});

		this.show();

		// If left-alignment results in any error, try right-alignment.
		var leftAlignError = this._calcLayoutError(alignables);
		if (leftAlignError > 0) {
			alignables.forEach(function(el) {
				el.classList.remove('left');
				el.classList.add('right');
			});

			// If right-alignment is worse than left alignment, switch back.
			var rightAlignError = this._calcLayoutError(alignables);
			if (rightAlignError > leftAlignError) {
				alignables.forEach(function(el) {
					el.classList.remove('right');
					el.classList.add('left');
				});
			}
		}

		if (typeof this.onRender == 'function') {
			this.onRender(args);
		}
	},

	_calcLayoutError: function(alignables) {
		// Layout error is calculated as the number of linear pixels by which
		// an alignable extends past the left or right edge of the parent.
		var parentRect = this.element.parentNode.getBoundingClientRect();

		var error = 0;
		var alignRight = alignables.forEach(function(el) {
			var rect = el.getBoundingClientRect();
			if (!rect.width) {
				return;
			}

			if (rect.right > parentRect.right) {
				error += rect.right - parentRect.right;
			}

			if (rect.left < parentRect.left) {
				error += parentRect.left - rect.left;
			}
		});
		return error;
	},

	_addListeners: function() {

		this.graph.element.addEventListener(
			'mousemove',
			function(e) {
				this.visible = true;
				this.update(e);
			}.bind(this),
			false
		);

		this.graph.onUpdate( function() { this.update() }.bind(this) );

		this.graph.element.addEventListener(
			'mouseout',
			function(e) {
				if (e.relatedTarget && !(e.relatedTarget.compareDocumentPosition(this.graph.element) & Node.DOCUMENT_POSITION_CONTAINS)) {
					this.hide();
				}
			}.bind(this),
			false
		);
	}
});
Rickshaw.namespace('Rickshaw.Graph.JSONP');

Rickshaw.Graph.JSONP = Rickshaw.Class.create( Rickshaw.Graph.Ajax, {

	request: function() {

		jQuery.ajax( {
			url: this.dataURL,
			dataType: 'jsonp',
			success: this.success.bind(this),
			error: this.error.bind(this)
		} );
	}
} );
Rickshaw.namespace('Rickshaw.Graph.Legend');

Rickshaw.Graph.Legend = Rickshaw.Class.create( {

	className: 'rickshaw_legend',

	initialize: function(args) {
		this.element = args.element;
		this.graph = args.graph;
		this.naturalOrder = args.naturalOrder;

		this.element.classList.add(this.className);

		this.list = document.createElement('ul');
		this.element.appendChild(this.list);

		this.render();

		// we could bind this.render.bind(this) here
		// but triggering the re-render would lose the added
		// behavior of the series toggle
		this.graph.onUpdate( function() {} );
	},

	render: function() {
		var self = this;

		while ( this.list.firstChild ) {
			this.list.removeChild( this.list.firstChild );
		}
		this.lines = [];

		var series = this.graph.series
			.map( function(s) { return s } );

		if (!this.naturalOrder) {
			series = series.reverse();
		}

		series.forEach( function(s) {
			self.addLine(s);
		} );


	},

	addLine: function (series) {
		var line = document.createElement('li');
		line.className = 'line';
		if (series.disabled) {
			line.className += ' disabled';
		}
		if (series.className) {
			d3.select(line).classed(series.className, true);
		}
		var swatch = document.createElement('div');
		swatch.className = 'swatch';
		swatch.style.backgroundColor = series.color;

		line.appendChild(swatch);

		var label = document.createElement('span');
		label.className = 'label';
		label.innerHTML = series.name;

		line.appendChild(label);
		this.list.appendChild(line);

		line.series = series;

		if (series.noLegend) {
			line.style.display = 'none';
		}

		var _line = { element: line, series: series };
		if (this.shelving) {
			this.shelving.addAnchor(_line);
			this.shelving.updateBehaviour();
		}
		if (this.highlighter) {
			this.highlighter.addHighlightEvents(_line);
		}
		this.lines.push(_line);
		return line;
	}
} );

Rickshaw.namespace('Rickshaw.Graph.RangeSlider');

Rickshaw.Graph.RangeSlider = Rickshaw.Class.create({

	initialize: function(args) {

		var element = this.element = args.element;
		var graph = this.graph = args.graph;

		this.slideCallbacks = [];

		this.build();

		graph.onUpdate( function() { this.update() }.bind(this) );
	},

	build: function() {

		var element = this.element;
		var graph = this.graph;
		var $ = jQuery;

		var domain = graph.dataDomain();
		var self = this;

		$( function() {
			$(element).slider( {
				range: true,
				min: domain[0],
				max: domain[1],
				values: [ 
					domain[0],
					domain[1]
				],
				slide: function( event, ui ) {

					if (ui.values[1] <= ui.values[0]) return;

					graph.window.xMin = ui.values[0];
					graph.window.xMax = ui.values[1];
					graph.update();

					var domain = graph.dataDomain();

					// if we're at an extreme, stick there
					if (domain[0] == ui.values[0]) {
						graph.window.xMin = undefined;
					}

					if (domain[1] == ui.values[1]) {
						graph.window.xMax = undefined;
					}

					self.slideCallbacks.forEach(function(callback) {
						callback(graph, graph.window.xMin, graph.window.xMax);
					});
				}
			} );
		} );

		$(element)[0].style.width = graph.width + 'px';

	},

	update: function() {

		var element = this.element;
		var graph = this.graph;
		var $ = jQuery;

		var values = $(element).slider('option', 'values');

		var domain = graph.dataDomain();

		$(element).slider('option', 'min', domain[0]);
		$(element).slider('option', 'max', domain[1]);

		if (graph.window.xMin == null) {
			values[0] = domain[0];
		}
		if (graph.window.xMax == null) {
			values[1] = domain[1];
		}

		$(element).slider('option', 'values', values);
	},

	onSlide: function(callback) {
		this.slideCallbacks.push(callback);
	}
});

Rickshaw.namespace('Rickshaw.Graph.RangeSlider.Preview');

Rickshaw.Graph.RangeSlider.Preview = Rickshaw.Class.create({

	initialize: function(args) {

		if (!args.element) throw "Rickshaw.Graph.RangeSlider.Preview needs a reference to an element";
		if (!args.graph && !args.graphs) throw "Rickshaw.Graph.RangeSlider.Preview needs a reference to an graph or an array of graphs";

		this.element = args.element;
		this.element.style.position = 'relative';

		this.graphs = args.graph ? [ args.graph ] : args.graphs;

		this.defaults = {
			height: 75,
			width: 400,
			gripperColor: undefined,
			frameTopThickness: 3,
			frameHandleThickness: 10,
			frameColor: "#d4d4d4",
			frameOpacity: 1,
			minimumFrameWidth: 0,
			heightRatio: 0.2
		};

		this.heightRatio = args.heightRatio || this.defaults.heightRatio;
		this.defaults.gripperColor = d3.rgb(this.defaults.frameColor).darker().toString(); 

		this.configureCallbacks = [];
		this.slideCallbacks = [];

		this.previews = [];

		if (!args.width) this.widthFromGraph = true;
		if (!args.height) this.heightFromGraph = true;

		if (this.widthFromGraph || this.heightFromGraph) {
			this.graphs[0].onConfigure(function () {
				this.configure(args); this.render();
			}.bind(this));
		}

		args.width = args.width || this.graphs[0].width || this.defaults.width;
		args.height = args.height || this.graphs[0].height * this.heightRatio || this.defaults.height;

		this.configure(args);
		this.render();
	},

	onSlide: function(callback) {
		this.slideCallbacks.push(callback);
	},

	onConfigure: function(callback) {
		this.configureCallbacks.push(callback);
	},

	configure: function(args) {

		this.config = this.config || {};

		this.configureCallbacks.forEach(function(callback) {
			callback(args);
		});

		Rickshaw.keys(this.defaults).forEach(function(k) {
			this.config[k] = k in args ? args[k]
				: k in this.config ? this.config[k]
				: this.defaults[k];
		}, this);

		if ('width' in args || 'height' in args) {

			if (this.widthFromGraph) {
				this.config.width = this.graphs[0].width;
			}

			if (this.heightFromGraph) {
				this.config.height = this.graphs[0].height * this.heightRatio;
				this.previewHeight = this.config.height;
			}

			this.previews.forEach(function(preview) {

				var height = this.previewHeight / this.graphs.length - this.config.frameTopThickness * 2;
				var width = this.config.width - this.config.frameHandleThickness * 2;
				preview.setSize({ width: width, height: height });

				if (this.svg) {
					var svgHeight = height + this.config.frameHandleThickness * 2;
					var svgWidth = width + this.config.frameHandleThickness * 2;
					this.svg.style("width", svgWidth + "px");
					this.svg.style("height", svgHeight + "px");
				}
			}, this);
		}
	},

	render: function() {

		var self = this;

		this.svg = d3.select(this.element)
			.selectAll("svg.rickshaw_range_slider_preview")
			.data([null]);

		this.previewHeight = this.config.height - (this.config.frameTopThickness * 2);
		this.previewWidth = this.config.width - (this.config.frameHandleThickness * 2);

		this.currentFrame = [0, this.previewWidth];

		var buildGraph = function(parent, index) {

			var graphArgs = Rickshaw.extend({}, parent.config);
			var height = self.previewHeight / self.graphs.length;
			var renderer = parent.renderer.name;

			Rickshaw.extend(graphArgs, {
				element: this.appendChild(document.createElement("div")),
				height: height,
				width: self.previewWidth,
				series: parent.series,
				renderer: renderer
			});

			var graph = new Rickshaw.Graph(graphArgs);
			self.previews.push(graph);

			parent.onUpdate(function() { graph.render(); self.render() });

			parent.onConfigure(function(args) { 
				// don't propagate height
				delete args.height;
				args.width = args.width - self.config.frameHandleThickness * 2;
				graph.configure(args);
				graph.render();
			});

			graph.render();
		};

		var graphContainer = d3.select(this.element)
			.selectAll("div.rickshaw_range_slider_preview_container")
			.data(this.graphs);

		var translateCommand = "translate(" +
			this.config.frameHandleThickness + "px, " +
			this.config.frameTopThickness + "px)";

		graphContainer.enter()
			.append("div")
			.classed("rickshaw_range_slider_preview_container", true)
			.style("-webkit-transform", translateCommand)
			.style("-moz-transform", translateCommand)
			.style("-ms-transform", translateCommand)
			.style("transform", translateCommand)
			.each(buildGraph);

		graphContainer.exit()
			.remove();

		// Use the first graph as the "master" for the frame state
		var masterGraph = this.graphs[0];

		var domainScale = d3.scale.linear()
			.domain([0, this.previewWidth])
			.range(masterGraph.dataDomain());

		var currentWindow = [masterGraph.window.xMin, masterGraph.window.xMax];

		this.currentFrame[0] = currentWindow[0] === undefined ? 
			0 : Math.round(domainScale.invert(currentWindow[0]));

		if (this.currentFrame[0] < 0) this.currentFrame[0] = 0;

		this.currentFrame[1] = currentWindow[1] === undefined ?
			this.previewWidth : domainScale.invert(currentWindow[1]);

		if (this.currentFrame[1] - this.currentFrame[0] < self.config.minimumFrameWidth) {
			this.currentFrame[1] = (this.currentFrame[0] || 0) + self.config.minimumFrameWidth;
		}

		this.svg.enter()
			.append("svg")
			.classed("rickshaw_range_slider_preview", true)
			.style("height", this.config.height + "px")
			.style("width", this.config.width + "px")
			.style("position", "absolute")
			.style("top", 0);

		this._renderDimming();
		this._renderFrame();
		this._renderGrippers();
		this._renderHandles();
		this._renderMiddle();

		this._registerMouseEvents();
	},

	_renderDimming: function() {

		var element = this.svg
			.selectAll("path.dimming")
			.data([null]);

		element.enter()
			.append("path")
			.attr("fill", "white")
			.attr("fill-opacity", "0.7")
			.attr("fill-rule", "evenodd")
			.classed("dimming", true);

		var path = "";
		path += " M " + this.config.frameHandleThickness + " " + this.config.frameTopThickness;
		path += " h " + this.previewWidth;
		path += " v " + this.previewHeight;
		path += " h " + -this.previewWidth;
		path += " z ";
		path += " M " + Math.max(this.currentFrame[0], this.config.frameHandleThickness) + " " + this.config.frameTopThickness;
		path += " H " + Math.min(this.currentFrame[1] + this.config.frameHandleThickness * 2, this.previewWidth + this.config.frameHandleThickness);
		path += " v " + this.previewHeight;
		path += " H " + Math.max(this.currentFrame[0], this.config.frameHandleThickness);
		path += " z";

		element.attr("d", path);
	},

	_renderFrame: function() {

		var element = this.svg
			.selectAll("path.frame")
			.data([null]);

		element.enter()
			.append("path")
			.attr("stroke", "white")
			.attr("stroke-width", "1px")
			.attr("stroke-linejoin", "round")
			.attr("fill", this.config.frameColor)
			.attr("fill-opacity", this.config.frameOpacity)
			.attr("fill-rule", "evenodd")
			.classed("frame", true);

		var path = "";
		path += " M " + this.currentFrame[0] + " 0";
		path += " H " + (this.currentFrame[1] + (this.config.frameHandleThickness * 2));
		path += " V " + this.config.height;
		path += " H " + (this.currentFrame[0]);
		path += " z";
		path += " M " + (this.currentFrame[0] + this.config.frameHandleThickness) + " " + this.config.frameTopThickness;
		path += " H " + (this.currentFrame[1] + this.config.frameHandleThickness);
		path += " v " + this.previewHeight;
		path += " H " + (this.currentFrame[0] + this.config.frameHandleThickness);
		path += " z";

		element.attr("d", path);
	},

	_renderGrippers: function() {

		var gripper = this.svg.selectAll("path.gripper")
			.data([null]);

		gripper.enter()
			.append("path")
			.attr("stroke", this.config.gripperColor)
			.classed("gripper", true);

		var path = "";

		[0.4, 0.6].forEach(function(spacing) {
			path += " M " + Math.round((this.currentFrame[0] + (this.config.frameHandleThickness * spacing))) + " " + Math.round(this.config.height * 0.3);
			path += " V " + Math.round(this.config.height * 0.7);
			path += " M " + Math.round((this.currentFrame[1] + (this.config.frameHandleThickness * (1 + spacing)))) + " " + Math.round(this.config.height * 0.3);
			path += " V " + Math.round(this.config.height * 0.7);
		}.bind(this));

		gripper.attr("d", path);
	},

	_renderHandles: function() {

		var leftHandle = this.svg.selectAll("rect.left_handle")
			.data([null]);

		leftHandle.enter()
			.append("rect")
			.attr('width', this.config.frameHandleThickness)
			.style("cursor", "ew-resize")
			.style("fill-opacity", "0")
			.classed("left_handle", true);

		leftHandle
			.attr('x', this.currentFrame[0])
			.attr('height', this.config.height);

		var rightHandle = this.svg.selectAll("rect.right_handle")
			.data([null]);

		rightHandle.enter()
			.append("rect")
			.attr('width', this.config.frameHandleThickness)
			.style("cursor", "ew-resize")
			.style("fill-opacity", "0")
			.classed("right_handle", true);

		rightHandle
			.attr('x', this.currentFrame[1] + this.config.frameHandleThickness)
			.attr('height', this.config.height);
	},

	_renderMiddle: function() {

		var middleHandle = this.svg.selectAll("rect.middle_handle")
			.data([null]);

		middleHandle.enter()
			.append("rect")
			.style("cursor", "move")
			.style("fill-opacity", "0")
			.classed("middle_handle", true);

		middleHandle
			.attr('width', Math.max(0, this.currentFrame[1] - this.currentFrame[0]))
			.attr('x', this.currentFrame[0] + this.config.frameHandleThickness)
			.attr('height', this.config.height);
	},

	_registerMouseEvents: function() {

		var element = d3.select(this.element);

		var drag = {
			target: null,
			start: null,
			stop: null,
			left: false,
			right: false,
			rigid: false
		};

		var self = this;

		function onMousemove(datum, index) {

			drag.stop = self._getClientXFromEvent(d3.event, drag);
			var distanceTraveled = drag.stop - drag.start;
			var frameAfterDrag = self.frameBeforeDrag.slice(0);
			var minimumFrameWidth = self.config.minimumFrameWidth;

			if (drag.rigid) {
				minimumFrameWidth = self.frameBeforeDrag[1] - self.frameBeforeDrag[0];
			}
			if (drag.left) {
				frameAfterDrag[0] = Math.max(frameAfterDrag[0] + distanceTraveled, 0);
			}
			if (drag.right) {
				frameAfterDrag[1] = Math.min(frameAfterDrag[1] + distanceTraveled, self.previewWidth);
			}

			var currentFrameWidth = frameAfterDrag[1] - frameAfterDrag[0];

			if (currentFrameWidth <= minimumFrameWidth) {

				if (drag.left) {
					frameAfterDrag[0] = frameAfterDrag[1] - minimumFrameWidth;
				}
				if (drag.right) {
					frameAfterDrag[1] = frameAfterDrag[0] + minimumFrameWidth;
				}
				if (frameAfterDrag[0] <= 0) {
					frameAfterDrag[1] -= frameAfterDrag[0];
					frameAfterDrag[0] = 0;
				}
				if (frameAfterDrag[1] >= self.previewWidth) {
					frameAfterDrag[0] -= (frameAfterDrag[1] - self.previewWidth);
					frameAfterDrag[1] = self.previewWidth;
				}
			}

			self.graphs.forEach(function(graph) {

				var domainScale = d3.scale.linear()
					.interpolate(d3.interpolateNumber)
					.domain([0, self.previewWidth])
					.range(graph.dataDomain());

				var windowAfterDrag = [
					domainScale(frameAfterDrag[0]),
					domainScale(frameAfterDrag[1])
				];

				self.slideCallbacks.forEach(function(callback) {
					callback(graph, windowAfterDrag[0], windowAfterDrag[1]);
				});

				if (frameAfterDrag[0] === 0) {
					windowAfterDrag[0] = undefined;
				}
				if (frameAfterDrag[1] === self.previewWidth) {
					windowAfterDrag[1] = undefined;
				}
				graph.window.xMin = windowAfterDrag[0];
				graph.window.xMax = windowAfterDrag[1];

				graph.update();
			});
		}

		function onMousedown() {
			drag.target = d3.event.target;
			drag.start = self._getClientXFromEvent(d3.event, drag);
			self.frameBeforeDrag = self.currentFrame.slice();
			d3.event.preventDefault ? d3.event.preventDefault() : d3.event.returnValue = false;
			d3.select(document).on("mousemove.rickshaw_range_slider_preview", onMousemove);
			d3.select(document).on("mouseup.rickshaw_range_slider_preview", onMouseup);
			d3.select(document).on("touchmove.rickshaw_range_slider_preview", onMousemove);
			d3.select(document).on("touchend.rickshaw_range_slider_preview", onMouseup);
			d3.select(document).on("touchcancel.rickshaw_range_slider_preview", onMouseup);
		}

		function onMousedownLeftHandle(datum, index) {
			drag.left = true;
			onMousedown();
		}

		function onMousedownRightHandle(datum, index) {
			drag.right = true;
			onMousedown();
		}

		function onMousedownMiddleHandle(datum, index) {
			drag.left = true;
			drag.right = true;
			drag.rigid = true;
			onMousedown();
		}

		function onMouseup(datum, index) {
			d3.select(document).on("mousemove.rickshaw_range_slider_preview", null);
			d3.select(document).on("mouseup.rickshaw_range_slider_preview", null);
			d3.select(document).on("touchmove.rickshaw_range_slider_preview", null);
			d3.select(document).on("touchend.rickshaw_range_slider_preview", null);
			d3.select(document).on("touchcancel.rickshaw_range_slider_preview", null);
			delete self.frameBeforeDrag;
			drag.left = false;
			drag.right = false;
			drag.rigid = false;
		}

		element.select("rect.left_handle").on("mousedown", onMousedownLeftHandle);
		element.select("rect.right_handle").on("mousedown", onMousedownRightHandle);
		element.select("rect.middle_handle").on("mousedown", onMousedownMiddleHandle);
		element.select("rect.left_handle").on("touchstart", onMousedownLeftHandle);
		element.select("rect.right_handle").on("touchstart", onMousedownRightHandle);
		element.select("rect.middle_handle").on("touchstart", onMousedownMiddleHandle);
	},

	_getClientXFromEvent: function(event, drag) {

		switch (event.type) {
			case 'touchstart':
			case 'touchmove':
				var touchList = event.changedTouches;
				var touch = null;
				for (var touchIndex = 0; touchIndex < touchList.length; touchIndex++) {
					if (touchList[touchIndex].target === drag.target) {
						touch = touchList[touchIndex];
						break;
					}
				}
				return touch !== null ? touch.clientX : undefined;

			default:
				return event.clientX;
		}
	}
});

Rickshaw.namespace("Rickshaw.Graph.Renderer");

Rickshaw.Graph.Renderer = Rickshaw.Class.create( {

	initialize: function(args) {
		this.graph = args.graph;
		this.tension = args.tension || this.tension;
		this.configure(args);
	},

	seriesPathFactory: function() {
		//implement in subclass
	},

	seriesStrokeFactory: function() {
		// implement in subclass
	},

	defaults: function() {
		return {
			tension: 0.8,
			strokeWidth: 2,
			unstack: true,
			padding: { top: 0.01, right: 0, bottom: 0.01, left: 0 },
			stroke: false,
			fill: false,
			opacity: 1
		};
	},

	domain: function(data) {
		// Requires that at least one series contains some data
		var stackedData = data || this.graph.stackedData || this.graph.stackData();

		var xMin = +Infinity;
		var xMax = -Infinity;

		var yMin = +Infinity;
		var yMax = -Infinity;

		stackedData.forEach( function(series) {

			series.forEach( function(d) {

				if (d.y == null) return;

				var y = d.y + d.y0;

				if (y < yMin) yMin = y;
				if (y > yMax) yMax = y;
			} );

			if (!series.length) return;

			if (series[0].x < xMin) xMin = series[0].x;
			if (series[series.length - 1].x > xMax) xMax = series[series.length - 1].x;
		} );

		xMin -= (xMax - xMin) * this.padding.left;
		xMax += (xMax - xMin) * this.padding.right;

		yMin = this.graph.min === 'auto' ? yMin : this.graph.min || 0;
		yMax = this.graph.max === undefined ? yMax : this.graph.max;

		if (this.graph.min === 'auto' || yMin < 0) {
			yMin -= (yMax - yMin) * this.padding.bottom;
		}

		if (this.graph.max === undefined) {
			yMax += (yMax - yMin) * this.padding.top;
		}

		return { x: [xMin, xMax], y: [yMin, yMax] };
	},

	render: function(args) {

		args = args || {};

		var graph = this.graph;
		var series = args.series || graph.series;

		var vis = args.vis || graph.vis;
		vis.selectAll('*').remove();

		var data = series
			.filter(function(s) { return !s.disabled })
			.map(function(s) { return s.stack });

		var pathNodes = vis.selectAll("path.path")
			.data(data)
			.enter().append("svg:path")
			.classed('path', true)
			.attr("d", this.seriesPathFactory());

		if (this.stroke) {
                        var strokeNodes = vis.selectAll('path.stroke')
                                .data(data)
                                .enter().append("svg:path")
				.classed('stroke', true)
				.attr("d", this.seriesStrokeFactory());
		}

		var i = 0;
		series.forEach( function(series) {
			if (series.disabled) return;
			series.path = pathNodes[0][i];
			if (this.stroke) series.stroke = strokeNodes[0][i];
			this._styleSeries(series);
			i++;
		}, this );

	},

	_styleSeries: function(series) {

		var fill = this.fill ? series.color : 'none';
		var stroke = this.stroke ? series.color : 'none';
		var strokeWidth = series.strokeWidth ? series.strokeWidth : this.strokeWidth;
		var opacity = series.opacity ? series.opacity : this.opacity;

		series.path.setAttribute('fill', fill);
		series.path.setAttribute('stroke', stroke);
		series.path.setAttribute('stroke-width', strokeWidth);
		series.path.setAttribute('opacity', opacity);

		if (series.className) {
			d3.select(series.path).classed(series.className, true);
		}
		if (series.className && this.stroke) {
			d3.select(series.stroke).classed(series.className, true);
		}
	},

	configure: function(args) {

		args = args || {};

		Rickshaw.keys(this.defaults()).forEach( function(key) {

			if (!args.hasOwnProperty(key)) {
				this[key] = this[key] || this.graph[key] || this.defaults()[key];
				return;
			}

			if (typeof this.defaults()[key] == 'object') {

				Rickshaw.keys(this.defaults()[key]).forEach( function(k) {

					this[key][k] =
						args[key][k] !== undefined ? args[key][k] :
						this[key][k] !== undefined ? this[key][k] :
						this.defaults()[key][k];
				}, this );

			} else {
				this[key] =
					args[key] !== undefined ? args[key] :
					this[key] !== undefined ? this[key] :
					this.graph[key] !== undefined ? this.graph[key] :
					this.defaults()[key];
			}

		}, this );
	},

	setStrokeWidth: function(strokeWidth) {
		if (strokeWidth !== undefined) {
			this.strokeWidth = strokeWidth;
		}
	},

	setTension: function(tension) {
		if (tension !== undefined) {
			this.tension = tension;
		}
	}
} );

Rickshaw.namespace('Rickshaw.Graph.Renderer.Line');

Rickshaw.Graph.Renderer.Line = Rickshaw.Class.create( Rickshaw.Graph.Renderer, {

	name: 'line',

	defaults: function($super) {

		return Rickshaw.extend( $super(), {
			unstack: true,
			fill: false,
			stroke: true
		} );
	},

	seriesPathFactory: function() {

		var graph = this.graph;

		var factory = d3.svg.line()
			.x( function(d) { return graph.x(d.x) } )
			.y( function(d) { return graph.y(d.y) } )
			.interpolate(this.graph.interpolation).tension(this.tension);

		factory.defined && factory.defined( function(d) { return d.y !== null } );
		return factory;
	}
} );

Rickshaw.namespace('Rickshaw.Graph.Renderer.Stack');

Rickshaw.Graph.Renderer.Stack = Rickshaw.Class.create( Rickshaw.Graph.Renderer, {

	name: 'stack',

	defaults: function($super) {

		return Rickshaw.extend( $super(), {
			fill: true,
			stroke: false,
			unstack: false
		} );
	},

	seriesPathFactory: function() {

		var graph = this.graph;

		var factory = d3.svg.area()
			.x( function(d) { return graph.x(d.x) } )
			.y0( function(d) { return graph.y(d.y0) } )
			.y1( function(d) { return graph.y(d.y + d.y0) } )
			.interpolate(this.graph.interpolation).tension(this.tension);

		factory.defined && factory.defined( function(d) { return d.y !== null } );
		return factory;
	}
} );

Rickshaw.namespace('Rickshaw.Graph.Renderer.Bar');

Rickshaw.Graph.Renderer.Bar = Rickshaw.Class.create( Rickshaw.Graph.Renderer, {

	name: 'bar',

	defaults: function($super) {

		var defaults = Rickshaw.extend( $super(), {
			gapSize: 0.05,
			unstack: false,
			opacity: 1.0
		} );

		delete defaults.tension;
		return defaults;
	},

	initialize: function($super, args) {
		args = args || {};
		this.gapSize = args.gapSize || this.gapSize;
		$super(args);
	},

	domain: function($super) {

		var domain = $super();

		var frequentInterval = this._frequentInterval(this.graph.stackedData.slice(-1).shift());
		domain.x[1] += Number(frequentInterval.magnitude);

		return domain;
	},

	barWidth: function(series) {

		var frequentInterval = this._frequentInterval(series.stack);
		var barWidth = this.graph.x.magnitude(frequentInterval.magnitude) * (1 - this.gapSize);

		return barWidth;
	},

	render: function(args) {

		args = args || {};

		var graph = this.graph;
		var series = args.series || graph.series;

		var vis = args.vis || graph.vis;
		vis.selectAll('*').remove();

		var barWidth = this.barWidth(series.active()[0]);
		var barXOffset = 0;

		var activeSeriesCount = series.filter( function(s) { return !s.disabled; } ).length;
		var seriesBarWidth = this.unstack ? barWidth / activeSeriesCount : barWidth;

		var transform = function(d) {
			// add a matrix transform for negative values
			var matrix = [ 1, 0, 0, (d.y < 0 ? -1 : 1), 0, (d.y < 0 ? graph.y.magnitude(Math.abs(d.y)) * 2 : 0) ];
			return "matrix(" + matrix.join(',') + ")";
		};

		series.forEach( function(series) {

			if (series.disabled) return;

			var barWidth = this.barWidth(series);

			var nodes = vis.selectAll("path")
				.data(series.stack.filter( function(d) { return d.y !== null } ))
				.enter().append("svg:rect")
				.attr("x", function(d) { return graph.x(d.x) + barXOffset })
				.attr("y", function(d) { return (graph.y(d.y0 + Math.abs(d.y))) * (d.y < 0 ? -1 : 1 ) })
				.attr("width", seriesBarWidth)
				.attr("height", function(d) { return graph.y.magnitude(Math.abs(d.y)) })
				.attr("opacity", series.opacity)
				.attr("transform", transform);

			Array.prototype.forEach.call(nodes[0], function(n) {
				n.setAttribute('fill', series.color);
			} );

			if (this.unstack) barXOffset += seriesBarWidth;

		}, this );
	},

	_frequentInterval: function(data) {

		var intervalCounts = {};

		for (var i = 0; i < data.length - 1; i++) {
			var interval = data[i + 1].x - data[i].x;
			intervalCounts[interval] = intervalCounts[interval] || 0;
			intervalCounts[interval]++;
		}

		var frequentInterval = { count: 0, magnitude: 1 };

		Rickshaw.keys(intervalCounts).forEach( function(i) {
			if (frequentInterval.count < intervalCounts[i]) {
				frequentInterval = {
					count: intervalCounts[i],
					magnitude: i
				};
			}
		} );

		return frequentInterval;
	}
} );

Rickshaw.namespace('Rickshaw.Graph.Renderer.Area');

Rickshaw.Graph.Renderer.Area = Rickshaw.Class.create( Rickshaw.Graph.Renderer, {

	name: 'area',

	defaults: function($super) {

		return Rickshaw.extend( $super(), {
			unstack: false,
			fill: false,
			stroke: false
		} );
	},

	seriesPathFactory: function() {

		var graph = this.graph;

		var factory = d3.svg.area()
			.x( function(d) { return graph.x(d.x) } )
			.y0( function(d) { return graph.y(d.y0) } )
			.y1( function(d) { return graph.y(d.y + d.y0) } )
			.interpolate(graph.interpolation).tension(this.tension);

		factory.defined && factory.defined( function(d) { return d.y !== null } );
		return factory;
	},

	seriesStrokeFactory: function() {

		var graph = this.graph;

		var factory = d3.svg.line()
			.x( function(d) { return graph.x(d.x) } )
			.y( function(d) { return graph.y(d.y + d.y0) } )
			.interpolate(graph.interpolation).tension(this.tension);

		factory.defined && factory.defined( function(d) { return d.y !== null } );
		return factory;
	},

	render: function(args) {

		args = args || {};

		var graph = this.graph;
		var series = args.series || graph.series;

		var vis = args.vis || graph.vis;
		vis.selectAll('*').remove();

		// insert or stacked areas so strokes lay on top of areas
		var method = this.unstack ? 'append' : 'insert';

		var data = series
			.filter(function(s) { return !s.disabled })
			.map(function(s) { return s.stack });

		var nodes = vis.selectAll("path")
			.data(data)
			.enter()[method]("svg:g", 'g');

		nodes.append("svg:path")
			.attr("d", this.seriesPathFactory())
			.attr("class", 'area');

		if (this.stroke) {
			nodes.append("svg:path")
				.attr("d", this.seriesStrokeFactory())
				.attr("class", 'line');
		}

		var i = 0;
		series.forEach( function(series) {
			if (series.disabled) return;
			series.path = nodes[0][i++];
			this._styleSeries(series);
		}, this );
	},

	_styleSeries: function(series) {

		if (!series.path) return;

		d3.select(series.path).select('.area')
			.attr('fill', series.color);

		if (this.stroke) {
			d3.select(series.path).select('.line')
				.attr('fill', 'none')
				.attr('stroke', series.stroke || d3.interpolateRgb(series.color, 'black')(0.125))
				.attr('stroke-width', this.strokeWidth);
		}

		if (series.className) {
			series.path.setAttribute('class', series.className);
		}
	}
} );

Rickshaw.namespace('Rickshaw.Graph.Renderer.ScatterPlot');

Rickshaw.Graph.Renderer.ScatterPlot = Rickshaw.Class.create( Rickshaw.Graph.Renderer, {

	name: 'scatterplot',

	defaults: function($super) {

		return Rickshaw.extend( $super(), {
			unstack: true,
			fill: true,
			stroke: false,
			padding:{ top: 0.01, right: 0.01, bottom: 0.01, left: 0.01 },
			dotSize: 4
		} );
	},

	initialize: function($super, args) {
		$super(args);
	},

	render: function(args) {

		args = args || {};

		var graph = this.graph;

		var series = args.series || graph.series;
		var vis = args.vis || graph.vis;

		var dotSize = this.dotSize;

		vis.selectAll('*').remove();

		series.forEach( function(series) {

			if (series.disabled) return;
			var opacity = series.opacity ? series.opacity : 1;

			var nodes = vis.selectAll("path")
				.data(series.stack.filter( function(d) { return d.y !== null } ))
				.enter().append("svg:circle")
					.attr("cx", function(d) { return graph.x(d.x) })
					.attr("cy", function(d) { return graph.y(d.y) })
					.attr("r", function(d) { return ("r" in d) ? d.r : dotSize})
					.attr("opacity", function(d) { return ("opacity" in d) ? d.opacity : opacity});
			if (series.className) {
				nodes.classed(series.className, true);
			}
			
			Array.prototype.forEach.call(nodes[0], function(n) {
				n.setAttribute('fill', series.color);
			} );

		}, this );
	}
} );
Rickshaw.namespace('Rickshaw.Graph.Renderer.Multi');

Rickshaw.Graph.Renderer.Multi = Rickshaw.Class.create( Rickshaw.Graph.Renderer, {

	name: 'multi',

	initialize: function($super, args) {

		$super(args);
	},

	defaults: function($super) {

		return Rickshaw.extend( $super(), {
			unstack: true,
			fill: false,
			stroke: true 
		} );
	},

	configure: function($super, args) {

		args = args || {};
		this.config = args;
		$super(args);
	},

	domain: function($super) {

		this.graph.stackData();

		var domains = [];

		var groups = this._groups();
		this._stack(groups);

		groups.forEach( function(group) {

			var data = group.series
				.filter( function(s) { return !s.disabled } )
				.map( function(s) { return s.stack });

			if (!data.length) return;
			
			var domain = null;
			if (group.renderer && group.renderer.domain) {
				domain = group.renderer.domain(data);
			}
			else {
				domain = $super(data);
			}
			domains.push(domain);
		});

		var xMin = d3.min(domains.map( function(d) { return d.x[0] } ));
		var xMax = d3.max(domains.map( function(d) { return d.x[1] } ));
		var yMin = d3.min(domains.map( function(d) { return d.y[0] } ));
		var yMax = d3.max(domains.map( function(d) { return d.y[1] } ));

		return { x: [xMin, xMax], y: [yMin, yMax] };
	},

	_groups: function() {

		var graph = this.graph;

		var renderGroups = {};

		graph.series.forEach( function(series) {

			if (series.disabled) return;

			if (!renderGroups[series.renderer]) {

				var ns = "http://www.w3.org/2000/svg";
				var vis = document.createElementNS(ns, 'g');

				graph.vis[0][0].appendChild(vis);

				var renderer = graph._renderers[series.renderer];

				var config = {};

				var defaults = [ this.defaults(), renderer.defaults(), this.config, this.graph ];
				defaults.forEach(function(d) { Rickshaw.extend(config, d) });

				renderer.configure(config);

				renderGroups[series.renderer] = {
					renderer: renderer,
					series: [],
					vis: d3.select(vis)
				};
			}
				
			renderGroups[series.renderer].series.push(series);

		}, this);

		var groups = [];

		Object.keys(renderGroups).forEach( function(key) {
			var group = renderGroups[key];
			groups.push(group);
		});

		return groups;
	},

	_stack: function(groups) {

		groups.forEach( function(group) {

			var series = group.series
				.filter( function(series) { return !series.disabled } );

			var data = series
				.map( function(series) { return series.stack } );

			if (!group.renderer.unstack) {

				var layout = d3.layout.stack();
				var stackedData = Rickshaw.clone(layout(data));

				series.forEach( function(series, index) {
					series._stack = Rickshaw.clone(stackedData[index]);
				});
			}

		}, this );

		return groups;

	},

	render: function() {

		this.graph.series.forEach( function(series) {
			if (!series.renderer) {
				throw new Error("Each series needs a renderer for graph 'multi' renderer");
			}
		});

		this.graph.vis.selectAll('*').remove();

		var groups = this._groups();
		groups = this._stack(groups);

		groups.forEach( function(group) {

			var series = group.series
				.filter( function(series) { return !series.disabled } );

			series.active = function() { return series };

			group.renderer.render({ series: series, vis: group.vis });
			series.forEach(function(s) { s.stack = s._stack || s.stack || s.data; });
		});
	}

} );
Rickshaw.namespace('Rickshaw.Graph.Renderer.LinePlot');

Rickshaw.Graph.Renderer.LinePlot = Rickshaw.Class.create( Rickshaw.Graph.Renderer, {

	name: 'lineplot',

	defaults: function($super) {

		return Rickshaw.extend( $super(), {
			unstack: true,
			fill: false,
			stroke: true,
			padding:{ top: 0.01, right: 0.01, bottom: 0.01, left: 0.01 },
			dotSize: 3,
			strokeWidth: 2
		} );
	},

	seriesPathFactory: function() {

		var graph = this.graph;

		var factory = d3.svg.line()
			.x( function(d) { return graph.x(d.x) } )
			.y( function(d) { return graph.y(d.y) } )
			.interpolate(this.graph.interpolation).tension(this.tension);

		factory.defined && factory.defined( function(d) { return d.y !== null } );
		return factory;
	},

	render: function(args) {

		args = args || {};

		var graph = this.graph;

		var series = args.series || graph.series;
		var vis = args.vis || graph.vis;

		var dotSize = this.dotSize;

		vis.selectAll('*').remove();

		var data = series
			.filter(function(s) { return !s.disabled })
			.map(function(s) { return s.stack });

		var nodes = vis.selectAll("path")
			.data(data)
			.enter().append("svg:path")
			.attr("d", this.seriesPathFactory());

		var i = 0;
		series.forEach(function(series) {
			if (series.disabled) return;
			series.path = nodes[0][i++];
			this._styleSeries(series);
		}, this);

		series.forEach(function(series) {

			if (series.disabled) return;

			var nodes = vis.selectAll("x")
				.data(series.stack.filter( function(d) { return d.y !== null } ))
				.enter().append("svg:circle")
				.attr("cx", function(d) { return graph.x(d.x) })
				.attr("cy", function(d) { return graph.y(d.y) })
				.attr("r", function(d) { return ("r" in d) ? d.r : dotSize});

			Array.prototype.forEach.call(nodes[0], function(n) {
				if (!n) return;
				n.setAttribute('data-color', series.color);
				n.setAttribute('fill', 'white');
				n.setAttribute('stroke', series.color);
				n.setAttribute('stroke-width', this.strokeWidth);

			}.bind(this));

		}, this);
	}
} );

Rickshaw.namespace('Rickshaw.Graph.Smoother');

Rickshaw.Graph.Smoother = Rickshaw.Class.create({

	initialize: function(args) {

		this.graph = args.graph;
		this.element = args.element;
		this.aggregationScale = 1;

		this.build();

		this.graph.stackData.hooks.data.push( {
			name: 'smoother',
			orderPosition: 50,
			f: this.transformer.bind(this)
		} );
	},

	build: function() {

		var self = this;
		var $ = jQuery;

		if (this.element) {
			$( function() {
				$(self.element).slider( {
					min: 1,
					max: 100,
					slide: function( event, ui ) {
						self.setScale(ui.value);
					}
				} );
			} );
		}
	},

	setScale: function(scale) {

		if (scale < 1) {
			throw "scale out of range: " + scale;
		}

		this.aggregationScale = scale;
		this.graph.update();
	},

	transformer: function(data) {

		if (this.aggregationScale == 1) return data;

		var aggregatedData = [];

		data.forEach( function(seriesData) {

			var aggregatedSeriesData = [];

			while (seriesData.length) {

				var avgX = 0, avgY = 0;
				var slice = seriesData.splice(0, this.aggregationScale);

				slice.forEach( function(d) {
					avgX += d.x / slice.length;
					avgY += d.y / slice.length;
				} );

				aggregatedSeriesData.push( { x: avgX, y: avgY } );
			}

			aggregatedData.push(aggregatedSeriesData);

		}.bind(this) );

		return aggregatedData;
	}
});

Rickshaw.namespace('Rickshaw.Graph.Socketio');

Rickshaw.Graph.Socketio = Rickshaw.Class.create( Rickshaw.Graph.Ajax, {
	request: function() {
		var socket = io.connect(this.dataURL);
		var self = this;
		socket.on('rickshaw', function (data) {
			self.success(data);
		});
	}
} );
Rickshaw.namespace('Rickshaw.Series');

Rickshaw.Series = Rickshaw.Class.create( Array, {

	initialize: function (data, palette, options) {

		options = options || {};

		this.palette = new Rickshaw.Color.Palette(palette);

		this.timeBase = typeof(options.timeBase) === 'undefined' ? 
			Math.floor(new Date().getTime() / 1000) : 
			options.timeBase;

		var timeInterval = typeof(options.timeInterval) == 'undefined' ?
			1000 :
			options.timeInterval;

		this.setTimeInterval(timeInterval);

		if (data && (typeof(data) == "object") && Array.isArray(data)) {
			data.forEach( function(item) { this.addItem(item) }, this );
		}
	},

	addItem: function(item) {

		if (typeof(item.name) === 'undefined') {
			throw('addItem() needs a name');
		}

		item.color = (item.color || this.palette.color(item.name));
		item.data = (item.data || []);

		// backfill, if necessary
		if ((item.data.length === 0) && this.length && (this.getIndex() > 0)) {
			this[0].data.forEach( function(plot) {
				item.data.push({ x: plot.x, y: 0 });
			} );
		} else if (item.data.length === 0) {
			item.data.push({ x: this.timeBase - (this.timeInterval || 0), y: 0 });
		} 

		this.push(item);

		if (this.legend) {
			this.legend.addLine(this.itemByName(item.name));
		}
	},

	addData: function(data, x) {

		var index = this.getIndex();

		Rickshaw.keys(data).forEach( function(name) {
			if (! this.itemByName(name)) {
				this.addItem({ name: name });
			}
		}, this );

		this.forEach( function(item) {
			item.data.push({ 
				x: x || (index * this.timeInterval || 1) + this.timeBase, 
				y: (data[item.name] || 0) 
			});
		}, this );
	},

	getIndex: function () {
		return (this[0] && this[0].data && this[0].data.length) ? this[0].data.length : 0;
	},

	itemByName: function(name) {

		for (var i = 0; i < this.length; i++) {
			if (this[i].name == name)
				return this[i];
		}
	},

	setTimeInterval: function(iv) {
		this.timeInterval = iv / 1000;
	},

	setTimeBase: function (t) {
		this.timeBase = t;
	},

	dump: function() {

		var data = {
			timeBase: this.timeBase,
			timeInterval: this.timeInterval,
			items: []
		};

		this.forEach( function(item) {

			var newItem = {
				color: item.color,
				name: item.name,
				data: []
			};

			item.data.forEach( function(plot) {
				newItem.data.push({ x: plot.x, y: plot.y });
			} );

			data.items.push(newItem);
		} );

		return data;
	},

	load: function(data) {

		if (data.timeInterval) {
			this.timeInterval = data.timeInterval;
		}

		if (data.timeBase) {
			this.timeBase = data.timeBase;
		}

		if (data.items) {
			data.items.forEach( function(item) {
				this.push(item);
				if (this.legend) {
					this.legend.addLine(this.itemByName(item.name));
				}

			}, this );
		}
	}
} );

Rickshaw.Series.zeroFill = function(series) {
	Rickshaw.Series.fill(series, 0);
};

Rickshaw.Series.fill = function(series, fill) {

	var x;
	var i = 0;

	var data = series.map( function(s) { return s.data } );

	while ( i < Math.max.apply(null, data.map( function(d) { return d.length } )) ) {

		x = Math.min.apply( null, 
			data
				.filter(function(d) { return d[i] })
				.map(function(d) { return d[i].x })
		);

		data.forEach( function(d) {
			if (!d[i] || d[i].x != x) {
				d.splice(i, 0, { x: x, y: fill });
			}
		} );

		i++;
	}
};

Rickshaw.namespace('Rickshaw.Series.FixedDuration');

Rickshaw.Series.FixedDuration = Rickshaw.Class.create(Rickshaw.Series, {

	initialize: function (data, palette, options) {

		options = options || {};

		if (typeof(options.timeInterval) === 'undefined') {
			throw new Error('FixedDuration series requires timeInterval');
		}

		if (typeof(options.maxDataPoints) === 'undefined') {
			throw new Error('FixedDuration series requires maxDataPoints');
		}

		this.palette = new Rickshaw.Color.Palette(palette);
		this.timeBase = typeof(options.timeBase) === 'undefined' ? Math.floor(new Date().getTime() / 1000) : options.timeBase;
		this.setTimeInterval(options.timeInterval);

		if (this[0] && this[0].data && this[0].data.length) {
			this.currentSize = this[0].data.length;
			this.currentIndex = this[0].data.length;
		} else {
			this.currentSize  = 0;
			this.currentIndex = 0;
		}

		this.maxDataPoints = options.maxDataPoints;


		if (data && (typeof(data) == "object") && Array.isArray(data)) {
			data.forEach( function (item) { this.addItem(item) }, this );
			this.currentSize  += 1;
			this.currentIndex += 1;
		}

		// reset timeBase for zero-filled values if needed
		this.timeBase -= (this.maxDataPoints - this.currentSize) * this.timeInterval;

		// zero-fill up to maxDataPoints size if we don't have that much data yet
		if ((typeof(this.maxDataPoints) !== 'undefined') && (this.currentSize < this.maxDataPoints)) {
			for (var i = this.maxDataPoints - this.currentSize - 1; i > 1; i--) {
				this.currentSize  += 1;
				this.currentIndex += 1;
				this.forEach( function (item) {
					item.data.unshift({ x: ((i-1) * this.timeInterval || 1) + this.timeBase, y: 0, i: i });
				}, this );
			}
		}
	},

	addData: function($super, data, x) {

		$super(data, x);

		this.currentSize += 1;
		this.currentIndex += 1;

		if (this.maxDataPoints !== undefined) {
			while (this.currentSize > this.maxDataPoints) {
				this.dropData();
			}
		}
	},

	dropData: function() {

		this.forEach(function(item) {
			item.data.splice(0, 1);
		} );

		this.currentSize -= 1;
	},

	getIndex: function () {
		return this.currentIndex;
	}
} );

	return Rickshaw;
}));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js"), __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ },

/***/ "./node_modules/skycons/skycons.js":
/***/ function(module, exports) {

(function(global) {
  "use strict";

  /* Set up a RequestAnimationFrame shim so we can animate efficiently FOR
   * GREAT JUSTICE. */
  var requestInterval, cancelInterval;

  (function() {
    var raf = global.requestAnimationFrame       ||
              global.webkitRequestAnimationFrame ||
              global.mozRequestAnimationFrame    ||
              global.oRequestAnimationFrame      ||
              global.msRequestAnimationFrame     ,
        caf = global.cancelAnimationFrame        ||
              global.webkitCancelAnimationFrame  ||
              global.mozCancelAnimationFrame     ||
              global.oCancelAnimationFrame       ||
              global.msCancelAnimationFrame      ;

    if(raf && caf) {
      requestInterval = function(fn, delay) {
        var handle = {value: null};

        function loop() {
          handle.value = raf(loop);
          fn();
        }

        loop();
        return handle;
      };

      cancelInterval = function(handle) {
        caf(handle.value);
      };
    }

    else {
      requestInterval = setInterval;
      cancelInterval = clearInterval;
    }
  }());

  /* Catmull-rom spline stuffs. */
  /*
  function upsample(n, spline) {
    var polyline = [],
        len = spline.length,
        bx  = spline[0],
        by  = spline[1],
        cx  = spline[2],
        cy  = spline[3],
        dx  = spline[4],
        dy  = spline[5],
        i, j, ax, ay, px, qx, rx, sx, py, qy, ry, sy, t;

    for(i = 6; i !== spline.length; i += 2) {
      ax = bx;
      bx = cx;
      cx = dx;
      dx = spline[i    ];
      px = -0.5 * ax + 1.5 * bx - 1.5 * cx + 0.5 * dx;
      qx =        ax - 2.5 * bx + 2.0 * cx - 0.5 * dx;
      rx = -0.5 * ax            + 0.5 * cx           ;
      sx =                   bx                      ;

      ay = by;
      by = cy;
      cy = dy;
      dy = spline[i + 1];
      py = -0.5 * ay + 1.5 * by - 1.5 * cy + 0.5 * dy;
      qy =        ay - 2.5 * by + 2.0 * cy - 0.5 * dy;
      ry = -0.5 * ay            + 0.5 * cy           ;
      sy =                   by                      ;

      for(j = 0; j !== n; ++j) {
        t = j / n;

        polyline.push(
          ((px * t + qx) * t + rx) * t + sx,
          ((py * t + qy) * t + ry) * t + sy
        );
      }
    }

    polyline.push(
      px + qx + rx + sx,
      py + qy + ry + sy
    );

    return polyline;
  }

  function downsample(n, polyline) {
    var len = 0,
        i, dx, dy;

    for(i = 2; i !== polyline.length; i += 2) {
      dx = polyline[i    ] - polyline[i - 2];
      dy = polyline[i + 1] - polyline[i - 1];
      len += Math.sqrt(dx * dx + dy * dy);
    }

    len /= n;

    var small = [],
        target = len,
        min = 0,
        max, t;

    small.push(polyline[0], polyline[1]);

    for(i = 2; i !== polyline.length; i += 2) {
      dx = polyline[i    ] - polyline[i - 2];
      dy = polyline[i + 1] - polyline[i - 1];
      max = min + Math.sqrt(dx * dx + dy * dy);

      if(max > target) {
        t = (target - min) / (max - min);

        small.push(
          polyline[i - 2] + dx * t,
          polyline[i - 1] + dy * t
        );

        target += len;
      }

      min = max;
    }

    small.push(polyline[polyline.length - 2], polyline[polyline.length - 1]);

    return small;
  }
  */

  /* Define skycon things. */
  /* FIXME: I'm *really really* sorry that this code is so gross. Really, I am.
   * I'll try to clean it up eventually! Promise! */
  var KEYFRAME = 500,
      STROKE = 0.08,
      TAU = 2.0 * Math.PI,
      TWO_OVER_SQRT_2 = 2.0 / Math.sqrt(2);

  function circle(ctx, x, y, r) {
    ctx.beginPath();
    ctx.arc(x, y, r, 0, TAU, false);
    ctx.fill();
  }

  function line(ctx, ax, ay, bx, by) {
    ctx.beginPath();
    ctx.moveTo(ax, ay);
    ctx.lineTo(bx, by);
    ctx.stroke();
  }

  function puff(ctx, t, cx, cy, rx, ry, rmin, rmax) {
    var c = Math.cos(t * TAU),
        s = Math.sin(t * TAU);

    rmax -= rmin;

    circle(
      ctx,
      cx - s * rx,
      cy + c * ry + rmax * 0.5,
      rmin + (1 - c * 0.5) * rmax
    );
  }

  function puffs(ctx, t, cx, cy, rx, ry, rmin, rmax) {
    var i;

    for(i = 5; i--; )
      puff(ctx, t + i / 5, cx, cy, rx, ry, rmin, rmax);
  }

  function cloud(ctx, t, cx, cy, cw, s, color) {
    t /= 30000;

    var a = cw * 0.21,
        b = cw * 0.12,
        c = cw * 0.24,
        d = cw * 0.28;

    ctx.fillStyle = color;
    puffs(ctx, t, cx, cy, a, b, c, d);

    ctx.globalCompositeOperation = 'destination-out';
    puffs(ctx, t, cx, cy, a, b, c - s, d - s);
    ctx.globalCompositeOperation = 'source-over';
  }

  function sun(ctx, t, cx, cy, cw, s, color) {
    t /= 120000;

    var a = cw * 0.25 - s * 0.5,
        b = cw * 0.32 + s * 0.5,
        c = cw * 0.50 - s * 0.5,
        i, p, cos, sin;

    ctx.strokeStyle = color;
    ctx.lineWidth = s;
    ctx.lineCap = "round";
    ctx.lineJoin = "round";

    ctx.beginPath();
    ctx.arc(cx, cy, a, 0, TAU, false);
    ctx.stroke();

    for(i = 8; i--; ) {
      p = (t + i / 8) * TAU;
      cos = Math.cos(p);
      sin = Math.sin(p);
      line(ctx, cx + cos * b, cy + sin * b, cx + cos * c, cy + sin * c);
    }
  }

  function moon(ctx, t, cx, cy, cw, s, color) {
    t /= 15000;

    var a = cw * 0.29 - s * 0.5,
        b = cw * 0.05,
        c = Math.cos(t * TAU),
        p = c * TAU / -16;

    ctx.strokeStyle = color;
    ctx.lineWidth = s;
    ctx.lineCap = "round";
    ctx.lineJoin = "round";

    cx += c * b;

    ctx.beginPath();
    ctx.arc(cx, cy, a, p + TAU / 8, p + TAU * 7 / 8, false);
    ctx.arc(cx + Math.cos(p) * a * TWO_OVER_SQRT_2, cy + Math.sin(p) * a * TWO_OVER_SQRT_2, a, p + TAU * 5 / 8, p + TAU * 3 / 8, true);
    ctx.closePath();
    ctx.stroke();
  }

  function rain(ctx, t, cx, cy, cw, s, color) {
    t /= 1350;

    var a = cw * 0.16,
        b = TAU * 11 / 12,
        c = TAU *  7 / 12,
        i, p, x, y;

    ctx.fillStyle = color;

    for(i = 4; i--; ) {
      p = (t + i / 4) % 1;
      x = cx + ((i - 1.5) / 1.5) * (i === 1 || i === 2 ? -1 : 1) * a;
      y = cy + p * p * cw;
      ctx.beginPath();
      ctx.moveTo(x, y - s * 1.5);
      ctx.arc(x, y, s * 0.75, b, c, false);
      ctx.fill();
    }
  }

  function sleet(ctx, t, cx, cy, cw, s, color) {
    t /= 750;

    var a = cw * 0.1875,
        b = TAU * 11 / 12,
        c = TAU *  7 / 12,
        i, p, x, y;

    ctx.strokeStyle = color;
    ctx.lineWidth = s * 0.5;
    ctx.lineCap = "round";
    ctx.lineJoin = "round";

    for(i = 4; i--; ) {
      p = (t + i / 4) % 1;
      x = Math.floor(cx + ((i - 1.5) / 1.5) * (i === 1 || i === 2 ? -1 : 1) * a) + 0.5;
      y = cy + p * cw;
      line(ctx, x, y - s * 1.5, x, y + s * 1.5);
    }
  }

  function snow(ctx, t, cx, cy, cw, s, color) {
    t /= 3000;

    var a  = cw * 0.16,
        b  = s * 0.75,
        u  = t * TAU * 0.7,
        ux = Math.cos(u) * b,
        uy = Math.sin(u) * b,
        v  = u + TAU / 3,
        vx = Math.cos(v) * b,
        vy = Math.sin(v) * b,
        w  = u + TAU * 2 / 3,
        wx = Math.cos(w) * b,
        wy = Math.sin(w) * b,
        i, p, x, y;

    ctx.strokeStyle = color;
    ctx.lineWidth = s * 0.5;
    ctx.lineCap = "round";
    ctx.lineJoin = "round";

    for(i = 4; i--; ) {
      p = (t + i / 4) % 1;
      x = cx + Math.sin((p + i / 4) * TAU) * a;
      y = cy + p * cw;

      line(ctx, x - ux, y - uy, x + ux, y + uy);
      line(ctx, x - vx, y - vy, x + vx, y + vy);
      line(ctx, x - wx, y - wy, x + wx, y + wy);
    }
  }

  function fogbank(ctx, t, cx, cy, cw, s, color) {
    t /= 30000;

    var a = cw * 0.21,
        b = cw * 0.06,
        c = cw * 0.21,
        d = cw * 0.28;

    ctx.fillStyle = color;
    puffs(ctx, t, cx, cy, a, b, c, d);

    ctx.globalCompositeOperation = 'destination-out';
    puffs(ctx, t, cx, cy, a, b, c - s, d - s);
    ctx.globalCompositeOperation = 'source-over';
  }

  /*
  var WIND_PATHS = [
        downsample(63, upsample(8, [
          -1.00, -0.28,
          -0.75, -0.18,
          -0.50,  0.12,
          -0.20,  0.12,
          -0.04, -0.04,
          -0.07, -0.18,
          -0.19, -0.18,
          -0.23, -0.05,
          -0.12,  0.11,
           0.02,  0.16,
           0.20,  0.15,
           0.50,  0.07,
           0.75,  0.18,
           1.00,  0.28
        ])),
        downsample(31, upsample(16, [
          -1.00, -0.10,
          -0.75,  0.00,
          -0.50,  0.10,
          -0.25,  0.14,
           0.00,  0.10,
           0.25,  0.00,
           0.50, -0.10,
           0.75, -0.14,
           1.00, -0.10
        ]))
      ];
  */

  var WIND_PATHS = [
        [
          -0.7500, -0.1800, -0.7219, -0.1527, -0.6971, -0.1225,
          -0.6739, -0.0910, -0.6516, -0.0588, -0.6298, -0.0262,
          -0.6083,  0.0065, -0.5868,  0.0396, -0.5643,  0.0731,
          -0.5372,  0.1041, -0.5033,  0.1259, -0.4662,  0.1406,
          -0.4275,  0.1493, -0.3881,  0.1530, -0.3487,  0.1526,
          -0.3095,  0.1488, -0.2708,  0.1421, -0.2319,  0.1342,
          -0.1943,  0.1217, -0.1600,  0.1025, -0.1290,  0.0785,
          -0.1012,  0.0509, -0.0764,  0.0206, -0.0547, -0.0120,
          -0.0378, -0.0472, -0.0324, -0.0857, -0.0389, -0.1241,
          -0.0546, -0.1599, -0.0814, -0.1876, -0.1193, -0.1964,
          -0.1582, -0.1935, -0.1931, -0.1769, -0.2157, -0.1453,
          -0.2290, -0.1085, -0.2327, -0.0697, -0.2240, -0.0317,
          -0.2064,  0.0033, -0.1853,  0.0362, -0.1613,  0.0672,
          -0.1350,  0.0961, -0.1051,  0.1213, -0.0706,  0.1397,
          -0.0332,  0.1512,  0.0053,  0.1580,  0.0442,  0.1624,
           0.0833,  0.1636,  0.1224,  0.1615,  0.1613,  0.1565,
           0.1999,  0.1500,  0.2378,  0.1402,  0.2749,  0.1279,
           0.3118,  0.1147,  0.3487,  0.1015,  0.3858,  0.0892,
           0.4236,  0.0787,  0.4621,  0.0715,  0.5012,  0.0702,
           0.5398,  0.0766,  0.5768,  0.0890,  0.6123,  0.1055,
           0.6466,  0.1244,  0.6805,  0.1440,  0.7147,  0.1630,
           0.7500,  0.1800
        ],
        [
          -0.7500,  0.0000, -0.7033,  0.0195, -0.6569,  0.0399,
          -0.6104,  0.0600, -0.5634,  0.0789, -0.5155,  0.0954,
          -0.4667,  0.1089, -0.4174,  0.1206, -0.3676,  0.1299,
          -0.3174,  0.1365, -0.2669,  0.1398, -0.2162,  0.1391,
          -0.1658,  0.1347, -0.1157,  0.1271, -0.0661,  0.1169,
          -0.0170,  0.1046,  0.0316,  0.0903,  0.0791,  0.0728,
           0.1259,  0.0534,  0.1723,  0.0331,  0.2188,  0.0129,
           0.2656, -0.0064,  0.3122, -0.0263,  0.3586, -0.0466,
           0.4052, -0.0665,  0.4525, -0.0847,  0.5007, -0.1002,
           0.5497, -0.1130,  0.5991, -0.1240,  0.6491, -0.1325,
           0.6994, -0.1380,  0.7500, -0.1400
        ]
      ],
      WIND_OFFSETS = [
        {start: 0.36, end: 0.11},
        {start: 0.56, end: 0.16}
      ];

  function leaf(ctx, t, x, y, cw, s, color) {
    var a = cw / 8,
        b = a / 3,
        c = 2 * b,
        d = (t % 1) * TAU,
        e = Math.cos(d),
        f = Math.sin(d);

    ctx.fillStyle = color;
    ctx.strokeStyle = color;
    ctx.lineWidth = s;
    ctx.lineCap = "round";
    ctx.lineJoin = "round";

    ctx.beginPath();
    ctx.arc(x        , y        , a, d          , d + Math.PI, false);
    ctx.arc(x - b * e, y - b * f, c, d + Math.PI, d          , false);
    ctx.arc(x + c * e, y + c * f, b, d + Math.PI, d          , true );
    ctx.globalCompositeOperation = 'destination-out';
    ctx.fill();
    ctx.globalCompositeOperation = 'source-over';
    ctx.stroke();
  }

  function swoosh(ctx, t, cx, cy, cw, s, index, total, color) {
    t /= 2500;

    var path = WIND_PATHS[index],
        a = (t + index - WIND_OFFSETS[index].start) % total,
        c = (t + index - WIND_OFFSETS[index].end  ) % total,
        e = (t + index                            ) % total,
        b, d, f, i;

    ctx.strokeStyle = color;
    ctx.lineWidth = s;
    ctx.lineCap = "round";
    ctx.lineJoin = "round";

    if(a < 1) {
      ctx.beginPath();

      a *= path.length / 2 - 1;
      b  = Math.floor(a);
      a -= b;
      b *= 2;
      b += 2;

      ctx.moveTo(
        cx + (path[b - 2] * (1 - a) + path[b    ] * a) * cw,
        cy + (path[b - 1] * (1 - a) + path[b + 1] * a) * cw
      );

      if(c < 1) {
        c *= path.length / 2 - 1;
        d  = Math.floor(c);
        c -= d;
        d *= 2;
        d += 2;

        for(i = b; i !== d; i += 2)
          ctx.lineTo(cx + path[i] * cw, cy + path[i + 1] * cw);

        ctx.lineTo(
          cx + (path[d - 2] * (1 - c) + path[d    ] * c) * cw,
          cy + (path[d - 1] * (1 - c) + path[d + 1] * c) * cw
        );
      }

      else
        for(i = b; i !== path.length; i += 2)
          ctx.lineTo(cx + path[i] * cw, cy + path[i + 1] * cw);

      ctx.stroke();
    }

    else if(c < 1) {
      ctx.beginPath();

      c *= path.length / 2 - 1;
      d  = Math.floor(c);
      c -= d;
      d *= 2;
      d += 2;

      ctx.moveTo(cx + path[0] * cw, cy + path[1] * cw);

      for(i = 2; i !== d; i += 2)
        ctx.lineTo(cx + path[i] * cw, cy + path[i + 1] * cw);

      ctx.lineTo(
        cx + (path[d - 2] * (1 - c) + path[d    ] * c) * cw,
        cy + (path[d - 1] * (1 - c) + path[d + 1] * c) * cw
      );

      ctx.stroke();
    }

    if(e < 1) {
      e *= path.length / 2 - 1;
      f  = Math.floor(e);
      e -= f;
      f *= 2;
      f += 2;

      leaf(
        ctx,
        t,
        cx + (path[f - 2] * (1 - e) + path[f    ] * e) * cw,
        cy + (path[f - 1] * (1 - e) + path[f + 1] * e) * cw,
        cw,
        s,
        color
      );
    }
  }

  var Skycons = function(opts) {
        this.list        = [];
        this.interval    = null;
        this.color       = opts && opts.color ? opts.color : "black";
        this.resizeClear = !!(opts && opts.resizeClear);
      };

  Skycons.CLEAR_DAY = function(ctx, t, color) {
    var w = ctx.canvas.width,
        h = ctx.canvas.height,
        s = Math.min(w, h);

    sun(ctx, t, w * 0.5, h * 0.5, s, s * STROKE, color);
  };

  Skycons.CLEAR_NIGHT = function(ctx, t, color) {
    var w = ctx.canvas.width,
        h = ctx.canvas.height,
        s = Math.min(w, h);

    moon(ctx, t, w * 0.5, h * 0.5, s, s * STROKE, color);
  };

  Skycons.PARTLY_CLOUDY_DAY = function(ctx, t, color) {
    var w = ctx.canvas.width,
        h = ctx.canvas.height,
        s = Math.min(w, h);

    sun(ctx, t, w * 0.625, h * 0.375, s * 0.75, s * STROKE, color);
    cloud(ctx, t, w * 0.375, h * 0.625, s * 0.75, s * STROKE, color);
  };

  Skycons.PARTLY_CLOUDY_NIGHT = function(ctx, t, color) {
    var w = ctx.canvas.width,
        h = ctx.canvas.height,
        s = Math.min(w, h);

    moon(ctx, t, w * 0.667, h * 0.375, s * 0.75, s * STROKE, color);
    cloud(ctx, t, w * 0.375, h * 0.625, s * 0.75, s * STROKE, color);
  };

  Skycons.CLOUDY = function(ctx, t, color) {
    var w = ctx.canvas.width,
        h = ctx.canvas.height,
        s = Math.min(w, h);

    cloud(ctx, t, w * 0.5, h * 0.5, s, s * STROKE, color);
  };

  Skycons.RAIN = function(ctx, t, color) {
    var w = ctx.canvas.width,
        h = ctx.canvas.height,
        s = Math.min(w, h);

    rain(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color);
    cloud(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color);
  };

  Skycons.SLEET = function(ctx, t, color) {
    var w = ctx.canvas.width,
        h = ctx.canvas.height,
        s = Math.min(w, h);

    sleet(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color);
    cloud(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color);
  };

  Skycons.SNOW = function(ctx, t, color) {
    var w = ctx.canvas.width,
        h = ctx.canvas.height,
        s = Math.min(w, h);

    snow(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color);
    cloud(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color);
  };

  Skycons.WIND = function(ctx, t, color) {
    var w = ctx.canvas.width,
        h = ctx.canvas.height,
        s = Math.min(w, h);

    swoosh(ctx, t, w * 0.5, h * 0.5, s, s * STROKE, 0, 2, color);
    swoosh(ctx, t, w * 0.5, h * 0.5, s, s * STROKE, 1, 2, color);
  };

  Skycons.FOG = function(ctx, t, color) {
    var w = ctx.canvas.width,
        h = ctx.canvas.height,
        s = Math.min(w, h),
        k = s * STROKE;

    fogbank(ctx, t, w * 0.5, h * 0.32, s * 0.75, k, color);

    t /= 5000;

    var a = Math.cos((t       ) * TAU) * s * 0.02,
        b = Math.cos((t + 0.25) * TAU) * s * 0.02,
        c = Math.cos((t + 0.50) * TAU) * s * 0.02,
        d = Math.cos((t + 0.75) * TAU) * s * 0.02,
        n = h * 0.936,
        e = Math.floor(n - k * 0.5) + 0.5,
        f = Math.floor(n - k * 2.5) + 0.5;

    ctx.strokeStyle = color;
    ctx.lineWidth = k;
    ctx.lineCap = "round";
    ctx.lineJoin = "round";

    line(ctx, a + w * 0.2 + k * 0.5, e, b + w * 0.8 - k * 0.5, e);
    line(ctx, c + w * 0.2 + k * 0.5, f, d + w * 0.8 - k * 0.5, f);
  };

  Skycons.prototype = {
    _determineDrawingFunction: function(draw) {
      if(typeof draw === "string")
        draw = Skycons[draw.toUpperCase().replace(/-/g, "_")] || null;

      return draw;
    },
    add: function(el, draw) {
      var obj;

      if(typeof el === "string")
        el = document.getElementById(el);

      // Does nothing if canvas name doesn't exists
      if(el === null)
        return;

      draw = this._determineDrawingFunction(draw);

      // Does nothing if the draw function isn't actually a function
      if(typeof draw !== "function")
        return;

      obj = {
        element: el,
        context: el.getContext("2d"),
        drawing: draw
      };

      this.list.push(obj);
      this.draw(obj, KEYFRAME);
    },
    set: function(el, draw) {
      var i;

      if(typeof el === "string")
        el = document.getElementById(el);

      for(i = this.list.length; i--; )
        if(this.list[i].element === el) {
          this.list[i].drawing = this._determineDrawingFunction(draw);
          this.draw(this.list[i], KEYFRAME);
          return;
        }

      this.add(el, draw);
    },
    remove: function(el) {
      var i;

      if(typeof el === "string")
        el = document.getElementById(el);

      for(i = this.list.length; i--; )
        if(this.list[i].element === el) {
          this.list.splice(i, 1);
          return;
        }
    },
    draw: function(obj, time) {
      var canvas = obj.context.canvas;

      if(this.resizeClear)
        canvas.width = canvas.width;

      else
        obj.context.clearRect(0, 0, canvas.width, canvas.height);

      obj.drawing(obj.context, time, this.color);
    },
    play: function() {
      var self = this;

      this.pause();
      this.interval = requestInterval(function() {
        var now = Date.now(),
            i;

        for(i = self.list.length; i--; )
          self.draw(self.list[i], now);
      }, 1000 / 60);
    },
    pause: function() {
      var i;

      if(this.interval) {
        cancelInterval(this.interval);
        this.interval = null;
      }
    }
  };

  global.Skycons = Skycons;
}(this));


/***/ },

/***/ "./src/app/components/d3/d3.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
__webpack_require__("./node_modules/d3/d3.js");
var D3Module = (function () {
    function D3Module() {
    }
    D3Module = __decorate([
        core_1.NgModule({}), 
        __metadata('design:paramtypes', [])
    ], D3Module);
    return D3Module;
}());
exports.D3Module = D3Module;


/***/ },

/***/ "./src/app/components/flot/flot.directive.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var FlotChart = (function () {
    function FlotChart(el) {
        this.$el = jQuery(el.nativeElement);
    }
    FlotChart.prototype.render = function () {
        jQuery.plot(this.$el, this.data, this.options || {
            series: {
                lines: {
                    show: true,
                    lineWidth: 1,
                    fill: false,
                    fillColor: { colors: [{ opacity: .001 }, { opacity: .5 }] }
                },
                points: {
                    show: false,
                    fill: true
                },
                shadowSize: 0
            },
            legend: false,
            grid: {
                show: false,
                margin: 0,
                labelMargin: 0,
                axisMargin: 0,
                hoverable: true,
                clickable: true,
                tickColor: 'rgba(255,255,255,1)',
                borderWidth: 0
            }
        });
    };
    FlotChart.prototype.ngOnInit = function () {
        this.render();
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FlotChart.prototype, "data", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], FlotChart.prototype, "options", void 0);
    FlotChart = __decorate([
        core_1.Directive({
            selector: '[flot-chart]'
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _a) || Object])
    ], FlotChart);
    return FlotChart;
    var _a;
}());
exports.FlotChart = FlotChart;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ },

/***/ "./src/app/components/flot/flot.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
__webpack_require__("./node_modules/jquery-flot/jquery.flot.js");
__webpack_require__("./node_modules/jquery.flot.animator/jquery.flot.animator.js");
__webpack_require__("./node_modules/jquery-flot/jquery.flot.time.js");
var flot_directive_1 = __webpack_require__("./src/app/components/flot/flot.directive.ts");
var FlotChartModule = (function () {
    function FlotChartModule() {
    }
    FlotChartModule = __decorate([
        core_1.NgModule({
            declarations: [
                flot_directive_1.FlotChart
            ],
            exports: [
                flot_directive_1.FlotChart
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], FlotChartModule);
    return FlotChartModule;
}());
exports.FlotChartModule = FlotChartModule;


/***/ },

/***/ "./src/app/components/mapael/mapael.directive.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var MapaelLayersMap = (function () {
    function MapaelLayersMap(el) {
        this.$el = jQuery(el.nativeElement);
    }
    MapaelLayersMap.prototype.render = function () {
        var $map = this.$el;
        $map.css('height', this.height || 394).css('margin-bottom', this.marginBottom || (-15));
        if ($map.parents('.widget')[0]) {
            $map.find('.map').css('height', parseInt($map.parents('.widget').css('height'), 10) - 40);
        }
        $map.mapael(this.data);
        if (this.zoom) {
            $map.trigger('zoom', this.zoom);
        }
    };
    MapaelLayersMap.prototype.ngOnInit = function () {
        this.render();
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], MapaelLayersMap.prototype, "height", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], MapaelLayersMap.prototype, "marginBottom", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], MapaelLayersMap.prototype, "data", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], MapaelLayersMap.prototype, "zoom", void 0);
    MapaelLayersMap = __decorate([
        core_1.Directive({
            selector: '[mapael-layers-map]'
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _a) || Object])
    ], MapaelLayersMap);
    return MapaelLayersMap;
    var _a;
}());
exports.MapaelLayersMap = MapaelLayersMap;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ },

/***/ "./src/app/components/mapael/mapael.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
__webpack_require__("./node_modules/jQuery-Mapael/js/jquery.mapael.js");
__webpack_require__("./node_modules/jQuery-Mapael/js/maps/world_countries.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var mapael_directive_1 = __webpack_require__("./src/app/components/mapael/mapael.directive.ts");
var MapaelLayersMapModule = (function () {
    function MapaelLayersMapModule() {
    }
    MapaelLayersMapModule = __decorate([
        core_1.NgModule({
            declarations: [
                mapael_directive_1.MapaelLayersMap
            ],
            exports: [
                mapael_directive_1.MapaelLayersMap
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], MapaelLayersMapModule);
    return MapaelLayersMapModule;
}());
exports.MapaelLayersMapModule = MapaelLayersMapModule;


/***/ },

/***/ "./src/app/components/rickshaw/rickshaw.directive.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery, Rickshaw) {"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var RickshawChart = (function () {
    function RickshawChart(el) {
        this.$el = jQuery(el.nativeElement);
    }
    RickshawChart.prototype.render = function () {
        var _this = this;
        var graph = new Rickshaw.Graph({
            element: this.$el[0],
            height: this.height,
            renderer: this.renderer || 'area',
            series: this.series
        });
        var onResize = function () {
            var configureProperties = jQuery.extend({
                height: _this.height
            }, _this.configureProps);
            graph.configure(configureProperties);
            graph.render();
            _this.$el.find('svg').css({ height: _this.height, width: '100%' });
        };
        jQuery(window).on('sn:resize', onResize);
        onResize();
        var hoverDetail = new Rickshaw.Graph.HoverDetail({
            graph: graph,
            xFormatter: function (x) {
                return new Date(x * 1000).toString();
            }
        });
        if (this.realtime) {
            setInterval(function () {
                _this.random.removeData(_this.seriesData);
                _this.random.addData(_this.seriesData);
                graph.update();
            }, 1000);
        }
    };
    RickshawChart.prototype.ngOnInit = function () {
        this.render();
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], RickshawChart.prototype, "height", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], RickshawChart.prototype, "series", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], RickshawChart.prototype, "seriesData", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], RickshawChart.prototype, "random", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], RickshawChart.prototype, "configureProps", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], RickshawChart.prototype, "realtime", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], RickshawChart.prototype, "renderer", void 0);
    RickshawChart = __decorate([
        core_1.Directive({
            selector: '[rickshaw-chart]'
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _a) || Object])
    ], RickshawChart);
    return RickshawChart;
    var _a;
}());
exports.RickshawChart = RickshawChart;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js"), __webpack_require__("./node_modules/rickshaw/rickshaw.js")))

/***/ },

/***/ "./src/app/components/rickshaw/rickshaw.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var d3_module_1 = __webpack_require__("./src/app/components/d3/d3.module.ts");
__webpack_require__("./node_modules/rickshaw/rickshaw.js");
var rickshaw_directive_1 = __webpack_require__("./src/app/components/rickshaw/rickshaw.directive.ts");
var RickshawChartModule = (function () {
    function RickshawChartModule() {
    }
    RickshawChartModule = __decorate([
        core_1.NgModule({
            imports: [
                d3_module_1.D3Module
            ],
            declarations: [
                rickshaw_directive_1.RickshawChart
            ],
            exports: [
                rickshaw_directive_1.RickshawChart
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], RickshawChartModule);
    return RickshawChartModule;
}());
exports.RickshawChartModule = RickshawChartModule;


/***/ },

/***/ "./src/app/components/skycon/scycon.directive.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery, Skycons) {"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var Skycon = (function () {
    function Skycon(el) {
        this.$el = jQuery(el.nativeElement);
    }
    Skycon.prototype.ngOnInit = function () {
        var icons = new Skycons.Skycons({ 'color': this.color });
        icons.set(this.$el[0], this.weather);
        icons.play();
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Skycon.prototype, "color", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Skycon.prototype, "weather", void 0);
    Skycon = __decorate([
        core_1.Directive({
            selector: '[skycon]'
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _a) || Object])
    ], Skycon);
    return Skycon;
    var _a;
}());
exports.Skycon = Skycon;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js"), __webpack_require__("./node_modules/skycons/skycons.js")))

/***/ },

/***/ "./src/app/components/skycon/skycon.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var scycon_directive_1 = __webpack_require__("./src/app/components/skycon/scycon.directive.ts");
var SkyconsModule = (function () {
    function SkyconsModule() {
    }
    SkyconsModule = __decorate([
        core_1.NgModule({
            declarations: [
                scycon_directive_1.Skycon
            ],
            exports: [
                scycon_directive_1.Skycon
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], SkyconsModule);
    return SkyconsModule;
}());
exports.SkyconsModule = SkyconsModule;


/***/ },

/***/ "./src/app/components/sparkline/sparkline.directive.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var JqSparkline = (function () {
    function JqSparkline(el) {
        this.$el = jQuery(el.nativeElement);
    }
    JqSparkline.prototype.render = function () {
        var _this = this;
        var model = jQuery.type(this.data) === 'string' ?
            this.data.replace(/(^,)|(,$)/g, '')
            : this.data, options = this.options;
        // enabling composite chart if array passed
        if (jQuery.type(model) === 'array' && jQuery.type(options) === 'array') {
            options.forEach(function (singleOptions, i) {
                if (i === 0) {
                    _this.$el.sparkline(model[i], singleOptions);
                }
                else {
                    _this.$el.sparkline(model[i], jQuery.extend({ composite: true }, singleOptions));
                }
            });
        }
        else {
            var data_1;
            // Make sure we have an array of numbers
            jQuery.type(model) === 'array' ? data_1 = model : data_1 = model.split(',');
            jQuery(window).on('sn:resize', function () { _this.$el.sparkline(data_1, options); });
            this.$el.sparkline(data_1, options);
        }
    };
    JqSparkline.prototype.ngOnInit = function () {
        this.render();
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], JqSparkline.prototype, "data", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], JqSparkline.prototype, "options", void 0);
    JqSparkline = __decorate([
        core_1.Directive({
            selector: '[jq-sparkline]'
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _a) || Object])
    ], JqSparkline);
    return JqSparkline;
    var _a;
}());
exports.JqSparkline = JqSparkline;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ },

/***/ "./src/app/components/sparkline/sparkline.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
__webpack_require__("./node_modules/jquery-sparkline/jquery.sparkline.js");
var sparkline_directive_1 = __webpack_require__("./src/app/components/sparkline/sparkline.directive.ts");
var JqSparklineModule = (function () {
    function JqSparklineModule() {
    }
    JqSparklineModule = __decorate([
        core_1.NgModule({
            declarations: [
                sparkline_directive_1.JqSparkline
            ],
            exports: [
                sparkline_directive_1.JqSparkline
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], JqSparklineModule);
    return JqSparklineModule;
}());
exports.JqSparklineModule = JqSparklineModule;


/***/ },

/***/ "./src/app/components/tile/tile.directive.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var LiveTile = (function () {
    function LiveTile(el) {
        this.$el = jQuery(el.nativeElement);
    }
    LiveTile.prototype.ngOnInit = function () {
        this.$el
            .css('height', this.$el.data('height'))
            .liveTile();
    };
    LiveTile = __decorate([
        core_1.Directive({
            selector: '[live-tile]'
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _a) || Object])
    ], LiveTile);
    return LiveTile;
    var _a;
}());
exports.LiveTile = LiveTile;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ },

/***/ "./src/app/components/tile/tile.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var tile_directive_1 = __webpack_require__("./src/app/components/tile/tile.directive.ts");
__webpack_require__("./node_modules/metrojs/release/MetroJs.Full/MetroJs.js");
var LiveTileModule = (function () {
    function LiveTileModule() {
    }
    LiveTileModule = __decorate([
        core_1.NgModule({
            declarations: [
                tile_directive_1.LiveTile
            ],
            exports: [
                tile_directive_1.LiveTile
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], LiveTileModule);
    return LiveTileModule;
}());
exports.LiveTileModule = LiveTileModule;


/***/ },

/***/ "./src/app/layout/widget/widget.directive.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var Widget = (function () {
    function Widget(el) {
        this.$el = jQuery(el.nativeElement);
        jQuery.fn.widgster.Constructor.DEFAULTS.bodySelector = '.widget-body';
        /*
         When widget is closed remove its parent if it is .col-*
         */
        jQuery(document).on('close.widgster', function (e) {
            var $colWrap = jQuery(e.target)
                .closest('.content > .row > [class*="col-"]:not(.widget-container)');
            // remove colWrap only if there are no more widgets inside
            if (!$colWrap.find('.widget').not(e.target).length) {
                $colWrap.remove();
            }
        });
    }
    Widget.prototype.ngOnInit = function () {
        this.$el.widgster();
    };
    Widget = __decorate([
        core_1.Directive({
            selector: '[widget]'
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _a) || Object])
    ], Widget);
    return Widget;
    var _a;
}());
exports.Widget = Widget;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ },

/***/ "./src/app/layout/widget/widget.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var widget_directive_1 = __webpack_require__("./src/app/layout/widget/widget.directive.ts");
var WidgetModule = (function () {
    function WidgetModule() {
    }
    WidgetModule = __decorate([
        core_1.NgModule({
            imports: [common_1.CommonModule],
            declarations: [widget_directive_1.Widget],
            exports: [widget_directive_1.Widget]
        }), 
        __metadata('design:paramtypes', [])
    ], WidgetModule);
    return WidgetModule;
}());
exports.WidgetModule = WidgetModule;


/***/ },

/***/ "./src/app/widgets/changes-chart-widget/changes-chart-widget.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Rickshaw, jQuery) {"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var app_config_1 = __webpack_require__("./src/app/app.config.ts");
var ChangesChartWidget = (function () {
    function ChangesChartWidget(config) {
        this.config = config.getConfig();
        this.configFn = config;
    }
    ChangesChartWidget.prototype.applyRickshawData = function () {
        var seriesData = [[], []];
        var random = new Rickshaw.Fixtures.RandomData(10000);
        for (var i = 0; i < 32; i++) {
            random.addData(seriesData);
        }
        this.series = [{
                name: 'pop',
                data: seriesData.shift().map(function (d) { return { x: d.x, y: d.y }; }),
                /* tslint:disable */
                color: this.configFn.lightenColor(this.config.settings.colors['brand-success'], .09),
                /* tslint:enable */
                renderer: 'bar'
            }, {
                name: 'humidity',
                data: seriesData.shift()
                    .map(function (d) {
                    return { x: d.x, y: d.y * (Math.random() * 0.1 + 1.1) };
                }),
                renderer: 'line',
                /* tslint:disable */
                color: this.config.settings.colors['white']
            }];
    };
    ;
    ChangesChartWidget.prototype.applySparklineData = function () {
        var data = [3, 6, 2, 4, 5, 8, 6, 8], dataMax = this.configFn.max(data), backgroundData = data.map(function () { return dataMax; });
        this.sparklineData = [backgroundData, data];
        this.sparklineOptions = [{
                type: 'bar',
                height: 26,
                /* tslint:disable */
                barColor: this.config.settings.colors['gray-lighter'],
                /* tslint:enable */
                barWidth: 7,
                barSpacing: 5,
                chartRangeMin: this.configFn.min(data),
                tooltipFormat: new jQuery.SPFormatClass('')
            },
            {
                composite: true,
                type: 'bar',
                /* tslint:disable */
                barColor: this.config.settings.colors['brand-success'],
                /* tslint:enable */
                barWidth: 7,
                barSpacing: 5
            }];
    };
    ;
    ChangesChartWidget.prototype.ngOnInit = function () {
        this.applyRickshawData();
        this.applySparklineData();
    };
    ChangesChartWidget = __decorate([
        core_1.Component({
            selector: '[changes-chart-widget]',
            template: __webpack_require__("./src/app/widgets/changes-chart-widget/changes-chart-widget.template.html"),
            encapsulation: core_1.ViewEncapsulation.None,
            styles: [__webpack_require__("./node_modules/rickshaw/rickshaw.css")]
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof app_config_1.AppConfig !== 'undefined' && app_config_1.AppConfig) === 'function' && _a) || Object])
    ], ChangesChartWidget);
    return ChangesChartWidget;
    var _a;
}());
exports.ChangesChartWidget = ChangesChartWidget;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/rickshaw/rickshaw.js"), __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ },

/***/ "./src/app/widgets/changes-chart-widget/changes-chart-widget.template.html":
/***/ function(module, exports) {

module.exports = "<div class=\"widget-controls\">\r\n  <a href=\"#\"><i class=\"fa fa-refresh\"></i></a>\r\n  <a href=\"#\" data-widgster=\"close\"><i class=\"glyphicon glyphicon-remove\"></i></a>\r\n</div>\r\n<div class=\"widget-body\">\r\n  <div class=\"chart bg-success btlr btrr\">\r\n    <p class=\"chart-value\"><i class=\"fa fa-caret-up\"></i> 352.79</p>\r\n    <p class=\"chart-value-change\">+2.04 (1.69%)</p>\r\n    <div rickshaw-chart [series]=\"series\" [height]=\"100\" [renderer]=\"'multi'\" [configureProps]=\"{gapSize: 0.5, min: 'auto', strokeWidth: 3}\"></div>\r\n  </div>\r\n  <h4 class=\"chart-title\"><span class=\"fw-normal\">Salt Lake City</span>, Utah</h4>\r\n  <p class=\"deemphasize\">Today 13:34</p>\r\n  <div class=\"mt\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-6\">\r\n        <p class=\"h4 no-margin\">18.7M</p>\r\n        <p class=\"deemphasize\">Shares Traded</p>\r\n      </div>\r\n      <div class=\"col-xs-6 text-xs-right\">\r\n        <p class=\"h4 no-margin\">19.9B</p>\r\n        <p class=\"deemphasize\">Market Cap</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"mt\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-6\">\r\n        <p class=\"h3 no-margin text-success fw-semi-bold\">+120.93</p>\r\n        <p class=\"deemphasize\">Yearly Change</p>\r\n      </div>\r\n      <div class=\"col-xs-6 text-xs-right\">\r\n        <span jq-sparkline [data]=\"sparklineData\" [options]=\"sparklineOptions\"></span>\r\n        <p class=\"deemphasize\">GOOG</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"

/***/ },

/***/ "./src/app/widgets/flot-chart-widget/flot-chart-widget.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var app_config_1 = __webpack_require__("./src/app/app.config.ts");
var FlotChartWidget = (function () {
    function FlotChartWidget(config) {
        this.configFn = config;
        this.config = config.getConfig();
    }
    FlotChartWidget.prototype.generateRandomData = function (labels) {
        function random() {
            return (Math.floor(Math.random() * 30)) + 10;
        }
        var data = [], maxValueIndex = 5;
        for (var i = 0; i < labels.length; i++) {
            var randomSeries = [];
            for (var j = 0; j < 25; j++) {
                randomSeries.push([j, Math.floor(maxValueIndex * j) + random()]);
            }
            maxValueIndex--;
            data.push({
                data: randomSeries,
                showLabels: true,
                label: labels[i].label,
                labelPlacement: 'below',
                canvasRender: true,
                cColor: 'red',
                color: labels[i].color
            });
        }
        return data;
    };
    ;
    FlotChartWidget = __decorate([
        core_1.Component({
            selector: '[flot-chart-widget]',
            template: __webpack_require__("./src/app/widgets/flot-chart-widget/flot-chart-widget.template.html"),
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof app_config_1.AppConfig !== 'undefined' && app_config_1.AppConfig) === 'function' && _a) || Object])
    ], FlotChartWidget);
    return FlotChartWidget;
    var _a;
}());
exports.FlotChartWidget = FlotChartWidget;


/***/ },

/***/ "./src/app/widgets/flot-chart-widget/flot-chart-widget.template.html":
/***/ function(module, exports) {

module.exports = "<div class=\"col-lg-6 col-xs-12\">\r\n  <section widget class=\"widget widget-chart-stats-simple\">\r\n    <header>\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-3\">\r\n          <h6>\r\n            Total Sales\r\n          </h6>\r\n          <p class=\"value5\">\r\n            January, 2014\r\n          </p>\r\n        </div>\r\n        <div class=\"col-xs-3\">\r\n          <h5>\r\n            <small>Best</small>\r\n          </h5>\r\n          <p class=\"value6 fs-sm\">\r\n            March, 2013 + 1\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div class=\"widget-controls\">\r\n        <a href=\"#\"><i class=\"glyphicon glyphicon-cog\"></i></a>\r\n        <a href=\"#\" data-widgster=\"close\"><i class=\"glyphicon glyphicon-remove\"></i></a>\r\n      </div>\r\n    </header>\r\n    <div class=\"widget-body\">\r\n      <div class=\"chart-stats\">\r\n        <p class=\"text-muted fs-mini mt-xs\">\r\n          <i class=\"fa fa-map-marker fa-5x pull-left\"></i>\r\n          <span class=\"fw-semi-bold text-gray-dark\">Jess:</span> Seems like statically it's getting impossible to achieve any sort of\r\n          results in nearest future. The only thing we can hope for is pressing one of these two buttons:\r\n        </p>\r\n        <div class=\"btn-toolbar\">\r\n          <button class=\"btn btn-xs btn-success\">Accept</button>\r\n          <button class=\"btn btn-xs btn-default\">Reject</button>\r\n        </div>\r\n      </div>\r\n      <div class=\"chart bg-body-light\">\r\n        <div flot-chart [data]=\"generateRandomData([{\r\n                        label: 'Visitors', color: configFn.darkenColor(config.settings.colors['gray-lighter'], .05)\r\n                    },{\r\n                        label: 'Charts', color: config.settings.colors['brand-danger']\r\n                    }])\" class=\"chart-inner\"></div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</div>\r\n<div class=\"col-lg-6 col-xs-12\">\r\n  <section widget class=\"widget widget-chart-stats-simple\">\r\n    <header>\r\n      <h6 class=\"mb-0\">\r\n        <span class=\"fw-semi-bold\">Budget</span> <span class=\"tag tag-pill tag-danger\">2017</span>\r\n      </h6>\r\n      <span class=\"text-muted fs-mini\">monthly report will be available in <a href=\"#\">6 hours</a></span>\r\n      <div class=\"widget-controls\">\r\n        <a href=\"#\"><i class=\"glyphicon glyphicon-cog\"></i></a>\r\n        <a href=\"#\" data-widgster=\"close\"><i class=\"glyphicon glyphicon-remove\"></i></a>\r\n      </div>\r\n    </header>\r\n    <div class=\"widget-body\">\r\n      <div class=\"chart-stats\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-5\">\r\n            <div class=\"clearfix m-t-1\">\r\n              <h6 class=\"pull-left text-muted mb-xs\">\r\n                Income\r\n              </h6>\r\n              <p class=\"pull-right h6 mb-xs\">\r\n                <span class=\"fw-semi-bold\">$14,595</span>\r\n              </p>\r\n            </div>\r\n            <div class=\"clearfix\">\r\n              <h6 class=\"pull-left no-margin text-muted\">\r\n                Recent\r\n              </h6>\r\n              <p class=\"pull-right\">\r\n                <span class=\"fw-semi-bold\">$7,647</span>\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-3 text-xs-right m-t-1\">\r\n            <h6 class=\"text-muted mb-xs\">Inqueries</h6>\r\n            <p class=\"fw-semi-bold\">73 at 14am</p>\r\n          </div>\r\n          <div class=\"col-md-4 text-xs-right m-t-1\">\r\n            <h6 class=\"text-muted mb-xs\">Last Updated</h6>\r\n            <p class=\"fw-semi-bold\">23.06.2013</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"chart bg-body-light\">\r\n        <div flot-chart [data] = \"generateRandomData([{\r\n                        label: 'Controllers', color: '#777'\r\n                    },{\r\n                        label: 'Scopes', color: config.settings.colors['brand-warning']\r\n                    }])\" class=\"chart-inner\"></div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</div>\r\n"

/***/ },

/***/ "./src/app/widgets/nasdaq-sparkline-widget/nasdaq-sparkline-widget.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var app_config_1 = __webpack_require__("./src/app/app.config.ts");
var NasdaqSparklineWidget = (function () {
    function NasdaqSparklineWidget(config) {
        this.config = config.getConfig();
        this.configFn = config;
        this.data = [4, 6, 5, 7, 5];
        this.options = {
            type: 'line',
            width: '99%',
            height: '60',
            lineColor: this.config.settings.colors.gray,
            fillColor: 'transparent',
            spotRadius: 5,
            spotColor: this.config.settings.colors.gray,
            valueSpots: { '0:': this.config.settings.colors.gray },
            highlightSpotColor: this.config.settings.colors.white,
            highlightLineColor: this.config.settings.colors.gray,
            minSpotColor: this.config.settings.colors.gray,
            maxSpotColor: this.config.settings.colors['brand-danger'],
            tooltipFormat: new jQuery
                .SPFormatClass('<span style="color: white">&#9679;</span> {{prefix}}{{y}}{{suffix}}'),
            chartRangeMin: this.configFn.min(this.data) - 1
        };
    }
    NasdaqSparklineWidget = __decorate([
        core_1.Component({
            selector: '[nasdaq-sparkline-widget]',
            template: '<div jq-sparkline [data]="data" [options]="options"></div>'
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof app_config_1.AppConfig !== 'undefined' && app_config_1.AppConfig) === 'function' && _a) || Object])
    ], NasdaqSparklineWidget);
    return NasdaqSparklineWidget;
    var _a;
}());
exports.NasdaqSparklineWidget = NasdaqSparklineWidget;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ },

/***/ "./src/app/widgets/realtime-traffic-widget/realtime-traffic-widget.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Rickshaw) {"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var app_config_1 = __webpack_require__("./src/app/app.config.ts");
var RealtimeTrafficWidget = (function () {
    function RealtimeTrafficWidget(config) {
        this.seriesData = [[], []];
        this.config = config.getConfig();
        this.random = new Rickshaw.Fixtures.RandomData(30);
        for (var i = 0; i < 30; i++) {
            this.random.addData(this.seriesData);
        }
        this.series = [
            {
                color: this.config.settings.colors['gray-dark'],
                data: this.seriesData[0],
                name: 'Uploads'
            }, {
                color: this.config.settings.colors.gray,
                data: this.seriesData[1],
                name: 'Downloads'
            }
        ];
    }
    RealtimeTrafficWidget = __decorate([
        core_1.Component({
            selector: '[realtime-traffic-widget]',
            template: __webpack_require__("./src/app/widgets/realtime-traffic-widget/realtime-traffic-widget.template.html"),
            encapsulation: core_1.ViewEncapsulation.None,
            styles: [__webpack_require__("./node_modules/rickshaw/rickshaw.css")]
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof app_config_1.AppConfig !== 'undefined' && app_config_1.AppConfig) === 'function' && _a) || Object])
    ], RealtimeTrafficWidget);
    return RealtimeTrafficWidget;
    var _a;
}());
exports.RealtimeTrafficWidget = RealtimeTrafficWidget;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/rickshaw/rickshaw.js")))

/***/ },

/***/ "./src/app/widgets/realtime-traffic-widget/realtime-traffic-widget.template.html":
/***/ function(module, exports) {

module.exports = "<h4 class=\"mb-lg\">Recent <span class=\"fw-semi-bold\">Update</span></h4>\r\n<h6>Node.js <span class=\"fw-semi-bold\">4.0.1 distribution</span></h6>\r\n<div class=\"bg-gray-lighter progress-bar\">\r\n  <progress class=\"progress progress-xs progress-danger\" value=\"100\" max=\"100\" style=\"width: 77%\"></progress>\r\n</div>\r\n<p class=\"mt-sm mb fs-mini \">\r\n  <small><span class=\"circle bg-warning text-gray-dark\"><i class=\"glyphicon glyphicon-chevron-up\"></i></span></small>\r\n  <strong>17% higher</strong>\r\n  than last month</p>\r\n<p class=\"fs-sm text-gray-lighter mb-0\">Remaining hours</p>\r\n<a class=\"btn btn-xs btn-gray pull-right ml-xs\" href=\"#\">\r\n  <i class=\"fa fa-compress\"></i> track\r\n</a>\r\n<a class=\"btn btn-xs btn-gray pull-right\" href=\"#\">\r\n  <i class=\"fa fa-pause\"></i> pause\r\n</a>\r\n<p class=\"value4\">2h 56m</p>\r\n<br>\r\n<div rickshaw-chart [series]=\"series\" [height]=\"130\"\r\n     [realtime]=\"true\" [random]=\"random\" [seriesData]=\"seriesData\" class=\"chart-overflow-bottom text-gray-dark\">\r\n</div>\r\n"

/***/ },

/***/ "./src/app/widgets/widgets.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var app_config_1 = __webpack_require__("./src/app/app.config.ts");
var Widgets = (function () {
    function Widgets(config) {
        this.configFn = config;
        this.config = config.getConfig();
    }
    Widgets = __decorate([
        core_1.Component({
            selector: 'widgets',
            template: __webpack_require__("./src/app/widgets/widgets.template.html"),
            encapsulation: core_1.ViewEncapsulation.None,
            styles: [__webpack_require__("./src/app/widgets/widgets.style.scss")]
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof app_config_1.AppConfig !== 'undefined' && app_config_1.AppConfig) === 'function' && _a) || Object])
    ], Widgets);
    return Widgets;
    var _a;
}());
exports.Widgets = Widgets;


/***/ },

/***/ "./src/app/widgets/widgets.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var widgets_component_1 = __webpack_require__("./src/app/widgets/widgets.component.ts");
var tile_module_1 = __webpack_require__("./src/app/components/tile/tile.module.ts");
var skycon_module_1 = __webpack_require__("./src/app/components/skycon/skycon.module.ts");
var widget_module_1 = __webpack_require__("./src/app/layout/widget/widget.module.ts");
var flot_module_1 = __webpack_require__("./src/app/components/flot/flot.module.ts");
var rickshaw_module_1 = __webpack_require__("./src/app/components/rickshaw/rickshaw.module.ts");
var sparkline_module_1 = __webpack_require__("./src/app/components/sparkline/sparkline.module.ts");
var mapael_module_1 = __webpack_require__("./src/app/components/mapael/mapael.module.ts");
var changes_chart_widget_component_1 = __webpack_require__("./src/app/widgets/changes-chart-widget/changes-chart-widget.component.ts");
var flot_chart_widget_component_1 = __webpack_require__("./src/app/widgets/flot-chart-widget/flot-chart-widget.component.ts");
var nasdaq_sparkline_widget_component_1 = __webpack_require__("./src/app/widgets/nasdaq-sparkline-widget/nasdaq-sparkline-widget.component.ts");
var realtime_traffic_widget_component_1 = __webpack_require__("./src/app/widgets/realtime-traffic-widget/realtime-traffic-widget.component.ts");
var years_map_widget_component_1 = __webpack_require__("./src/app/widgets/years-map-widget/years-map-widget.component.ts");
var fake_world_data_service_1 = __webpack_require__("./src/app/widgets/years-map-widget/fake-world-data.service.ts");
exports.routes = [
    { path: '', component: widgets_component_1.Widgets, pathMatch: 'full' }
];
var WidgetsModule = (function () {
    function WidgetsModule() {
    }
    WidgetsModule.routes = exports.routes;
    WidgetsModule = __decorate([
        core_1.NgModule({
            declarations: [
                widgets_component_1.Widgets,
                changes_chart_widget_component_1.ChangesChartWidget,
                flot_chart_widget_component_1.FlotChartWidget,
                nasdaq_sparkline_widget_component_1.NasdaqSparklineWidget,
                realtime_traffic_widget_component_1.RealtimeTrafficWidget,
                years_map_widget_component_1.YearsMapWidget
            ],
            imports: [
                common_1.CommonModule,
                router_1.RouterModule.forChild(exports.routes),
                tile_module_1.LiveTileModule,
                skycon_module_1.SkyconsModule,
                widget_module_1.WidgetModule,
                flot_module_1.FlotChartModule,
                rickshaw_module_1.RickshawChartModule,
                sparkline_module_1.JqSparklineModule,
                mapael_module_1.MapaelLayersMapModule
            ],
            providers: [fake_world_data_service_1.FakeWorldData]
        }), 
        __metadata('design:paramtypes', [])
    ], WidgetsModule);
    return WidgetsModule;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = WidgetsModule;


/***/ },

/***/ "./src/app/widgets/widgets.style.scss":
/***/ function(module, exports) {

module.exports = "/* Sizes */\n.live-tile,\n.list-tile,\n.copy-tile,\n.tile-strip .flip-list > li {\n  height: 150px;\n  margin: 5px;\n  outline: 1px solid transparent;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  padding: 0px;\n  width: 150px; }\n\n.live-tile.half-tile,\n.list-tile.half-tile,\n.copy-tile.half-tile,\n.tile-strip .flip-list > li.half-tile {\n  height: 70px;\n  width: 70px; }\n\n.live-tile.half-wide,\n.list-tile.half-wide,\n.copy-tile.half-wide,\n.tile-strip .flip-list > li.half-wide {\n  width: 70px; }\n\n.live-tile.two-wide,\n.list-tile.two-wide,\n.copy-tile.two-wide,\n.tile-strip .flip-list > li.two-wide {\n  width: 310px; }\n\n.live-tile.three-wide,\n.list-tile.three-wide,\n.copy-tile.three-wide,\n.tile-strip .flip-list > li.three-wide {\n  width: 470px; }\n\n.live-tile.four-wide,\n.list-tile.four-wide,\n.copy-tile.four-wide,\n.tile-strip .flip-list > li.four-wide {\n  width: 630px; }\n\n.live-tile.five-wide,\n.list-tile.five-wide,\n.copy-tile.five-wide,\n.tile-strip .flip-list > li.five-wide {\n  width: 790px; }\n\n.live-tile.six-wide,\n.list-tile.six-wide,\n.copy-tile.six-wide,\n.tile-strip .flip-list > li.six-wide {\n  width: 950px; }\n\n.live-tile.seven-wide,\n.list-tile.seven-wide,\n.copy-tile.seven-wide,\n.tile-strip .flip-list > li.seven-wide {\n  width: 1110px; }\n\n.live-tile.eight-wide,\n.list-tile.eight-wide,\n.copy-tile.eight-wide,\n.tile-strip .flip-list > li.eight-wide {\n  width: 1270px; }\n\n.live-tile.nine-wide,\n.list-tile.nine-wide,\n.copy-tile.nine-wide,\n.tile-strip .flip-list > li.nine-wide {\n  width: 1430px; }\n\n.live-tile.ten-wide,\n.list-tile.ten-wide,\n.copy-tile.ten-wide,\n.tile-strip .flip-list > li.ten-wide {\n  width: 1590px; }\n\n.live-tile.half-tall,\n.list-tile.half-tall,\n.copy-tile.half-tall,\n.tile-strip .flip-list > li.half-tall {\n  height: 70px; }\n\n.live-tile.two-tall,\n.list-tile.two-tall,\n.copy-tile.two-tall,\n.tile-strip .flip-list > li.two-tall {\n  height: 310px; }\n\n.live-tile.three-tall,\n.list-tile.three-tall,\n.copy-tile.three-tall,\n.tile-strip .flip-list > li.three-tall {\n  height: 470px; }\n\n.live-tile.four-tall,\n.list-tile.four-tall,\n.copy-tile.four-tall,\n.tile-strip .flip-list > li.four-tall {\n  height: 630px; }\n\n.live-tile.five-tall,\n.list-tile.five-tall,\n.copy-tile.five-tall,\n.tile-strip .flip-list > li.five-tall {\n  height: 790px; }\n\n.live-tile.six-tall,\n.list-tile.six-tall,\n.copy-tile.six-tall,\n.tile-strip .flip-list > li.six-tall {\n  height: 950px; }\n\n.live-tile.seven-tall,\n.list-tile.seven-tall,\n.copy-tile.seven-tall,\n.tile-strip .flip-list > li.seven-tall {\n  height: 1110px; }\n\n.live-tile.eight-tall,\n.list-tile.eight-tall,\n.copy-tile.eight-tall,\n.tile-strip .flip-list > li.eight-tall {\n  height: 1270px; }\n\n.live-tile.nine-tall,\n.list-tile.nine-tall,\n.copy-tile.nine-tall,\n.tile-strip .flip-list > li.nine-tall {\n  height: 1430px; }\n\n.live-tile.ten-tall,\n.list-tile.ten-tall,\n.copy-tile.ten-tall,\n.tile-strip .flip-list > li.ten-tall {\n  height: 1590px; }\n\n/* End Sizes */\n/* flip-list tile grid sprite styles */\n.live-tile > .flip-list,\n.list-tile > .flip-list {\n  height: 100%;\n  width: 100%; }\n\n.flip-list > li {\n  height: 50px;\n  margin: 0px;\n  padding: 0px;\n  width: 50px; }\n\n.flip-list.fourTiles > li {\n  border: none;\n  padding: 0;\n  margin: 0;\n  height: 50%;\n  width: 50%; }\n\n.flip-list.nineTiles > li {\n  height: 33%;\n  width: 33%;\n  border: none;\n  padding: 0;\n  margin: 0; }\n\n.flip-list.fourTiles > li > div,\n.flip-list.fourTiles > li > div > a,\n.flip-list.fourTiles > li > div > img,\n.flip-list.nineTiles > li > div,\n.flip-list.nineTiles > li > div > a,\n.flip-list.nineTiles > li > div > img {\n  border: none;\n  height: 100%;\n  width: 100%;\n  padding: 0;\n  margin: 0; }\n\n/* fourTile background positions */\n.fourTiles .fourTiles1 img,\n.fourTiles img.fourTiles1,\n.fourTiles .fourTiles1 a,\n.fourTiles .tile-1 img,\n.fourTiles .tile-1 a {\n  background-position: 0px 0px; }\n\n.fourTiles .fourTiles2 img,\n.fourTiles img.fourTiles2,\n.fourTiles .fourTiles2 a,\n.fourTiles .tile-2 img,\n.fourTiles .tile-2 a {\n  background-position: -75px 0px; }\n\n.fourTiles .fourTiles3 img,\n.fourTiles img.fourTiles3,\n.fourTiles .fourTiles3 a,\n.fourTiles .tile-3 img,\n.fourTiles .tile-3 a {\n  background-position: 0px -75px; }\n\n.fourTiles .fourTiles4 img,\n.fourTiles img.fourTiles4,\n.fourTiles .fourTiles4 a,\n.fourTiles .tile-4 img,\n.fourTiles .tile-4 a {\n  background-position: -75px -75px; }\n\n/* nineTile background positions */\n.nineTiles .nineTiles1 img,\n.nineTiles img.nineTiles1,\n.nineTiles .nineTiles1 a,\n.nineTiles .tile-1 img,\n.nineTiles .tile-1 a {\n  background-position: 0px 0px; }\n\n.nineTiles .nineTiles2 img,\n.nineTiles img.nineTiles2,\n.nineTiles .nineTiles2 a,\n.nineTiles .tile-2 img,\n.nineTiles .tile-2 a {\n  background-position: -50px 0px; }\n\n.nineTiles .nineTiles3 img,\n.nineTiles img.nineTiles3,\n.nineTiles .nineTiles3 a,\n.nineTiles .tile-3 img,\n.nineTiles .tile-3 a {\n  background-position: -100px 0px; }\n\n.nineTiles .nineTiles4 img,\n.nineTiles img.nineTiles4,\n.nineTiles .nineTiles4 a,\n.nineTiles .tile-4 img,\n.nineTiles .tile-4 a {\n  background-position: 0px -50px; }\n\n.nineTiles .nineTiles5 img,\n.nineTiles img.nineTiles5,\n.nineTiles .nineTiles5 a,\n.nineTiles .tile-5 img,\n.nineTiles .tile-5 a {\n  background-position: -50px -50px; }\n\n.nineTiles .nineTiles6 img,\n.nineTiles img.nineTiles6,\n.nineTiles .nineTiles6 a,\n.nineTiles .tile-6 img,\n.nineTiles .tile-6 a {\n  background-position: -100px -50px; }\n\n.nineTiles .nineTiles7 img,\n.nineTiles img.nineTiles7,\n.nineTiles .nineTiles7 a,\n.nineTiles .tile-7 img,\n.nineTiles .tile-7 a {\n  background-position: 0px -100px; }\n\n.nineTiles .nineTiles8 img,\n.nineTiles img.nineTiles8,\n.nineTiles .nineTiles8 a,\n.nineTiles .tile-8 img,\n.nineTiles .tile-8 a {\n  background-position: -50px -100px; }\n\n.nineTiles .nineTiles9 img,\n.nineTiles img.nineTiles9,\n.nineTiles .nineTiles9 a,\n.nineTiles .tile-9 img,\n.nineTiles .tile-9 a {\n  background-position: -100px -100px; }\n\n.tile-group,\n.tile-strip {\n  display: block;\n  overflow: hidden;\n  position: relative;\n  z-index: 20;\n  -webkit-perspective: 800px;\n  -moz-perspective: 800px;\n  -ms-perspective: 800px;\n  perspective: 800px; }\n\n.tile-group.one-tile,\n.tile-strip.one-tile {\n  height: 160px;\n  width: 160px; }\n\n.tile-group.half-wide,\n.tile-strip.half-wide {\n  width: 80px; }\n\n.tile-group.one-wide,\n.tile-strip.one-wide {\n  width: 160px; }\n\n.tile-group.two-wide,\n.tile-strip.two-wide {\n  width: 320px; }\n\n.tile-group.three-wide,\n.tile-strip.three-wide {\n  width: 480px; }\n\n.tile-group.four-wide,\n.tile-strip.four-wide {\n  width: 640px; }\n\n.tile-group.five-wide,\n.tile-strip.five-wide {\n  width: 800px; }\n\n.tile-group.six-wide,\n.tile-strip.six-wide {\n  width: 960px; }\n\n.tile-group.seven-wide,\n.tile-strip.seven-wide {\n  width: 1120px; }\n\n.tile-group.eight-wide,\n.tile-strip.eight-wide {\n  width: 1280px; }\n\n.tile-group.nine-wide,\n.tile-strip.nine-wide {\n  width: 1440px; }\n\n.tile-group.ten-wide,\n.tile-strip.ten-wide {\n  width: 1600px; }\n\n.tile-group.half-tall,\n.tile-strip.half-tall {\n  height: 80px; }\n\n.tile-group.one-tall,\n.tile-strip.one-tall {\n  height: 160px; }\n\n.tile-group.two-tall,\n.tile-strip.two-tall {\n  height: 320px; }\n\n.tile-group.three-tall,\n.tile-strip.three-tall {\n  height: 480px; }\n\n.tile-group.four-tall,\n.tile-strip.four-tall {\n  height: 640px; }\n\n.tile-group.five-tall,\n.tile-strip.five-tall {\n  height: 800px; }\n\n.tile-group.six-tall,\n.tile-strip.six-tall {\n  height: 960px; }\n\n.tile-group.seven-tall,\n.tile-strip.seven-tall {\n  height: 1120px; }\n\n.tile-group.eight-tall,\n.tile-strip.eight-tall {\n  height: 1280px; }\n\n.tile-group.nine-tall,\n.tile-strip.nine-tall {\n  height: 1440px; }\n\n.tile-group.ten-tall,\n.tile-strip.ten-tall {\n  height: 1600px; }\n\n/* liveTile styles */\n.tile-strip,\n.live-tile,\n.list-tile,\n.copy-tile,\n.slide {\n  float: left; }\n\n.live-tile,\n.list-tile,\n.copy-tile {\n  color: #fff;\n  overflow: hidden;\n  position: relative;\n  z-index: 20; }\n\n.live-tile p,\n.list-tile p,\n.copy-tile p,\n.live-tile .face,\n.list-tile .face,\n.copy-tile .face {\n  display: block;\n  font-size: 1em;\n  line-height: 1.2em;\n  margin: 0; }\n\n.live-tile .face,\n.list-tile .face,\n.copy-tile .face {\n  padding: 0px; }\n\n.live-tile p,\n.list-tile p,\n.copy-tile p {\n  padding: 10px; }\n\n.live-tile.half-tile p,\n.list-tile.half-tile p,\n.copy-tile.half-tile p {\n  padding: 5px; }\n\n.live-tile .face.full,\n.list-tile .face.full,\n.copy-tile .face.full {\n  height: 100%;\n  width: 100%; }\n\n.live-tile img,\n.list-tile img,\n.copy-tile img {\n  border: none; }\n\n.live-tile .tile-title,\n.list-tile .tile-title,\n.copy-tile .tile-title {\n  -moz-box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  position: absolute;\n  bottom: 0px;\n  font-size: 12px;\n  left: 0px;\n  text-decoration: none;\n  width: 100%;\n  z-index: 30; }\n\n.live-tile a,\n.list-tile a,\n.copy-tile a {\n  color: #fff; }\n\n.live-tile a.tile-title:link,\n.list-tile a.tile-title:link,\n.copy-tile a.tile-title:link,\n.live-tile a.tile-title:visited,\n.list-tile a.tile-title:visited,\n.copy-tile a.tile-title:visited,\n.live-tile a.tile-title:hover,\n.list-tile a.tile-title:hover,\n.copy-tile a.tile-title:hover,\n.live-tile a.tile-title,\n.list-tile a.tile-title,\n.copy-tile a.tile-title {\n  text-decoration: none; }\n\n.live-tile a:link,\n.list-tile a:link,\n.copy-tile a:link,\n.live-tile a:visited,\n.list-tile a:visited,\n.copy-tile a:visited {\n  color: #fff;\n  text-decoration: underline; }\n\n.live-tile a:hover,\n.list-tile a:hover,\n.copy-tile a:hover {\n  color: #fff;\n  text-decoration: none; }\n\n.light .copy-tile {\n  color: #000; }\n\n.light .copy-tile.accent {\n  color: #fff; }\n\n.light .copy-tile.accent a,\n.light .copy-tile.accent a:link,\n.light .copy-tile.accent a:visited,\n.light .copy-tile.accent a:hover {\n  color: #fff; }\n\n.light .copy-tile a,\n.light .copy-tile a:link,\n.light .copy-tile a:visited,\n.light .copy-tile a:hover {\n  color: #000; }\n\n.light .copy-tile .face,\n.light .copy-tile .accent {\n  color: #fff; }\n\n.light .copy-tile .face a,\n.light .copy-tile .accent a,\n.light .copy-tile .face a:link,\n.light .copy-tile .accent a:link,\n.light .copy-tile .face a:visited,\n.light .copy-tile .accent a:visited,\n.light .copy-tile .face a:hover,\n.light .copy-tile .accent a:hover {\n  color: #fff; }\n\n.copy-tile p {\n  padding: 5px 5px 0px 5px;\n  font-size: .95em; }\n\n.noselect > div,\n.noselect > .slide,\n.noselect > .slide-front,\n.noselect > .slide-back,\n.noselect > .fade-front,\n.noselect > .fade-back,\n.noselect > .flip-front,\n.noselect > .flip-back {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.live-tile > div,\n.list-tile > div,\n.live-tile > .slide,\n.carousel > .slide,\n.live-tile > .slide-front,\n.live-tile > .slide-back,\n.live-tile > .fade-front,\n.live-tile > .fade-back,\n.live-tile > .flip-front,\n.live-tile > .flip-back {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  top: 0px;\n  left: 0px;\n  margin: 0px;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n  position: absolute;\n  z-index: 20; }\n\n.list-tile > div {\n  position: relative;\n  background-color: transparent; }\n\n.live-tile .align-mid {\n  display: inline-block;\n  position: absolute;\n  left: 50%;\n  max-height: 100%;\n  top: 50%;\n  -moz-transform: translate(-50%, -50%);\n  -ms-transform: translate(-50%, -50%);\n  -o-transform: translate(-50%, -50%);\n  -webkit-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%); }\n\n.live-tile .align-mid-x {\n  display: inline-block;\n  left: 50%;\n  max-width: 100%;\n  position: absolute;\n  -moz-transform: translate(-50%, 0px);\n  -ms-transform: translate(-50%, 0px);\n  -o-transform: translate(-50%, 0px);\n  -webkit-transform: translate(-50%, 0px);\n  transform: translate(-50%, 0px); }\n\n.live-tile .align-mid-y {\n  display: inline-block;\n  max-height: 100%;\n  position: absolute;\n  top: 50%;\n  -moz-transform: translate(0px, -50%);\n  -ms-transform: translate(0px, -50%);\n  -o-transform: translate(0px, -50%);\n  -webkit-transform: translate(0px, -50%);\n  transform: translate(0px, -50%); }\n\nimg.full,\na.full,\n.live-tile .full,\n.list-tile .full {\n  display: block;\n  margin: 0px;\n  height: 100%;\n  text-decoration: none;\n  width: 100%; }\n\nimg.full-w,\na.full-w,\n.live-tile .full-w,\n.list-tile .full-w {\n  display: block;\n  margin: 0px;\n  text-decoration: none;\n  width: 100%; }\n\nimg.full-h,\na.full-h,\n.live-tile .full-h,\n.list-tile .full-h {\n  display: block;\n  margin: 0px;\n  height: 100%; }\n\n.live-tile > .back,\n.live-tile > .slide-back,\n.live-tile > .fade-back,\n.live-tile > .flip-back,\n.flip-list .flip-back {\n  position: absolute;\n  z-index: 10; }\n\n/*  ========== flip-list Styles ==========\n\t.flip-list\n\t---li\n\t------div.flip-front\n\t------div.flip-back\n*/\n.flip-list {\n  padding: 0px;\n  margin: 0px; }\n\n.list-tile .flip-list {\n  height: 100%;\n  width: 100%; }\n\n.flip-list > li > a {\n  border: none;\n  outline: none;\n  text-decoration: none;\n  margin: 0px;\n  padding: 0px;\n  height: 100%;\n  width: 100%; }\n\n.flip-list > li img {\n  border: none;\n  outline: none;\n  height: 100%;\n  margin: 0px;\n  padding: 0px;\n  width: 100%; }\n\n.flip-list > li {\n  float: left;\n  list-style-type: none;\n  outline: none;\n  position: relative; }\n\n.flip-list > li > div {\n  border: none;\n  background: white;\n  height: 100%;\n  left: 0px;\n  margin: 0px;\n  overflow: hidden;\n  position: absolute;\n  padding: 0px;\n  top: 0px;\n  width: 100%;\n  z-index: 20; }\n\n.flip-list > li > div.flip-back {\n  height: 0px; }\n\n/* ------ Hardware Accelerated Tiles --------*/\n/* flip */\n.live-tile.flip.ha,\n.flip-list.ha {\n  position: relative;\n  overflow: hidden; }\n\n.live-tile.flip .ha.flip-front,\n.flip-list .ha.flip-front,\n.live-tile.flip .ha.flip-back,\n.flip-list .ha.flip-back {\n  position: absolute;\n  z-index: 20;\n  -webkit-backface-visibility: hidden;\n  -moz-backface-visibility: hidden;\n  backface-visibility: hidden; }\n\n.flip-list > li > .ha.flip-back,\n.flip-list > li > .ha.flip-back img {\n  /* override the values set for margin and ensure the back tile is visible  */\n  margin: 0px !important;\n  height: 100%; }\n\n.bounce {\n  cursor: pointer;\n  outline: 1px solid transparent;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  -webkit-transition: all .2s ease;\n  -moz-transition: all .2s ease;\n  -o-transition: all .2s ease;\n  transition: all .2s ease;\n  -webkit-transform: scale(1);\n  -ms-transform: scale(1);\n  -moz-transform: scale(1);\n  -o-transform: scale(1);\n  transform: scale(1);\n  -webkit-transform-origin: 50% 50%;\n  -moz-transform-origin: 50% 50%;\n  -ms-transform-origin: 50% 50%;\n  -o-transform-origin: 50% 50%;\n  transform-origin: 50% 50%;\n  -webkit-transform-style: preserve-3d;\n  -moz-transform-style: preserve-3d;\n  -ms-transform-style: preserve-3d;\n  transform-style: preserve-3d;\n  -webkit-backface-visibility: hidden;\n  -moz-backface-visibility: hidden;\n  backface-visibility: hidden; }\n\n.bounce.bounce-c {\n  filter: progid:DXImageTransform.Microsoft.Matrix(M11=0.95, M12=0, M21=0, M22=0.95);\n  -webkit-transform: scale(0.95);\n  -ms-transform: scale(0.95);\n  -moz-transform: scale(0.95);\n  -o-transform: scale(0.95);\n  transform: scale(0.95); }\n\n.bounce.bounce-t {\n  -webkit-transform: rotateX(20deg);\n  -ms-transform: rotateX(20deg);\n  -moz-transform: rotateX(20deg);\n  -o-transform: rotateX(20deg);\n  transform: rotateX(20deg);\n  -webkit-transform-origin: 0% 100%;\n  -moz-transform-origin: 0% 100%;\n  -ms-transform-origin: 0% 100%;\n  -o-transform-origin: 0% 100%;\n  transform-origin: 0% 100%; }\n\n.bounce.bounce-b {\n  -webkit-transform: rotateX(-20deg);\n  -ms-transform: rotateX(-20deg);\n  -moz-transform: rotateX(-20deg);\n  -o-transform: rotateX(-20deg);\n  transform: rotateX(-20deg);\n  -webkit-transform-origin: 50% 0%;\n  -moz-transform-origin: 50% 0%;\n  -ms-transform-origin: 50% 0%;\n  -o-transform-origin: 50% 0%;\n  transform-origin: 50% 0%; }\n\n.bounce.bounce-r {\n  -webkit-transform: rotateY(20deg);\n  -ms-transform: rotateY(20deg);\n  -moz-transform: rotateY(20deg);\n  -o-transform: rotateY(20deg);\n  transform: rotateY(20deg);\n  -webkit-transform-origin: 0% 50%;\n  -moz-transform-origin: 0% 50%;\n  -ms-transform-origin: 0% 50%;\n  -o-transform-origin: 0% 50%;\n  transform-origin: 0% 50%; }\n\n.bounce.bounce-l {\n  -webkit-transform: rotateY(-20deg);\n  -ms-transform: rotateY(-20deg);\n  -moz-transform: rotateY(-20deg);\n  -o-transform: rotateY(-20deg);\n  transform: rotateY(-20deg);\n  -webkit-transform-origin: 100% 50%;\n  -moz-transform-origin: 100% 50%;\n  -ms-transform-origin: 100% 50%;\n  -o-transform-origin: 100% 50%;\n  transform-origin: 100% 50%; }\n\n.bounce.bounce-tl {\n  -webkit-transform: rotateX(10deg) rotateY(-10deg);\n  -ms-transform: rotateX(10deg) rotateY(-10deg);\n  -moz-transform: rotateX(10deg) rotateY(-10deg);\n  -o-transform: rotateX(10deg) rotateY(-10deg);\n  transform: rotateX(10deg) rotateY(-10deg); }\n\n.bounce.bounce-tr {\n  -webkit-transform: rotateX(10deg) rotateY(10deg);\n  -ms-transform: rotateX(10deg) rotateY(10deg);\n  -moz-transform: rotateX(10deg) rotateY(10deg);\n  -o-transform: rotateX(10deg) rotateY(10deg);\n  transform: rotateX(10deg) rotateY(10deg); }\n\n.bounce.bounce-bl {\n  -webkit-transform: rotateX(-10deg) rotateY(-10deg);\n  -ms-transform: rotateX(-10deg) rotateY(-10deg);\n  -moz-transform: rotateX(-10deg) rotateY(-10deg);\n  -o-transform: rotateX(-10deg) rotateY(-10deg);\n  transform: rotateX(-10deg) rotateY(-10deg); }\n\n.bounce.bounce-br {\n  -webkit-transform: rotateX(-10deg) rotateY(10deg);\n  -ms-transform: rotateX(-10deg) rotateY(10deg);\n  -moz-transform: rotateX(-10deg) rotateY(10deg);\n  -o-transform: rotateX(-10deg) rotateY(10deg);\n  transform: rotateX(-10deg) rotateY(10deg); }\n\n.metroBig,\n.metroExtraLarge,\n.face.metroBig,\n.face.metroExtraLarge,\n.live-tile .metroExtraLarge {\n  font-size: 2em;\n  line-height: 1.1em; }\n\na.metroBig:link,\na.metroExtraLarge:link,\na.face.metroBig:link,\na.face.metroExtraLarge:link,\na.live-tile .metroExtraLarge:link {\n  text-decoration: none; }\n\n.metroLarger,\n.face.metroLarger,\n.live-tile .metroLarger {\n  font-size: 1.5em;\n  line-height: 1.1em; }\n\na.metroLarger:link,\na.face.metroLarger:link,\na.live-tile .metroLarger:link {\n  text-decoration: none; }\n\n.metroLarge,\n.face.metroLarge,\n.live-tile .metroLarge {\n  font-size: 1.2em;\n  line-height: 1.1em; }\n\na.metroLarge:link,\na.face.metroLarge:link,\na.live-tile .metroLarge:link {\n  text-decoration: none; }\n\n.metroSmall,\n.face.metroSmall,\n.live-tile .metroSmall {\n  font-size: .9em;\n  line-height: 1em; }\n\na.metroSmall:link,\na.face.metroSmall:link,\na.live-tile .metroSmall:link {\n  text-decoration: none; }\n\n.metroSmaller,\n.face.metroSmaller,\n.live-tile .metroSmaller {\n  font-size: .8em;\n  line-height: 1em; }\n\na.metroSmaller:link,\na.face.metroSmaller:link,\na.live-tile .metroSmaller:link {\n  text-decoration: none; }\n\n.metroExtraSmall,\n.face.metroExtraSmall,\n.live-tile .metroExtraSmall {\n  font-size: .7em;\n  line-height: 1em; }\n\na.metroExtraSmall:link,\na.face.metroExtraSmall:link,\na.live-tile .metroExtraSmall:link {\n  text-decoration: none; }\n\n.live-tile .p-top {\n  display: block;\n  position: absolute;\n  right: 0px;\n  text-decoration: none; }\n\n.live-tile .p-right {\n  display: block;\n  position: absolute;\n  right: 0px;\n  text-decoration: none; }\n\n.live-tile .p-bottom {\n  display: block;\n  position: absolute;\n  bottom: 0px;\n  text-decoration: none; }\n\n.live-tile .p-left {\n  display: block;\n  position: absolute;\n  left: 0px;\n  text-decoration: none; }\n\n/***** Theme Definitions *****/\n.light {\n  background-color: #fff;\n  color: #000; }\n\n.dark {\n  background-color: #000;\n  color: #fff; }\n\n.light.accent {\n  background-color: #fff; }\n\n.dark.accent {\n  background-color: #000; }\n\n.light .appbar {\n  background-color: #dfdfdf; }\n\n.dark .appbar {\n  background-color: #212021; }\n\n/*live tile accent colors */\n.amber .accent,\n.amber .accentBg,\n.amber .accentBgHover:hover,\n.amber .accentBgHover a:hover,\n.amber .live-tile > div,\n.amber .copy-tile > div,\n.amber .live-tile > .face,\n.amber .copy-tile > .face,\n.amber .live-tile > .slide,\n.amber .live-tile > .flip-back,\n.amber .live-tile > .flip-front,\n.amber .live-tile > .slide-back,\n.amber .live-tile > .slide-front,\n.amber .list-tile > div,\n.amber .flip-list > li > div {\n  background-color: #f1a30b; }\n\n.amber .accentColor,\n.amber .accentHover:hover,\n.amber .accentHover a:hover,\n.amber .accentLink a,\n.amber .accentLink a:hover,\n.amber .accentLink a:visited,\n.amber a.accentLink,\n.amber a.accentLink:hover,\n.amber a.accentLink:visited {\n  color: #f1a30b; }\n\n.amber .accentBorder {\n  border-color: #f1a30b; }\n\n.amber .accentBorderBottom {\n  border-bottom-color: #f1a30b; }\n\n.amber .accentBorderLeft {\n  border-left-color: #f1a30b; }\n\n.amber .accentBorderRight {\n  border-right-color: #f1a30b; }\n\n.amber .accentBorderTop {\n  border-top-color: #f1a30b; }\n\n.blue .accent,\n.blue .accentBg,\n.blue .accentBgHover:hover,\n.blue .accentBgHover a:hover,\n.blue .live-tile > div,\n.blue .copy-tile > div,\n.blue .live-tile > .face,\n.blue .copy-tile > .face,\n.blue .live-tile > .slide,\n.blue .live-tile > .flip-back,\n.blue .live-tile > .flip-front,\n.blue .live-tile > .slide-back,\n.blue .live-tile > .slide-front,\n.blue .list-tile > div,\n.blue .flip-list > li > div {\n  background-color: #1ba1e2; }\n\n.blue .accentColor,\n.blue .accentHover:hover,\n.blue .accentHover a:hover,\n.blue .accentLink a,\n.blue .accentLink a:hover,\n.blue .accentLink a:visited,\n.blue a.accentLink,\n.blue a.accentLink:hover,\n.blue a.accentLink:visited {\n  color: #1ba1e2; }\n\n.blue .accentBorder {\n  border-color: #1ba1e2; }\n\n.blue .accentBorderBottom {\n  border-bottom-color: #1ba1e2; }\n\n.blue .accentBorderLeft {\n  border-left-color: #1ba1e2; }\n\n.blue .accentBorderRight {\n  border-right-color: #1ba1e2; }\n\n.blue .accentBorderTop {\n  border-top-color: #1ba1e2; }\n\n.brown .accent,\n.brown .accentBg,\n.brown .accentBgHover:hover,\n.brown .accentBgHover a:hover,\n.brown .live-tile > div,\n.brown .copy-tile > div,\n.brown .live-tile > .face,\n.brown .copy-tile > .face,\n.brown .live-tile > .slide,\n.brown .live-tile > .flip-back,\n.brown .live-tile > .flip-front,\n.brown .live-tile > .slide-back,\n.brown .live-tile > .slide-front,\n.brown .list-tile > div,\n.brown .flip-list > li > div {\n  background-color: #a05000; }\n\n.brown .accentColor,\n.brown .accentHover:hover,\n.brown .accentHover a:hover,\n.brown .accentLink a,\n.brown .accentLink a:hover,\n.brown .accentLink a:visited,\n.brown a.accentLink,\n.brown a.accentLink:hover,\n.brown a.accentLink:visited {\n  color: #a05000; }\n\n.brown .accentBorder {\n  border-color: #a05000; }\n\n.brown .accentBorderBottom {\n  border-bottom-color: #a05000; }\n\n.brown .accentBorderLeft {\n  border-left-color: #a05000; }\n\n.brown .accentBorderRight {\n  border-right-color: #a05000; }\n\n.brown .accentBorderTop {\n  border-top-color: #a05000; }\n\n.cobalt .accent,\n.cobalt .accentBg,\n.cobalt .accentBgHover:hover,\n.cobalt .accentBgHover a:hover,\n.cobalt .live-tile > div,\n.cobalt .copy-tile > div,\n.cobalt .live-tile > .face,\n.cobalt .copy-tile > .face,\n.cobalt .live-tile > .slide,\n.cobalt .live-tile > .flip-back,\n.cobalt .live-tile > .flip-front,\n.cobalt .live-tile > .slide-back,\n.cobalt .live-tile > .slide-front,\n.cobalt .list-tile > div,\n.cobalt .flip-list > li > div {\n  background-color: #0050ef; }\n\n.cobalt .accentColor,\n.cobalt .accentHover:hover,\n.cobalt .accentHover a:hover,\n.cobalt .accentLink a,\n.cobalt .accentLink a:hover,\n.cobalt .accentLink a:visited,\n.cobalt a.accentLink,\n.cobalt a.accentLink:hover,\n.cobalt a.accentLink:visited {\n  color: #0050ef; }\n\n.cobalt .accentBorder {\n  border-color: #0050ef; }\n\n.cobalt .accentBorderBottom {\n  border-bottom-color: #0050ef; }\n\n.cobalt .accentBorderLeft {\n  border-left-color: #0050ef; }\n\n.cobalt .accentBorderRight {\n  border-right-color: #0050ef; }\n\n.cobalt .accentBorderTop {\n  border-top-color: #0050ef; }\n\n.crimson .accent,\n.crimson .accentBg,\n.crimson .accentBgHover:hover,\n.crimson .accentBgHover a:hover,\n.crimson .live-tile > div,\n.crimson .copy-tile > div,\n.crimson .live-tile > .face,\n.crimson .copy-tile > .face,\n.crimson .live-tile > .slide,\n.crimson .live-tile > .flip-back,\n.crimson .live-tile > .flip-front,\n.crimson .live-tile > .slide-back,\n.crimson .live-tile > .slide-front,\n.crimson .list-tile > div,\n.crimson .flip-list > li > div {\n  background-color: #a20025; }\n\n.crimson .accentColor,\n.crimson .accentHover:hover,\n.crimson .accentHover a:hover,\n.crimson .accentLink a,\n.crimson .accentLink a:hover,\n.crimson .accentLink a:visited,\n.crimson a.accentLink,\n.crimson a.accentLink:hover,\n.crimson a.accentLink:visited {\n  color: #a20025; }\n\n.crimson .accentBorder {\n  border-color: #a20025; }\n\n.crimson .accentBorderBottom {\n  border-bottom-color: #a20025; }\n\n.crimson .accentBorderLeft {\n  border-left-color: #a20025; }\n\n.crimson .accentBorderRight {\n  border-right-color: #a20025; }\n\n.crimson .accentBorderTop {\n  border-top-color: #a20025; }\n\n.cyan .accent,\n.cyan .accentBg,\n.cyan .accentBgHover:hover,\n.cyan .accentBgHover a:hover,\n.cyan .live-tile > div,\n.cyan .copy-tile > div,\n.cyan .live-tile > .face,\n.cyan .copy-tile > .face,\n.cyan .live-tile > .slide,\n.cyan .live-tile > .flip-back,\n.cyan .live-tile > .flip-front,\n.cyan .live-tile > .slide-back,\n.cyan .live-tile > .slide-front,\n.cyan .list-tile > div,\n.cyan .flip-list > li > div {\n  background-color: #1ba0e1; }\n\n.cyan .accentColor,\n.cyan .accentHover:hover,\n.cyan .accentHover a:hover,\n.cyan .accentLink a,\n.cyan .accentLink a:hover,\n.cyan .accentLink a:visited,\n.cyan a.accentLink,\n.cyan a.accentLink:hover,\n.cyan a.accentLink:visited {\n  color: #1ba0e1; }\n\n.cyan .accentBorder {\n  border-color: #1ba0e1; }\n\n.cyan .accentBorderBottom {\n  border-bottom-color: #1ba0e1; }\n\n.cyan .accentBorderLeft {\n  border-left-color: #1ba0e1; }\n\n.cyan .accentBorderRight {\n  border-right-color: #1ba0e1; }\n\n.cyan .accentBorderTop {\n  border-top-color: #1ba0e1; }\n\n.emerald .accent,\n.emerald .accentBg,\n.emerald .accentBgHover:hover,\n.emerald .accentBgHover a:hover,\n.emerald .live-tile > div,\n.emerald .copy-tile > div,\n.emerald .live-tile > .face,\n.emerald .copy-tile > .face,\n.emerald .live-tile > .slide,\n.emerald .live-tile > .flip-back,\n.emerald .live-tile > .flip-front,\n.emerald .live-tile > .slide-back,\n.emerald .live-tile > .slide-front,\n.emerald .list-tile > div,\n.emerald .flip-list > li > div {\n  background-color: #008a00; }\n\n.emerald .accentColor,\n.emerald .accentHover:hover,\n.emerald .accentHover a:hover,\n.emerald .accentLink a,\n.emerald .accentLink a:hover,\n.emerald .accentLink a:visited,\n.emerald a.accentLink,\n.emerald a.accentLink:hover,\n.emerald a.accentLink:visited {\n  color: #008a00; }\n\n.emerald .accentBorder {\n  border-color: #008a00; }\n\n.emerald .accentBorderBottom {\n  border-bottom-color: #008a00; }\n\n.emerald .accentBorderLeft {\n  border-left-color: #008a00; }\n\n.emerald .accentBorderRight {\n  border-right-color: #008a00; }\n\n.emerald .accentBorderTop {\n  border-top-color: #008a00; }\n\n.green .accent,\n.green .accentBg,\n.green .accentBgHover:hover,\n.green .accentBgHover a:hover,\n.green .live-tile > div,\n.green .copy-tile > div,\n.green .live-tile > .face,\n.green .copy-tile > .face,\n.green .live-tile > .slide,\n.green .live-tile > .flip-back,\n.green .live-tile > .flip-front,\n.green .live-tile > .slide-back,\n.green .live-tile > .slide-front,\n.green .list-tile > div,\n.green .flip-list > li > div {\n  background-color: #339933; }\n\n.green .accentColor,\n.green .accentHover:hover,\n.green .accentHover a:hover,\n.green .accentLink a,\n.green .accentLink a:hover,\n.green .accentLink a:visited,\n.green a.accentLink,\n.green a.accentLink:hover,\n.green a.accentLink:visited {\n  color: #339933; }\n\n.green .accentBorder {\n  border-color: #339933; }\n\n.green .accentBorderBottom {\n  border-bottom-color: #339933; }\n\n.green .accentBorderLeft {\n  border-left-color: #339933; }\n\n.green .accentBorderRight {\n  border-right-color: #339933; }\n\n.green .accentBorderTop {\n  border-top-color: #339933; }\n\n.indigo .accent,\n.indigo .accentBg,\n.indigo .accentBgHover:hover,\n.indigo .accentBgHover a:hover,\n.indigo .live-tile > div,\n.indigo .copy-tile > div,\n.indigo .live-tile > .face,\n.indigo .copy-tile > .face,\n.indigo .live-tile > .slide,\n.indigo .live-tile > .flip-back,\n.indigo .live-tile > .flip-front,\n.indigo .live-tile > .slide-back,\n.indigo .live-tile > .slide-front,\n.indigo .list-tile > div,\n.indigo .flip-list > li > div {\n  background-color: #6a00ff; }\n\n.indigo .accentColor,\n.indigo .accentHover:hover,\n.indigo .accentHover a:hover,\n.indigo .accentLink a,\n.indigo .accentLink a:hover,\n.indigo .accentLink a:visited,\n.indigo a.accentLink,\n.indigo a.accentLink:hover,\n.indigo a.accentLink:visited {\n  color: #6a00ff; }\n\n.indigo .accentBorder {\n  border-color: #6a00ff; }\n\n.indigo .accentBorderBottom {\n  border-bottom-color: #6a00ff; }\n\n.indigo .accentBorderLeft {\n  border-left-color: #6a00ff; }\n\n.indigo .accentBorderRight {\n  border-right-color: #6a00ff; }\n\n.indigo .accentBorderTop {\n  border-top-color: #6a00ff; }\n\n.lime .accent,\n.lime .accentBg,\n.lime .accentBgHover:hover,\n.lime .accentBgHover a:hover,\n.lime .live-tile > div,\n.lime .copy-tile > div,\n.lime .live-tile > .face,\n.lime .copy-tile > .face,\n.lime .live-tile > .slide,\n.lime .live-tile > .flip-back,\n.lime .live-tile > .flip-front,\n.lime .live-tile > .slide-back,\n.lime .live-tile > .slide-front,\n.lime .list-tile > div,\n.lime .flip-list > li > div {\n  background-color: #a2c139; }\n\n.lime .accentColor,\n.lime .accentHover:hover,\n.lime .accentHover a:hover,\n.lime .accentLink a,\n.lime .accentLink a:hover,\n.lime .accentLink a:visited,\n.lime a.accentLink,\n.lime a.accentLink:hover,\n.lime a.accentLink:visited {\n  color: #a2c139; }\n\n.lime .accentBorder {\n  border-color: #a2c139; }\n\n.lime .accentBorderBottom {\n  border-bottom-color: #a2c139; }\n\n.lime .accentBorderLeft {\n  border-left-color: #a2c139; }\n\n.lime .accentBorderRight {\n  border-right-color: #a2c139; }\n\n.lime .accentBorderTop {\n  border-top-color: #a2c139; }\n\n.magenta .accent,\n.magenta .accentBg,\n.magenta .accentBgHover:hover,\n.magenta .accentBgHover a:hover,\n.magenta .live-tile > div,\n.magenta .copy-tile > div,\n.magenta .live-tile > .face,\n.magenta .copy-tile > .face,\n.magenta .live-tile > .slide,\n.magenta .live-tile > .flip-back,\n.magenta .live-tile > .flip-front,\n.magenta .live-tile > .slide-back,\n.magenta .live-tile > .slide-front,\n.magenta .list-tile > div,\n.magenta .flip-list > li > div {\n  background-color: #d80073; }\n\n.magenta .accentColor,\n.magenta .accentHover:hover,\n.magenta .accentHover a:hover,\n.magenta .accentLink a,\n.magenta .accentLink a:hover,\n.magenta .accentLink a:visited,\n.magenta a.accentLink,\n.magenta a.accentLink:hover,\n.magenta a.accentLink:visited {\n  color: #d80073; }\n\n.magenta .accentBorder {\n  border-color: #d80073; }\n\n.magenta .accentBorderBottom {\n  border-bottom-color: #d80073; }\n\n.magenta .accentBorderLeft {\n  border-left-color: #d80073; }\n\n.magenta .accentBorderRight {\n  border-right-color: #d80073; }\n\n.magenta .accentBorderTop {\n  border-top-color: #d80073; }\n\n.mango .accent,\n.mango .accentBg,\n.mango .accentBgHover:hover,\n.mango .accentBgHover a:hover,\n.mango .live-tile > div,\n.mango .copy-tile > div,\n.mango .live-tile > .face,\n.mango .copy-tile > .face,\n.mango .live-tile > .slide,\n.mango .live-tile > .flip-back,\n.mango .live-tile > .flip-front,\n.mango .live-tile > .slide-back,\n.mango .live-tile > .slide-front,\n.mango .list-tile > div,\n.mango .flip-list > li > div {\n  background-color: #f09609; }\n\n.mango .accentColor,\n.mango .accentHover:hover,\n.mango .accentHover a:hover,\n.mango .accentLink a,\n.mango .accentLink a:hover,\n.mango .accentLink a:visited,\n.mango a.accentLink,\n.mango a.accentLink:hover,\n.mango a.accentLink:visited {\n  color: #f09609; }\n\n.mango .accentBorder {\n  border-color: #f09609; }\n\n.mango .accentBorderBottom {\n  border-bottom-color: #f09609; }\n\n.mango .accentBorderLeft {\n  border-left-color: #f09609; }\n\n.mango .accentBorderRight {\n  border-right-color: #f09609; }\n\n.mango .accentBorderTop {\n  border-top-color: #f09609; }\n\n.mauve .accent,\n.mauve .accentBg,\n.mauve .accentBgHover:hover,\n.mauve .accentBgHover a:hover,\n.mauve .live-tile > div,\n.mauve .copy-tile > div,\n.mauve .live-tile > .face,\n.mauve .copy-tile > .face,\n.mauve .live-tile > .slide,\n.mauve .live-tile > .flip-back,\n.mauve .live-tile > .flip-front,\n.mauve .live-tile > .slide-back,\n.mauve .live-tile > .slide-front,\n.mauve .list-tile > div,\n.mauve .flip-list > li > div {\n  background-color: #765f89; }\n\n.mauve .accentColor,\n.mauve .accentHover:hover,\n.mauve .accentHover a:hover,\n.mauve .accentLink a,\n.mauve .accentLink a:hover,\n.mauve .accentLink a:visited,\n.mauve a.accentLink,\n.mauve a.accentLink:hover,\n.mauve a.accentLink:visited {\n  color: #765f89; }\n\n.mauve .accentBorder {\n  border-color: #765f89; }\n\n.mauve .accentBorderBottom {\n  border-bottom-color: #765f89; }\n\n.mauve .accentBorderLeft {\n  border-left-color: #765f89; }\n\n.mauve .accentBorderRight {\n  border-right-color: #765f89; }\n\n.mauve .accentBorderTop {\n  border-top-color: #765f89; }\n\n.olive .accent,\n.olive .accentBg,\n.olive .accentBgHover:hover,\n.olive .accentBgHover a:hover,\n.olive .live-tile > div,\n.olive .copy-tile > div,\n.olive .live-tile > .face,\n.olive .copy-tile > .face,\n.olive .live-tile > .slide,\n.olive .live-tile > .flip-back,\n.olive .live-tile > .flip-front,\n.olive .live-tile > .slide-back,\n.olive .live-tile > .slide-front,\n.olive .list-tile > div,\n.olive .flip-list > li > div {\n  background-color: #6d8764; }\n\n.olive .accentColor,\n.olive .accentHover:hover,\n.olive .accentHover a:hover,\n.olive .accentLink a,\n.olive .accentLink a:hover,\n.olive .accentLink a:visited,\n.olive a.accentLink,\n.olive a.accentLink:hover,\n.olive a.accentLink:visited {\n  color: #6d8764; }\n\n.olive .accentBorder {\n  border-color: #6d8764; }\n\n.olive .accentBorderBottom {\n  border-bottom-color: #6d8764; }\n\n.olive .accentBorderLeft {\n  border-left-color: #6d8764; }\n\n.olive .accentBorderRight {\n  border-right-color: #6d8764; }\n\n.olive .accentBorderTop {\n  border-top-color: #6d8764; }\n\n.orange .accent,\n.orange .accentBg,\n.orange .accentBgHover:hover,\n.orange .accentBgHover a:hover,\n.orange .live-tile > div,\n.orange .copy-tile > div,\n.orange .live-tile > .face,\n.orange .copy-tile > .face,\n.orange .live-tile > .slide,\n.orange .live-tile > .flip-back,\n.orange .live-tile > .flip-front,\n.orange .live-tile > .slide-back,\n.orange .live-tile > .slide-front,\n.orange .list-tile > div,\n.orange .flip-list > li > div {\n  background-color: #fa6801; }\n\n.orange .accentColor,\n.orange .accentHover:hover,\n.orange .accentHover a:hover,\n.orange .accentLink a,\n.orange .accentLink a:hover,\n.orange .accentLink a:visited,\n.orange a.accentLink,\n.orange a.accentLink:hover,\n.orange a.accentLink:visited {\n  color: #fa6801; }\n\n.orange .accentBorder {\n  border-color: #fa6801; }\n\n.orange .accentBorderBottom {\n  border-bottom-color: #fa6801; }\n\n.orange .accentBorderLeft {\n  border-left-color: #fa6801; }\n\n.orange .accentBorderRight {\n  border-right-color: #fa6801; }\n\n.orange .accentBorderTop {\n  border-top-color: #fa6801; }\n\n.pink .accent,\n.pink .accentBg,\n.pink .accentBgHover:hover,\n.pink .accentBgHover a:hover,\n.pink .live-tile > div,\n.pink .copy-tile > div,\n.pink .live-tile > .face,\n.pink .copy-tile > .face,\n.pink .live-tile > .slide,\n.pink .live-tile > .flip-back,\n.pink .live-tile > .flip-front,\n.pink .live-tile > .slide-back,\n.pink .live-tile > .slide-front,\n.pink .list-tile > div,\n.pink .flip-list > li > div {\n  background-color: #e671b8; }\n\n.pink .accentColor,\n.pink .accentHover:hover,\n.pink .accentHover a:hover,\n.pink .accentLink a,\n.pink .accentLink a:hover,\n.pink .accentLink a:visited,\n.pink a.accentLink,\n.pink a.accentLink:hover,\n.pink a.accentLink:visited {\n  color: #e671b8; }\n\n.pink .accentBorder {\n  border-color: #e671b8; }\n\n.pink .accentBorderBottom {\n  border-bottom-color: #e671b8; }\n\n.pink .accentBorderLeft {\n  border-left-color: #e671b8; }\n\n.pink .accentBorderRight {\n  border-right-color: #e671b8; }\n\n.pink .accentBorderTop {\n  border-top-color: #e671b8; }\n\n.purple .accent,\n.purple .accentBg,\n.purple .accentBgHover:hover,\n.purple .accentBgHover a:hover,\n.purple .live-tile > div,\n.purple .copy-tile > div,\n.purple .live-tile > .face,\n.purple .copy-tile > .face,\n.purple .live-tile > .slide,\n.purple .live-tile > .flip-back,\n.purple .live-tile > .flip-front,\n.purple .live-tile > .slide-back,\n.purple .live-tile > .slide-front,\n.purple .list-tile > div,\n.purple .flip-list > li > div {\n  background-color: #a200ff; }\n\n.purple .accentColor,\n.purple .accentHover:hover,\n.purple .accentHover a:hover,\n.purple .accentLink a,\n.purple .accentLink a:hover,\n.purple .accentLink a:visited,\n.purple a.accentLink,\n.purple a.accentLink:hover,\n.purple a.accentLink:visited {\n  color: #a200ff; }\n\n.purple .accentBorder {\n  border-color: #a200ff; }\n\n.purple .accentBorderBottom {\n  border-bottom-color: #a200ff; }\n\n.purple .accentBorderLeft {\n  border-left-color: #a200ff; }\n\n.purple .accentBorderRight {\n  border-right-color: #a200ff; }\n\n.purple .accentBorderTop {\n  border-top-color: #a200ff; }\n\n.violet .accent,\n.violet .accentBg,\n.violet .accentBgHover:hover,\n.violet .accentBgHover a:hover,\n.violet .live-tile > div,\n.violet .copy-tile > div,\n.violet .live-tile > .face,\n.violet .copy-tile > .face,\n.violet .live-tile > .slide,\n.violet .live-tile > .flip-back,\n.violet .live-tile > .flip-front,\n.violet .live-tile > .slide-back,\n.violet .live-tile > .slide-front,\n.violet .list-tile > div,\n.violet .flip-list > li > div {\n  background-color: #a200ff; }\n\n.violet .accentColor,\n.violet .accentHover:hover,\n.violet .accentHover a:hover,\n.violet .accentLink a,\n.violet .accentLink a:hover,\n.violet .accentLink a:visited,\n.violet a.accentLink,\n.violet a.accentLink:hover,\n.violet a.accentLink:visited {\n  color: #a200ff; }\n\n.violet .accentBorder {\n  border-color: #a200ff; }\n\n.violet .accentBorderBottom {\n  border-bottom-color: #a200ff; }\n\n.violet .accentBorderLeft {\n  border-left-color: #a200ff; }\n\n.violet .accentBorderRight {\n  border-right-color: #a200ff; }\n\n.violet .accentBorderTop {\n  border-top-color: #a200ff; }\n\n.red .accent,\n.red .accentBg,\n.red .accentBgHover:hover,\n.red .accentBgHover a:hover,\n.red .live-tile > div,\n.red .copy-tile > div,\n.red .live-tile > .face,\n.red .copy-tile > .face,\n.red .live-tile > .slide,\n.red .live-tile > .flip-back,\n.red .live-tile > .flip-front,\n.red .live-tile > .slide-back,\n.red .live-tile > .slide-front,\n.red .list-tile > div,\n.red .flip-list > li > div {\n  background-color: #e51400; }\n\n.red .accentColor,\n.red .accentHover:hover,\n.red .accentHover a:hover,\n.red .accentLink a,\n.red .accentLink a:hover,\n.red .accentLink a:visited,\n.red a.accentLink,\n.red a.accentLink:hover,\n.red a.accentLink:visited {\n  color: #e51400; }\n\n.red .accentBorder {\n  border-color: #e51400; }\n\n.red .accentBorderBottom {\n  border-bottom-color: #e51400; }\n\n.red .accentBorderLeft {\n  border-left-color: #e51400; }\n\n.red .accentBorderRight {\n  border-right-color: #e51400; }\n\n.red .accentBorderTop {\n  border-top-color: #e51400; }\n\n.sienna .accent,\n.sienna .accentBg,\n.sienna .accentBgHover:hover,\n.sienna .accentBgHover a:hover,\n.sienna .live-tile > div,\n.sienna .copy-tile > div,\n.sienna .live-tile > .face,\n.sienna .copy-tile > .face,\n.sienna .live-tile > .slide,\n.sienna .live-tile > .flip-back,\n.sienna .live-tile > .flip-front,\n.sienna .live-tile > .slide-back,\n.sienna .live-tile > .slide-front,\n.sienna .list-tile > div,\n.sienna .flip-list > li > div {\n  background-color: #7b3a3e; }\n\n.sienna .accentColor,\n.sienna .accentHover:hover,\n.sienna .accentHover a:hover,\n.sienna .accentLink a,\n.sienna .accentLink a:hover,\n.sienna .accentLink a:visited,\n.sienna a.accentLink,\n.sienna a.accentLink:hover,\n.sienna a.accentLink:visited {\n  color: #7b3a3e; }\n\n.sienna .accentBorder {\n  border-color: #7b3a3e; }\n\n.sienna .accentBorderBottom {\n  border-bottom-color: #7b3a3e; }\n\n.sienna .accentBorderLeft {\n  border-left-color: #7b3a3e; }\n\n.sienna .accentBorderRight {\n  border-right-color: #7b3a3e; }\n\n.sienna .accentBorderTop {\n  border-top-color: #7b3a3e; }\n\n.steel .accent,\n.steel .accentBg,\n.steel .accentBgHover:hover,\n.steel .accentBgHover a:hover,\n.steel .live-tile > div,\n.steel .copy-tile > div,\n.steel .live-tile > .face,\n.steel .copy-tile > .face,\n.steel .live-tile > .slide,\n.steel .live-tile > .flip-back,\n.steel .live-tile > .flip-front,\n.steel .live-tile > .slide-back,\n.steel .live-tile > .slide-front,\n.steel .list-tile > div,\n.steel .flip-list > li > div {\n  background-color: #657688; }\n\n.steel .accentColor,\n.steel .accentHover:hover,\n.steel .accentHover a:hover,\n.steel .accentLink a,\n.steel .accentLink a:hover,\n.steel .accentLink a:visited,\n.steel a.accentLink,\n.steel a.accentLink:hover,\n.steel a.accentLink:visited {\n  color: #657688; }\n\n.steel .accentBorder {\n  border-color: #657688; }\n\n.steel .accentBorderBottom {\n  border-bottom-color: #657688; }\n\n.steel .accentBorderLeft {\n  border-left-color: #657688; }\n\n.steel .accentBorderRight {\n  border-right-color: #657688; }\n\n.steel .accentBorderTop {\n  border-top-color: #657688; }\n\n.teal .accent,\n.teal .accentBg,\n.teal .accentBgHover:hover,\n.teal .accentBgHover a:hover,\n.teal .live-tile > div,\n.teal .copy-tile > div,\n.teal .live-tile > .face,\n.teal .copy-tile > .face,\n.teal .live-tile > .slide,\n.teal .live-tile > .flip-back,\n.teal .live-tile > .flip-front,\n.teal .live-tile > .slide-back,\n.teal .live-tile > .slide-front,\n.teal .list-tile > div,\n.teal .flip-list > li > div {\n  background-color: #00aba9; }\n\n.teal .accentColor,\n.teal .accentHover:hover,\n.teal .accentHover a:hover,\n.teal .accentLink a,\n.teal .accentLink a:hover,\n.teal .accentLink a:visited,\n.teal a.accentLink,\n.teal a.accentLink:hover,\n.teal a.accentLink:visited {\n  color: #00aba9; }\n\n.teal .accentBorder {\n  border-color: #00aba9; }\n\n.teal .accentBorderBottom {\n  border-bottom-color: #00aba9; }\n\n.teal .accentBorderLeft {\n  border-left-color: #00aba9; }\n\n.teal .accentBorderRight {\n  border-right-color: #00aba9; }\n\n.teal .accentBorderTop {\n  border-top-color: #00aba9; }\n\n.yellow .accent,\n.yellow .accentBg,\n.yellow .accentBgHover:hover,\n.yellow .accentBgHover a:hover,\n.yellow .live-tile > div,\n.yellow .copy-tile > div,\n.yellow .live-tile > .face,\n.yellow .copy-tile > .face,\n.yellow .live-tile > .slide,\n.yellow .live-tile > .flip-back,\n.yellow .live-tile > .flip-front,\n.yellow .live-tile > .slide-back,\n.yellow .live-tile > .slide-front,\n.yellow .list-tile > div,\n.yellow .flip-list > li > div {\n  background-color: #d8c101; }\n\n.yellow .accentColor,\n.yellow .accentHover:hover,\n.yellow .accentHover a:hover,\n.yellow .accentLink a,\n.yellow .accentLink a:hover,\n.yellow .accentLink a:visited,\n.yellow a.accentLink,\n.yellow a.accentLink:hover,\n.yellow a.accentLink:visited {\n  color: #d8c101; }\n\n.yellow .accentBorder {\n  border-color: #d8c101; }\n\n.yellow .accentBorderBottom {\n  border-bottom-color: #d8c101; }\n\n.yellow .accentBorderLeft {\n  border-left-color: #d8c101; }\n\n.yellow .accentBorderRight {\n  border-right-color: #d8c101; }\n\n.yellow .accentBorderTop {\n  border-top-color: #d8c101; }\n\n.trans .accent,\n.trans .accentBg,\n.trans .accentBgHover:hover,\n.trans .accentBgHover a:hover,\n.trans .live-tile > div,\n.trans .copy-tile > div,\n.trans .live-tile > .face,\n.trans .copy-tile > .face,\n.trans .live-tile > .slide,\n.trans .live-tile > .flip-back,\n.trans .live-tile > .flip-front,\n.trans .live-tile > .slide-back,\n.trans .live-tile > .slide-front,\n.trans .list-tile > div,\n.trans .flip-list > li > div {\n  background-color: transparent; }\n\n.trans .accentColor,\n.trans .accentHover:hover,\n.trans .accentHover a:hover,\n.trans .accentLink a,\n.trans .accentLink a:hover,\n.trans .accentLink a:visited,\n.trans a.accentLink,\n.trans a.accentLink:hover,\n.trans a.accentLink:visited {\n  color: transparent; }\n\n.trans .accentBorder {\n  border-color: transparent; }\n\n.trans .accentBorderBottom {\n  border-bottom-color: transparent; }\n\n.trans .accentBorderLeft {\n  border-left-color: transparent; }\n\n.trans .accentBorderRight {\n  border-right-color: transparent; }\n\n.trans .accentBorderTop {\n  border-top-color: transparent; }\n\n.white .accent,\n.white .accentBg,\n.white .accentBgHover:hover,\n.white .accentBgHover a:hover,\n.white .live-tile > div,\n.white .copy-tile > div,\n.white .live-tile > .face,\n.white .copy-tile > .face,\n.white .live-tile > .slide,\n.white .live-tile > .flip-back,\n.white .live-tile > .flip-front,\n.white .live-tile > .slide-back,\n.white .live-tile > .slide-front,\n.white .list-tile > div,\n.white .flip-list > li > div {\n  background-color: #ffffff; }\n\n.white .accentColor,\n.white .accentHover:hover,\n.white .accentHover a:hover,\n.white .accentLink a,\n.white .accentLink a:hover,\n.white .accentLink a:visited,\n.white a.accentLink,\n.white a.accentLink:hover,\n.white a.accentLink:visited {\n  color: #ffffff; }\n\n.white .accentBorder {\n  border-color: #ffffff; }\n\n.white .accentBorderBottom {\n  border-bottom-color: #ffffff; }\n\n.white .accentBorderLeft {\n  border-left-color: #ffffff; }\n\n.white .accentBorderRight {\n  border-right-color: #ffffff; }\n\n.white .accentBorderTop {\n  border-top-color: #ffffff; }\n\n.black .accent,\n.black .accentBg,\n.black .accentBgHover:hover,\n.black .accentBgHover a:hover,\n.black .live-tile > div,\n.black .copy-tile > div,\n.black .live-tile > .face,\n.black .copy-tile > .face,\n.black .live-tile > .slide,\n.black .live-tile > .flip-back,\n.black .live-tile > .flip-front,\n.black .live-tile > .slide-back,\n.black .live-tile > .slide-front,\n.black .list-tile > div,\n.black .flip-list > li > div {\n  background-color: #000000; }\n\n.black .accentColor,\n.black .accentHover:hover,\n.black .accentHover a:hover,\n.black .accentLink a,\n.black .accentLink a:hover,\n.black .accentLink a:visited,\n.black a.accentLink,\n.black a.accentLink:hover,\n.black a.accentLink:visited {\n  color: #000000; }\n\n.black .accentBorder {\n  border-color: #000000; }\n\n.black .accentBorderBottom {\n  border-bottom-color: #000000; }\n\n.black .accentBorderLeft {\n  border-left-color: #000000; }\n\n.black .accentBorderRight {\n  border-right-color: #000000; }\n\n.black .accentBorderTop {\n  border-top-color: #000000; }\n\n/* Local style overrides */\nhtml body .amber.accent,\nhtml body .amber.live-tile > .accent,\nhtml body .amber.list-tile > .accent,\nhtml body .amber.copy-tile > .accent,\nhtml body .amber.live-tile > div,\nhtml body .amber.copy-tile > div,\nhtml body .amber.list-tile > div,\nhtml body .amber.live-tile > .face,\nhtml body .amber.list-tile > .face,\nhtml body .amber.copy-tile > .face,\nhtml body .amber.live-tile > .slide,\nhtml body .amber.live-tile > .flip-back,\nhtml body .amber.live-tile > .flip-front,\nhtml body .amber.live-tile > .slide-back,\nhtml body .amber.live-tile > .slide-front,\nhtml body .amber.flip-list > li > .accent,\nhtml body .amber.flip-list > li > .flip-back,\nhtml body .amber.flip-list > li > .flip-front,\nhtml body .amber.slide.accent,\nhtml body .amber.slide-front.accent,\nhtml body .amber.slide-back.accent,\nhtml body .amber.flip-front.accent,\nhtml body .amber.flip-back.accent {\n  background-color: #f1a30b; }\n\nhtml body .amber.accentColor,\nhtml body .amber.accentHover:hover,\nhtml body .amber.accentHover a:hover,\nhtml body .amber.accentLink a,\nhtml body .amber.accentLink a:hover,\nhtml body .amber.accentLink a:visited,\na.accentLinkhtml body .amber,\na.accentLinkhtml body .amber:hover,\na.accentLinkhtml body .amber:visited {\n  color: #f1a30b; }\n\nhtml body .amber.accentBorder {\n  border-color: #f1a30b; }\n\nhtml body .amber.accentBorderBottom {\n  border-bottom-color: #f1a30b; }\n\nhtml body .amber.accentBorderLeft {\n  border-left-color: #f1a30b; }\n\nhtml body .amber.accentBorderRight {\n  border-right-color: #f1a30b; }\n\nhtml body .amber.accentBorderTop {\n  border-top-color: #f1a30b; }\n\nhtml body .blue.accent,\nhtml body .blue.live-tile > .accent,\nhtml body .blue.list-tile > .accent,\nhtml body .blue.copy-tile > .accent,\nhtml body .blue.live-tile > div,\nhtml body .blue.copy-tile > div,\nhtml body .blue.list-tile > div,\nhtml body .blue.live-tile > .face,\nhtml body .blue.list-tile > .face,\nhtml body .blue.copy-tile > .face,\nhtml body .blue.live-tile > .slide,\nhtml body .blue.live-tile > .flip-back,\nhtml body .blue.live-tile > .flip-front,\nhtml body .blue.live-tile > .slide-back,\nhtml body .blue.live-tile > .slide-front,\nhtml body .blue.flip-list > li > .accent,\nhtml body .blue.flip-list > li > .flip-back,\nhtml body .blue.flip-list > li > .flip-front,\nhtml body .blue.slide.accent,\nhtml body .blue.slide-front.accent,\nhtml body .blue.slide-back.accent,\nhtml body .blue.flip-front.accent,\nhtml body .blue.flip-back.accent {\n  background-color: #1ba1e2; }\n\nhtml body .blue.accentColor,\nhtml body .blue.accentHover:hover,\nhtml body .blue.accentHover a:hover,\nhtml body .blue.accentLink a,\nhtml body .blue.accentLink a:hover,\nhtml body .blue.accentLink a:visited,\na.accentLinkhtml body .blue,\na.accentLinkhtml body .blue:hover,\na.accentLinkhtml body .blue:visited {\n  color: #1ba1e2; }\n\nhtml body .blue.accentBorder {\n  border-color: #1ba1e2; }\n\nhtml body .blue.accentBorderBottom {\n  border-bottom-color: #1ba1e2; }\n\nhtml body .blue.accentBorderLeft {\n  border-left-color: #1ba1e2; }\n\nhtml body .blue.accentBorderRight {\n  border-right-color: #1ba1e2; }\n\nhtml body .blue.accentBorderTop {\n  border-top-color: #1ba1e2; }\n\nhtml body .brown.accent,\nhtml body .brown.live-tile > .accent,\nhtml body .brown.list-tile > .accent,\nhtml body .brown.copy-tile > .accent,\nhtml body .brown.live-tile > div,\nhtml body .brown.copy-tile > div,\nhtml body .brown.list-tile > div,\nhtml body .brown.live-tile > .face,\nhtml body .brown.list-tile > .face,\nhtml body .brown.copy-tile > .face,\nhtml body .brown.live-tile > .slide,\nhtml body .brown.live-tile > .flip-back,\nhtml body .brown.live-tile > .flip-front,\nhtml body .brown.live-tile > .slide-back,\nhtml body .brown.live-tile > .slide-front,\nhtml body .brown.flip-list > li > .accent,\nhtml body .brown.flip-list > li > .flip-back,\nhtml body .brown.flip-list > li > .flip-front,\nhtml body .brown.slide.accent,\nhtml body .brown.slide-front.accent,\nhtml body .brown.slide-back.accent,\nhtml body .brown.flip-front.accent,\nhtml body .brown.flip-back.accent {\n  background-color: #a05000; }\n\nhtml body .brown.accentColor,\nhtml body .brown.accentHover:hover,\nhtml body .brown.accentHover a:hover,\nhtml body .brown.accentLink a,\nhtml body .brown.accentLink a:hover,\nhtml body .brown.accentLink a:visited,\na.accentLinkhtml body .brown,\na.accentLinkhtml body .brown:hover,\na.accentLinkhtml body .brown:visited {\n  color: #a05000; }\n\nhtml body .brown.accentBorder {\n  border-color: #a05000; }\n\nhtml body .brown.accentBorderBottom {\n  border-bottom-color: #a05000; }\n\nhtml body .brown.accentBorderLeft {\n  border-left-color: #a05000; }\n\nhtml body .brown.accentBorderRight {\n  border-right-color: #a05000; }\n\nhtml body .brown.accentBorderTop {\n  border-top-color: #a05000; }\n\nhtml body .cobalt.accent,\nhtml body .cobalt.live-tile > .accent,\nhtml body .cobalt.list-tile > .accent,\nhtml body .cobalt.copy-tile > .accent,\nhtml body .cobalt.live-tile > div,\nhtml body .cobalt.copy-tile > div,\nhtml body .cobalt.list-tile > div,\nhtml body .cobalt.live-tile > .face,\nhtml body .cobalt.list-tile > .face,\nhtml body .cobalt.copy-tile > .face,\nhtml body .cobalt.live-tile > .slide,\nhtml body .cobalt.live-tile > .flip-back,\nhtml body .cobalt.live-tile > .flip-front,\nhtml body .cobalt.live-tile > .slide-back,\nhtml body .cobalt.live-tile > .slide-front,\nhtml body .cobalt.flip-list > li > .accent,\nhtml body .cobalt.flip-list > li > .flip-back,\nhtml body .cobalt.flip-list > li > .flip-front,\nhtml body .cobalt.slide.accent,\nhtml body .cobalt.slide-front.accent,\nhtml body .cobalt.slide-back.accent,\nhtml body .cobalt.flip-front.accent,\nhtml body .cobalt.flip-back.accent {\n  background-color: #0050ef; }\n\nhtml body .cobalt.accentColor,\nhtml body .cobalt.accentHover:hover,\nhtml body .cobalt.accentHover a:hover,\nhtml body .cobalt.accentLink a,\nhtml body .cobalt.accentLink a:hover,\nhtml body .cobalt.accentLink a:visited,\na.accentLinkhtml body .cobalt,\na.accentLinkhtml body .cobalt:hover,\na.accentLinkhtml body .cobalt:visited {\n  color: #0050ef; }\n\nhtml body .cobalt.accentBorder {\n  border-color: #0050ef; }\n\nhtml body .cobalt.accentBorderBottom {\n  border-bottom-color: #0050ef; }\n\nhtml body .cobalt.accentBorderLeft {\n  border-left-color: #0050ef; }\n\nhtml body .cobalt.accentBorderRight {\n  border-right-color: #0050ef; }\n\nhtml body .cobalt.accentBorderTop {\n  border-top-color: #0050ef; }\n\nhtml body .crimson.accent,\nhtml body .crimson.live-tile > .accent,\nhtml body .crimson.list-tile > .accent,\nhtml body .crimson.copy-tile > .accent,\nhtml body .crimson.live-tile > div,\nhtml body .crimson.copy-tile > div,\nhtml body .crimson.list-tile > div,\nhtml body .crimson.live-tile > .face,\nhtml body .crimson.list-tile > .face,\nhtml body .crimson.copy-tile > .face,\nhtml body .crimson.live-tile > .slide,\nhtml body .crimson.live-tile > .flip-back,\nhtml body .crimson.live-tile > .flip-front,\nhtml body .crimson.live-tile > .slide-back,\nhtml body .crimson.live-tile > .slide-front,\nhtml body .crimson.flip-list > li > .accent,\nhtml body .crimson.flip-list > li > .flip-back,\nhtml body .crimson.flip-list > li > .flip-front,\nhtml body .crimson.slide.accent,\nhtml body .crimson.slide-front.accent,\nhtml body .crimson.slide-back.accent,\nhtml body .crimson.flip-front.accent,\nhtml body .crimson.flip-back.accent {\n  background-color: #a20025; }\n\nhtml body .crimson.accentColor,\nhtml body .crimson.accentHover:hover,\nhtml body .crimson.accentHover a:hover,\nhtml body .crimson.accentLink a,\nhtml body .crimson.accentLink a:hover,\nhtml body .crimson.accentLink a:visited,\na.accentLinkhtml body .crimson,\na.accentLinkhtml body .crimson:hover,\na.accentLinkhtml body .crimson:visited {\n  color: #a20025; }\n\nhtml body .crimson.accentBorder {\n  border-color: #a20025; }\n\nhtml body .crimson.accentBorderBottom {\n  border-bottom-color: #a20025; }\n\nhtml body .crimson.accentBorderLeft {\n  border-left-color: #a20025; }\n\nhtml body .crimson.accentBorderRight {\n  border-right-color: #a20025; }\n\nhtml body .crimson.accentBorderTop {\n  border-top-color: #a20025; }\n\nhtml body .cyan.accent,\nhtml body .cyan.live-tile > .accent,\nhtml body .cyan.list-tile > .accent,\nhtml body .cyan.copy-tile > .accent,\nhtml body .cyan.live-tile > div,\nhtml body .cyan.copy-tile > div,\nhtml body .cyan.list-tile > div,\nhtml body .cyan.live-tile > .face,\nhtml body .cyan.list-tile > .face,\nhtml body .cyan.copy-tile > .face,\nhtml body .cyan.live-tile > .slide,\nhtml body .cyan.live-tile > .flip-back,\nhtml body .cyan.live-tile > .flip-front,\nhtml body .cyan.live-tile > .slide-back,\nhtml body .cyan.live-tile > .slide-front,\nhtml body .cyan.flip-list > li > .accent,\nhtml body .cyan.flip-list > li > .flip-back,\nhtml body .cyan.flip-list > li > .flip-front,\nhtml body .cyan.slide.accent,\nhtml body .cyan.slide-front.accent,\nhtml body .cyan.slide-back.accent,\nhtml body .cyan.flip-front.accent,\nhtml body .cyan.flip-back.accent {\n  background-color: #1ba0e1; }\n\nhtml body .cyan.accentColor,\nhtml body .cyan.accentHover:hover,\nhtml body .cyan.accentHover a:hover,\nhtml body .cyan.accentLink a,\nhtml body .cyan.accentLink a:hover,\nhtml body .cyan.accentLink a:visited,\na.accentLinkhtml body .cyan,\na.accentLinkhtml body .cyan:hover,\na.accentLinkhtml body .cyan:visited {\n  color: #1ba0e1; }\n\nhtml body .cyan.accentBorder {\n  border-color: #1ba0e1; }\n\nhtml body .cyan.accentBorderBottom {\n  border-bottom-color: #1ba0e1; }\n\nhtml body .cyan.accentBorderLeft {\n  border-left-color: #1ba0e1; }\n\nhtml body .cyan.accentBorderRight {\n  border-right-color: #1ba0e1; }\n\nhtml body .cyan.accentBorderTop {\n  border-top-color: #1ba0e1; }\n\nhtml body .emerald.accent,\nhtml body .emerald.live-tile > .accent,\nhtml body .emerald.list-tile > .accent,\nhtml body .emerald.copy-tile > .accent,\nhtml body .emerald.live-tile > div,\nhtml body .emerald.copy-tile > div,\nhtml body .emerald.list-tile > div,\nhtml body .emerald.live-tile > .face,\nhtml body .emerald.list-tile > .face,\nhtml body .emerald.copy-tile > .face,\nhtml body .emerald.live-tile > .slide,\nhtml body .emerald.live-tile > .flip-back,\nhtml body .emerald.live-tile > .flip-front,\nhtml body .emerald.live-tile > .slide-back,\nhtml body .emerald.live-tile > .slide-front,\nhtml body .emerald.flip-list > li > .accent,\nhtml body .emerald.flip-list > li > .flip-back,\nhtml body .emerald.flip-list > li > .flip-front,\nhtml body .emerald.slide.accent,\nhtml body .emerald.slide-front.accent,\nhtml body .emerald.slide-back.accent,\nhtml body .emerald.flip-front.accent,\nhtml body .emerald.flip-back.accent {\n  background-color: #008a00; }\n\nhtml body .emerald.accentColor,\nhtml body .emerald.accentHover:hover,\nhtml body .emerald.accentHover a:hover,\nhtml body .emerald.accentLink a,\nhtml body .emerald.accentLink a:hover,\nhtml body .emerald.accentLink a:visited,\na.accentLinkhtml body .emerald,\na.accentLinkhtml body .emerald:hover,\na.accentLinkhtml body .emerald:visited {\n  color: #008a00; }\n\nhtml body .emerald.accentBorder {\n  border-color: #008a00; }\n\nhtml body .emerald.accentBorderBottom {\n  border-bottom-color: #008a00; }\n\nhtml body .emerald.accentBorderLeft {\n  border-left-color: #008a00; }\n\nhtml body .emerald.accentBorderRight {\n  border-right-color: #008a00; }\n\nhtml body .emerald.accentBorderTop {\n  border-top-color: #008a00; }\n\nhtml body .green.accent,\nhtml body .green.live-tile > .accent,\nhtml body .green.list-tile > .accent,\nhtml body .green.copy-tile > .accent,\nhtml body .green.live-tile > div,\nhtml body .green.copy-tile > div,\nhtml body .green.list-tile > div,\nhtml body .green.live-tile > .face,\nhtml body .green.list-tile > .face,\nhtml body .green.copy-tile > .face,\nhtml body .green.live-tile > .slide,\nhtml body .green.live-tile > .flip-back,\nhtml body .green.live-tile > .flip-front,\nhtml body .green.live-tile > .slide-back,\nhtml body .green.live-tile > .slide-front,\nhtml body .green.flip-list > li > .accent,\nhtml body .green.flip-list > li > .flip-back,\nhtml body .green.flip-list > li > .flip-front,\nhtml body .green.slide.accent,\nhtml body .green.slide-front.accent,\nhtml body .green.slide-back.accent,\nhtml body .green.flip-front.accent,\nhtml body .green.flip-back.accent {\n  background-color: #339933; }\n\nhtml body .green.accentColor,\nhtml body .green.accentHover:hover,\nhtml body .green.accentHover a:hover,\nhtml body .green.accentLink a,\nhtml body .green.accentLink a:hover,\nhtml body .green.accentLink a:visited,\na.accentLinkhtml body .green,\na.accentLinkhtml body .green:hover,\na.accentLinkhtml body .green:visited {\n  color: #339933; }\n\nhtml body .green.accentBorder {\n  border-color: #339933; }\n\nhtml body .green.accentBorderBottom {\n  border-bottom-color: #339933; }\n\nhtml body .green.accentBorderLeft {\n  border-left-color: #339933; }\n\nhtml body .green.accentBorderRight {\n  border-right-color: #339933; }\n\nhtml body .green.accentBorderTop {\n  border-top-color: #339933; }\n\nhtml body .indigo.accent,\nhtml body .indigo.live-tile > .accent,\nhtml body .indigo.list-tile > .accent,\nhtml body .indigo.copy-tile > .accent,\nhtml body .indigo.live-tile > div,\nhtml body .indigo.copy-tile > div,\nhtml body .indigo.list-tile > div,\nhtml body .indigo.live-tile > .face,\nhtml body .indigo.list-tile > .face,\nhtml body .indigo.copy-tile > .face,\nhtml body .indigo.live-tile > .slide,\nhtml body .indigo.live-tile > .flip-back,\nhtml body .indigo.live-tile > .flip-front,\nhtml body .indigo.live-tile > .slide-back,\nhtml body .indigo.live-tile > .slide-front,\nhtml body .indigo.flip-list > li > .accent,\nhtml body .indigo.flip-list > li > .flip-back,\nhtml body .indigo.flip-list > li > .flip-front,\nhtml body .indigo.slide.accent,\nhtml body .indigo.slide-front.accent,\nhtml body .indigo.slide-back.accent,\nhtml body .indigo.flip-front.accent,\nhtml body .indigo.flip-back.accent {\n  background-color: #6a00ff; }\n\nhtml body .indigo.accentColor,\nhtml body .indigo.accentHover:hover,\nhtml body .indigo.accentHover a:hover,\nhtml body .indigo.accentLink a,\nhtml body .indigo.accentLink a:hover,\nhtml body .indigo.accentLink a:visited,\na.accentLinkhtml body .indigo,\na.accentLinkhtml body .indigo:hover,\na.accentLinkhtml body .indigo:visited {\n  color: #6a00ff; }\n\nhtml body .indigo.accentBorder {\n  border-color: #6a00ff; }\n\nhtml body .indigo.accentBorderBottom {\n  border-bottom-color: #6a00ff; }\n\nhtml body .indigo.accentBorderLeft {\n  border-left-color: #6a00ff; }\n\nhtml body .indigo.accentBorderRight {\n  border-right-color: #6a00ff; }\n\nhtml body .indigo.accentBorderTop {\n  border-top-color: #6a00ff; }\n\nhtml body .lime.accent,\nhtml body .lime.live-tile > .accent,\nhtml body .lime.list-tile > .accent,\nhtml body .lime.copy-tile > .accent,\nhtml body .lime.live-tile > div,\nhtml body .lime.copy-tile > div,\nhtml body .lime.list-tile > div,\nhtml body .lime.live-tile > .face,\nhtml body .lime.list-tile > .face,\nhtml body .lime.copy-tile > .face,\nhtml body .lime.live-tile > .slide,\nhtml body .lime.live-tile > .flip-back,\nhtml body .lime.live-tile > .flip-front,\nhtml body .lime.live-tile > .slide-back,\nhtml body .lime.live-tile > .slide-front,\nhtml body .lime.flip-list > li > .accent,\nhtml body .lime.flip-list > li > .flip-back,\nhtml body .lime.flip-list > li > .flip-front,\nhtml body .lime.slide.accent,\nhtml body .lime.slide-front.accent,\nhtml body .lime.slide-back.accent,\nhtml body .lime.flip-front.accent,\nhtml body .lime.flip-back.accent {\n  background-color: #a2c139; }\n\nhtml body .lime.accentColor,\nhtml body .lime.accentHover:hover,\nhtml body .lime.accentHover a:hover,\nhtml body .lime.accentLink a,\nhtml body .lime.accentLink a:hover,\nhtml body .lime.accentLink a:visited,\na.accentLinkhtml body .lime,\na.accentLinkhtml body .lime:hover,\na.accentLinkhtml body .lime:visited {\n  color: #a2c139; }\n\nhtml body .lime.accentBorder {\n  border-color: #a2c139; }\n\nhtml body .lime.accentBorderBottom {\n  border-bottom-color: #a2c139; }\n\nhtml body .lime.accentBorderLeft {\n  border-left-color: #a2c139; }\n\nhtml body .lime.accentBorderRight {\n  border-right-color: #a2c139; }\n\nhtml body .lime.accentBorderTop {\n  border-top-color: #a2c139; }\n\nhtml body .magenta.accent,\nhtml body .magenta.live-tile > .accent,\nhtml body .magenta.list-tile > .accent,\nhtml body .magenta.copy-tile > .accent,\nhtml body .magenta.live-tile > div,\nhtml body .magenta.copy-tile > div,\nhtml body .magenta.list-tile > div,\nhtml body .magenta.live-tile > .face,\nhtml body .magenta.list-tile > .face,\nhtml body .magenta.copy-tile > .face,\nhtml body .magenta.live-tile > .slide,\nhtml body .magenta.live-tile > .flip-back,\nhtml body .magenta.live-tile > .flip-front,\nhtml body .magenta.live-tile > .slide-back,\nhtml body .magenta.live-tile > .slide-front,\nhtml body .magenta.flip-list > li > .accent,\nhtml body .magenta.flip-list > li > .flip-back,\nhtml body .magenta.flip-list > li > .flip-front,\nhtml body .magenta.slide.accent,\nhtml body .magenta.slide-front.accent,\nhtml body .magenta.slide-back.accent,\nhtml body .magenta.flip-front.accent,\nhtml body .magenta.flip-back.accent {\n  background-color: #d80073; }\n\nhtml body .magenta.accentColor,\nhtml body .magenta.accentHover:hover,\nhtml body .magenta.accentHover a:hover,\nhtml body .magenta.accentLink a,\nhtml body .magenta.accentLink a:hover,\nhtml body .magenta.accentLink a:visited,\na.accentLinkhtml body .magenta,\na.accentLinkhtml body .magenta:hover,\na.accentLinkhtml body .magenta:visited {\n  color: #d80073; }\n\nhtml body .magenta.accentBorder {\n  border-color: #d80073; }\n\nhtml body .magenta.accentBorderBottom {\n  border-bottom-color: #d80073; }\n\nhtml body .magenta.accentBorderLeft {\n  border-left-color: #d80073; }\n\nhtml body .magenta.accentBorderRight {\n  border-right-color: #d80073; }\n\nhtml body .magenta.accentBorderTop {\n  border-top-color: #d80073; }\n\nhtml body .mango.accent,\nhtml body .mango.live-tile > .accent,\nhtml body .mango.list-tile > .accent,\nhtml body .mango.copy-tile > .accent,\nhtml body .mango.live-tile > div,\nhtml body .mango.copy-tile > div,\nhtml body .mango.list-tile > div,\nhtml body .mango.live-tile > .face,\nhtml body .mango.list-tile > .face,\nhtml body .mango.copy-tile > .face,\nhtml body .mango.live-tile > .slide,\nhtml body .mango.live-tile > .flip-back,\nhtml body .mango.live-tile > .flip-front,\nhtml body .mango.live-tile > .slide-back,\nhtml body .mango.live-tile > .slide-front,\nhtml body .mango.flip-list > li > .accent,\nhtml body .mango.flip-list > li > .flip-back,\nhtml body .mango.flip-list > li > .flip-front,\nhtml body .mango.slide.accent,\nhtml body .mango.slide-front.accent,\nhtml body .mango.slide-back.accent,\nhtml body .mango.flip-front.accent,\nhtml body .mango.flip-back.accent {\n  background-color: #f09609; }\n\nhtml body .mango.accentColor,\nhtml body .mango.accentHover:hover,\nhtml body .mango.accentHover a:hover,\nhtml body .mango.accentLink a,\nhtml body .mango.accentLink a:hover,\nhtml body .mango.accentLink a:visited,\na.accentLinkhtml body .mango,\na.accentLinkhtml body .mango:hover,\na.accentLinkhtml body .mango:visited {\n  color: #f09609; }\n\nhtml body .mango.accentBorder {\n  border-color: #f09609; }\n\nhtml body .mango.accentBorderBottom {\n  border-bottom-color: #f09609; }\n\nhtml body .mango.accentBorderLeft {\n  border-left-color: #f09609; }\n\nhtml body .mango.accentBorderRight {\n  border-right-color: #f09609; }\n\nhtml body .mango.accentBorderTop {\n  border-top-color: #f09609; }\n\nhtml body .mauve.accent,\nhtml body .mauve.live-tile > .accent,\nhtml body .mauve.list-tile > .accent,\nhtml body .mauve.copy-tile > .accent,\nhtml body .mauve.live-tile > div,\nhtml body .mauve.copy-tile > div,\nhtml body .mauve.list-tile > div,\nhtml body .mauve.live-tile > .face,\nhtml body .mauve.list-tile > .face,\nhtml body .mauve.copy-tile > .face,\nhtml body .mauve.live-tile > .slide,\nhtml body .mauve.live-tile > .flip-back,\nhtml body .mauve.live-tile > .flip-front,\nhtml body .mauve.live-tile > .slide-back,\nhtml body .mauve.live-tile > .slide-front,\nhtml body .mauve.flip-list > li > .accent,\nhtml body .mauve.flip-list > li > .flip-back,\nhtml body .mauve.flip-list > li > .flip-front,\nhtml body .mauve.slide.accent,\nhtml body .mauve.slide-front.accent,\nhtml body .mauve.slide-back.accent,\nhtml body .mauve.flip-front.accent,\nhtml body .mauve.flip-back.accent {\n  background-color: #765f89; }\n\nhtml body .mauve.accentColor,\nhtml body .mauve.accentHover:hover,\nhtml body .mauve.accentHover a:hover,\nhtml body .mauve.accentLink a,\nhtml body .mauve.accentLink a:hover,\nhtml body .mauve.accentLink a:visited,\na.accentLinkhtml body .mauve,\na.accentLinkhtml body .mauve:hover,\na.accentLinkhtml body .mauve:visited {\n  color: #765f89; }\n\nhtml body .mauve.accentBorder {\n  border-color: #765f89; }\n\nhtml body .mauve.accentBorderBottom {\n  border-bottom-color: #765f89; }\n\nhtml body .mauve.accentBorderLeft {\n  border-left-color: #765f89; }\n\nhtml body .mauve.accentBorderRight {\n  border-right-color: #765f89; }\n\nhtml body .mauve.accentBorderTop {\n  border-top-color: #765f89; }\n\nhtml body .olive.accent,\nhtml body .olive.live-tile > .accent,\nhtml body .olive.list-tile > .accent,\nhtml body .olive.copy-tile > .accent,\nhtml body .olive.live-tile > div,\nhtml body .olive.copy-tile > div,\nhtml body .olive.list-tile > div,\nhtml body .olive.live-tile > .face,\nhtml body .olive.list-tile > .face,\nhtml body .olive.copy-tile > .face,\nhtml body .olive.live-tile > .slide,\nhtml body .olive.live-tile > .flip-back,\nhtml body .olive.live-tile > .flip-front,\nhtml body .olive.live-tile > .slide-back,\nhtml body .olive.live-tile > .slide-front,\nhtml body .olive.flip-list > li > .accent,\nhtml body .olive.flip-list > li > .flip-back,\nhtml body .olive.flip-list > li > .flip-front,\nhtml body .olive.slide.accent,\nhtml body .olive.slide-front.accent,\nhtml body .olive.slide-back.accent,\nhtml body .olive.flip-front.accent,\nhtml body .olive.flip-back.accent {\n  background-color: #6d8764; }\n\nhtml body .olive.accentColor,\nhtml body .olive.accentHover:hover,\nhtml body .olive.accentHover a:hover,\nhtml body .olive.accentLink a,\nhtml body .olive.accentLink a:hover,\nhtml body .olive.accentLink a:visited,\na.accentLinkhtml body .olive,\na.accentLinkhtml body .olive:hover,\na.accentLinkhtml body .olive:visited {\n  color: #6d8764; }\n\nhtml body .olive.accentBorder {\n  border-color: #6d8764; }\n\nhtml body .olive.accentBorderBottom {\n  border-bottom-color: #6d8764; }\n\nhtml body .olive.accentBorderLeft {\n  border-left-color: #6d8764; }\n\nhtml body .olive.accentBorderRight {\n  border-right-color: #6d8764; }\n\nhtml body .olive.accentBorderTop {\n  border-top-color: #6d8764; }\n\nhtml body .orange.accent,\nhtml body .orange.live-tile > .accent,\nhtml body .orange.list-tile > .accent,\nhtml body .orange.copy-tile > .accent,\nhtml body .orange.live-tile > div,\nhtml body .orange.copy-tile > div,\nhtml body .orange.list-tile > div,\nhtml body .orange.live-tile > .face,\nhtml body .orange.list-tile > .face,\nhtml body .orange.copy-tile > .face,\nhtml body .orange.live-tile > .slide,\nhtml body .orange.live-tile > .flip-back,\nhtml body .orange.live-tile > .flip-front,\nhtml body .orange.live-tile > .slide-back,\nhtml body .orange.live-tile > .slide-front,\nhtml body .orange.flip-list > li > .accent,\nhtml body .orange.flip-list > li > .flip-back,\nhtml body .orange.flip-list > li > .flip-front,\nhtml body .orange.slide.accent,\nhtml body .orange.slide-front.accent,\nhtml body .orange.slide-back.accent,\nhtml body .orange.flip-front.accent,\nhtml body .orange.flip-back.accent {\n  background-color: #fa6801; }\n\nhtml body .orange.accentColor,\nhtml body .orange.accentHover:hover,\nhtml body .orange.accentHover a:hover,\nhtml body .orange.accentLink a,\nhtml body .orange.accentLink a:hover,\nhtml body .orange.accentLink a:visited,\na.accentLinkhtml body .orange,\na.accentLinkhtml body .orange:hover,\na.accentLinkhtml body .orange:visited {\n  color: #fa6801; }\n\nhtml body .orange.accentBorder {\n  border-color: #fa6801; }\n\nhtml body .orange.accentBorderBottom {\n  border-bottom-color: #fa6801; }\n\nhtml body .orange.accentBorderLeft {\n  border-left-color: #fa6801; }\n\nhtml body .orange.accentBorderRight {\n  border-right-color: #fa6801; }\n\nhtml body .orange.accentBorderTop {\n  border-top-color: #fa6801; }\n\nhtml body .pink.accent,\nhtml body .pink.live-tile > .accent,\nhtml body .pink.list-tile > .accent,\nhtml body .pink.copy-tile > .accent,\nhtml body .pink.live-tile > div,\nhtml body .pink.copy-tile > div,\nhtml body .pink.list-tile > div,\nhtml body .pink.live-tile > .face,\nhtml body .pink.list-tile > .face,\nhtml body .pink.copy-tile > .face,\nhtml body .pink.live-tile > .slide,\nhtml body .pink.live-tile > .flip-back,\nhtml body .pink.live-tile > .flip-front,\nhtml body .pink.live-tile > .slide-back,\nhtml body .pink.live-tile > .slide-front,\nhtml body .pink.flip-list > li > .accent,\nhtml body .pink.flip-list > li > .flip-back,\nhtml body .pink.flip-list > li > .flip-front,\nhtml body .pink.slide.accent,\nhtml body .pink.slide-front.accent,\nhtml body .pink.slide-back.accent,\nhtml body .pink.flip-front.accent,\nhtml body .pink.flip-back.accent {\n  background-color: #e671b8; }\n\nhtml body .pink.accentColor,\nhtml body .pink.accentHover:hover,\nhtml body .pink.accentHover a:hover,\nhtml body .pink.accentLink a,\nhtml body .pink.accentLink a:hover,\nhtml body .pink.accentLink a:visited,\na.accentLinkhtml body .pink,\na.accentLinkhtml body .pink:hover,\na.accentLinkhtml body .pink:visited {\n  color: #e671b8; }\n\nhtml body .pink.accentBorder {\n  border-color: #e671b8; }\n\nhtml body .pink.accentBorderBottom {\n  border-bottom-color: #e671b8; }\n\nhtml body .pink.accentBorderLeft {\n  border-left-color: #e671b8; }\n\nhtml body .pink.accentBorderRight {\n  border-right-color: #e671b8; }\n\nhtml body .pink.accentBorderTop {\n  border-top-color: #e671b8; }\n\nhtml body .purple.accent,\nhtml body .purple.live-tile > .accent,\nhtml body .purple.list-tile > .accent,\nhtml body .purple.copy-tile > .accent,\nhtml body .purple.live-tile > div,\nhtml body .purple.copy-tile > div,\nhtml body .purple.list-tile > div,\nhtml body .purple.live-tile > .face,\nhtml body .purple.list-tile > .face,\nhtml body .purple.copy-tile > .face,\nhtml body .purple.live-tile > .slide,\nhtml body .purple.live-tile > .flip-back,\nhtml body .purple.live-tile > .flip-front,\nhtml body .purple.live-tile > .slide-back,\nhtml body .purple.live-tile > .slide-front,\nhtml body .purple.flip-list > li > .accent,\nhtml body .purple.flip-list > li > .flip-back,\nhtml body .purple.flip-list > li > .flip-front,\nhtml body .purple.slide.accent,\nhtml body .purple.slide-front.accent,\nhtml body .purple.slide-back.accent,\nhtml body .purple.flip-front.accent,\nhtml body .purple.flip-back.accent {\n  background-color: #a200ff; }\n\nhtml body .purple.accentColor,\nhtml body .purple.accentHover:hover,\nhtml body .purple.accentHover a:hover,\nhtml body .purple.accentLink a,\nhtml body .purple.accentLink a:hover,\nhtml body .purple.accentLink a:visited,\na.accentLinkhtml body .purple,\na.accentLinkhtml body .purple:hover,\na.accentLinkhtml body .purple:visited {\n  color: #a200ff; }\n\nhtml body .purple.accentBorder {\n  border-color: #a200ff; }\n\nhtml body .purple.accentBorderBottom {\n  border-bottom-color: #a200ff; }\n\nhtml body .purple.accentBorderLeft {\n  border-left-color: #a200ff; }\n\nhtml body .purple.accentBorderRight {\n  border-right-color: #a200ff; }\n\nhtml body .purple.accentBorderTop {\n  border-top-color: #a200ff; }\n\nhtml body .violet.accent,\nhtml body .violet.live-tile > .accent,\nhtml body .violet.list-tile > .accent,\nhtml body .violet.copy-tile > .accent,\nhtml body .violet.live-tile > div,\nhtml body .violet.copy-tile > div,\nhtml body .violet.list-tile > div,\nhtml body .violet.live-tile > .face,\nhtml body .violet.list-tile > .face,\nhtml body .violet.copy-tile > .face,\nhtml body .violet.live-tile > .slide,\nhtml body .violet.live-tile > .flip-back,\nhtml body .violet.live-tile > .flip-front,\nhtml body .violet.live-tile > .slide-back,\nhtml body .violet.live-tile > .slide-front,\nhtml body .violet.flip-list > li > .accent,\nhtml body .violet.flip-list > li > .flip-back,\nhtml body .violet.flip-list > li > .flip-front,\nhtml body .violet.slide.accent,\nhtml body .violet.slide-front.accent,\nhtml body .violet.slide-back.accent,\nhtml body .violet.flip-front.accent,\nhtml body .violet.flip-back.accent {\n  background-color: #a200ff; }\n\nhtml body .violet.accentColor,\nhtml body .violet.accentHover:hover,\nhtml body .violet.accentHover a:hover,\nhtml body .violet.accentLink a,\nhtml body .violet.accentLink a:hover,\nhtml body .violet.accentLink a:visited,\na.accentLinkhtml body .violet,\na.accentLinkhtml body .violet:hover,\na.accentLinkhtml body .violet:visited {\n  color: #a200ff; }\n\nhtml body .violet.accentBorder {\n  border-color: #a200ff; }\n\nhtml body .violet.accentBorderBottom {\n  border-bottom-color: #a200ff; }\n\nhtml body .violet.accentBorderLeft {\n  border-left-color: #a200ff; }\n\nhtml body .violet.accentBorderRight {\n  border-right-color: #a200ff; }\n\nhtml body .violet.accentBorderTop {\n  border-top-color: #a200ff; }\n\nhtml body .red.accent,\nhtml body .red.live-tile > .accent,\nhtml body .red.list-tile > .accent,\nhtml body .red.copy-tile > .accent,\nhtml body .red.live-tile > div,\nhtml body .red.copy-tile > div,\nhtml body .red.list-tile > div,\nhtml body .red.live-tile > .face,\nhtml body .red.list-tile > .face,\nhtml body .red.copy-tile > .face,\nhtml body .red.live-tile > .slide,\nhtml body .red.live-tile > .flip-back,\nhtml body .red.live-tile > .flip-front,\nhtml body .red.live-tile > .slide-back,\nhtml body .red.live-tile > .slide-front,\nhtml body .red.flip-list > li > .accent,\nhtml body .red.flip-list > li > .flip-back,\nhtml body .red.flip-list > li > .flip-front,\nhtml body .red.slide.accent,\nhtml body .red.slide-front.accent,\nhtml body .red.slide-back.accent,\nhtml body .red.flip-front.accent,\nhtml body .red.flip-back.accent {\n  background-color: #e51400; }\n\nhtml body .red.accentColor,\nhtml body .red.accentHover:hover,\nhtml body .red.accentHover a:hover,\nhtml body .red.accentLink a,\nhtml body .red.accentLink a:hover,\nhtml body .red.accentLink a:visited,\na.accentLinkhtml body .red,\na.accentLinkhtml body .red:hover,\na.accentLinkhtml body .red:visited {\n  color: #e51400; }\n\nhtml body .red.accentBorder {\n  border-color: #e51400; }\n\nhtml body .red.accentBorderBottom {\n  border-bottom-color: #e51400; }\n\nhtml body .red.accentBorderLeft {\n  border-left-color: #e51400; }\n\nhtml body .red.accentBorderRight {\n  border-right-color: #e51400; }\n\nhtml body .red.accentBorderTop {\n  border-top-color: #e51400; }\n\nhtml body .sienna.accent,\nhtml body .sienna.live-tile > .accent,\nhtml body .sienna.list-tile > .accent,\nhtml body .sienna.copy-tile > .accent,\nhtml body .sienna.live-tile > div,\nhtml body .sienna.copy-tile > div,\nhtml body .sienna.list-tile > div,\nhtml body .sienna.live-tile > .face,\nhtml body .sienna.list-tile > .face,\nhtml body .sienna.copy-tile > .face,\nhtml body .sienna.live-tile > .slide,\nhtml body .sienna.live-tile > .flip-back,\nhtml body .sienna.live-tile > .flip-front,\nhtml body .sienna.live-tile > .slide-back,\nhtml body .sienna.live-tile > .slide-front,\nhtml body .sienna.flip-list > li > .accent,\nhtml body .sienna.flip-list > li > .flip-back,\nhtml body .sienna.flip-list > li > .flip-front,\nhtml body .sienna.slide.accent,\nhtml body .sienna.slide-front.accent,\nhtml body .sienna.slide-back.accent,\nhtml body .sienna.flip-front.accent,\nhtml body .sienna.flip-back.accent {\n  background-color: #7b3a3e; }\n\nhtml body .sienna.accentColor,\nhtml body .sienna.accentHover:hover,\nhtml body .sienna.accentHover a:hover,\nhtml body .sienna.accentLink a,\nhtml body .sienna.accentLink a:hover,\nhtml body .sienna.accentLink a:visited,\na.accentLinkhtml body .sienna,\na.accentLinkhtml body .sienna:hover,\na.accentLinkhtml body .sienna:visited {\n  color: #7b3a3e; }\n\nhtml body .sienna.accentBorder {\n  border-color: #7b3a3e; }\n\nhtml body .sienna.accentBorderBottom {\n  border-bottom-color: #7b3a3e; }\n\nhtml body .sienna.accentBorderLeft {\n  border-left-color: #7b3a3e; }\n\nhtml body .sienna.accentBorderRight {\n  border-right-color: #7b3a3e; }\n\nhtml body .sienna.accentBorderTop {\n  border-top-color: #7b3a3e; }\n\nhtml body .steel.accent,\nhtml body .steel.live-tile > .accent,\nhtml body .steel.list-tile > .accent,\nhtml body .steel.copy-tile > .accent,\nhtml body .steel.live-tile > div,\nhtml body .steel.copy-tile > div,\nhtml body .steel.list-tile > div,\nhtml body .steel.live-tile > .face,\nhtml body .steel.list-tile > .face,\nhtml body .steel.copy-tile > .face,\nhtml body .steel.live-tile > .slide,\nhtml body .steel.live-tile > .flip-back,\nhtml body .steel.live-tile > .flip-front,\nhtml body .steel.live-tile > .slide-back,\nhtml body .steel.live-tile > .slide-front,\nhtml body .steel.flip-list > li > .accent,\nhtml body .steel.flip-list > li > .flip-back,\nhtml body .steel.flip-list > li > .flip-front,\nhtml body .steel.slide.accent,\nhtml body .steel.slide-front.accent,\nhtml body .steel.slide-back.accent,\nhtml body .steel.flip-front.accent,\nhtml body .steel.flip-back.accent {\n  background-color: #657688; }\n\nhtml body .steel.accentColor,\nhtml body .steel.accentHover:hover,\nhtml body .steel.accentHover a:hover,\nhtml body .steel.accentLink a,\nhtml body .steel.accentLink a:hover,\nhtml body .steel.accentLink a:visited,\na.accentLinkhtml body .steel,\na.accentLinkhtml body .steel:hover,\na.accentLinkhtml body .steel:visited {\n  color: #657688; }\n\nhtml body .steel.accentBorder {\n  border-color: #657688; }\n\nhtml body .steel.accentBorderBottom {\n  border-bottom-color: #657688; }\n\nhtml body .steel.accentBorderLeft {\n  border-left-color: #657688; }\n\nhtml body .steel.accentBorderRight {\n  border-right-color: #657688; }\n\nhtml body .steel.accentBorderTop {\n  border-top-color: #657688; }\n\nhtml body .teal.accent,\nhtml body .teal.live-tile > .accent,\nhtml body .teal.list-tile > .accent,\nhtml body .teal.copy-tile > .accent,\nhtml body .teal.live-tile > div,\nhtml body .teal.copy-tile > div,\nhtml body .teal.list-tile > div,\nhtml body .teal.live-tile > .face,\nhtml body .teal.list-tile > .face,\nhtml body .teal.copy-tile > .face,\nhtml body .teal.live-tile > .slide,\nhtml body .teal.live-tile > .flip-back,\nhtml body .teal.live-tile > .flip-front,\nhtml body .teal.live-tile > .slide-back,\nhtml body .teal.live-tile > .slide-front,\nhtml body .teal.flip-list > li > .accent,\nhtml body .teal.flip-list > li > .flip-back,\nhtml body .teal.flip-list > li > .flip-front,\nhtml body .teal.slide.accent,\nhtml body .teal.slide-front.accent,\nhtml body .teal.slide-back.accent,\nhtml body .teal.flip-front.accent,\nhtml body .teal.flip-back.accent {\n  background-color: #00aba9; }\n\nhtml body .teal.accentColor,\nhtml body .teal.accentHover:hover,\nhtml body .teal.accentHover a:hover,\nhtml body .teal.accentLink a,\nhtml body .teal.accentLink a:hover,\nhtml body .teal.accentLink a:visited,\na.accentLinkhtml body .teal,\na.accentLinkhtml body .teal:hover,\na.accentLinkhtml body .teal:visited {\n  color: #00aba9; }\n\nhtml body .teal.accentBorder {\n  border-color: #00aba9; }\n\nhtml body .teal.accentBorderBottom {\n  border-bottom-color: #00aba9; }\n\nhtml body .teal.accentBorderLeft {\n  border-left-color: #00aba9; }\n\nhtml body .teal.accentBorderRight {\n  border-right-color: #00aba9; }\n\nhtml body .teal.accentBorderTop {\n  border-top-color: #00aba9; }\n\nhtml body .yellow.accent,\nhtml body .yellow.live-tile > .accent,\nhtml body .yellow.list-tile > .accent,\nhtml body .yellow.copy-tile > .accent,\nhtml body .yellow.live-tile > div,\nhtml body .yellow.copy-tile > div,\nhtml body .yellow.list-tile > div,\nhtml body .yellow.live-tile > .face,\nhtml body .yellow.list-tile > .face,\nhtml body .yellow.copy-tile > .face,\nhtml body .yellow.live-tile > .slide,\nhtml body .yellow.live-tile > .flip-back,\nhtml body .yellow.live-tile > .flip-front,\nhtml body .yellow.live-tile > .slide-back,\nhtml body .yellow.live-tile > .slide-front,\nhtml body .yellow.flip-list > li > .accent,\nhtml body .yellow.flip-list > li > .flip-back,\nhtml body .yellow.flip-list > li > .flip-front,\nhtml body .yellow.slide.accent,\nhtml body .yellow.slide-front.accent,\nhtml body .yellow.slide-back.accent,\nhtml body .yellow.flip-front.accent,\nhtml body .yellow.flip-back.accent {\n  background-color: #d8c101; }\n\nhtml body .yellow.accentColor,\nhtml body .yellow.accentHover:hover,\nhtml body .yellow.accentHover a:hover,\nhtml body .yellow.accentLink a,\nhtml body .yellow.accentLink a:hover,\nhtml body .yellow.accentLink a:visited,\na.accentLinkhtml body .yellow,\na.accentLinkhtml body .yellow:hover,\na.accentLinkhtml body .yellow:visited {\n  color: #d8c101; }\n\nhtml body .yellow.accentBorder {\n  border-color: #d8c101; }\n\nhtml body .yellow.accentBorderBottom {\n  border-bottom-color: #d8c101; }\n\nhtml body .yellow.accentBorderLeft {\n  border-left-color: #d8c101; }\n\nhtml body .yellow.accentBorderRight {\n  border-right-color: #d8c101; }\n\nhtml body .yellow.accentBorderTop {\n  border-top-color: #d8c101; }\n\nhtml body .trans.accent,\nhtml body .trans.live-tile > .accent,\nhtml body .trans.list-tile > .accent,\nhtml body .trans.copy-tile > .accent,\nhtml body .trans.live-tile > div,\nhtml body .trans.copy-tile > div,\nhtml body .trans.list-tile > div,\nhtml body .trans.live-tile > .face,\nhtml body .trans.list-tile > .face,\nhtml body .trans.copy-tile > .face,\nhtml body .trans.live-tile > .slide,\nhtml body .trans.live-tile > .flip-back,\nhtml body .trans.live-tile > .flip-front,\nhtml body .trans.live-tile > .slide-back,\nhtml body .trans.live-tile > .slide-front,\nhtml body .trans.flip-list > li > .accent,\nhtml body .trans.flip-list > li > .flip-back,\nhtml body .trans.flip-list > li > .flip-front,\nhtml body .trans.slide.accent,\nhtml body .trans.slide-front.accent,\nhtml body .trans.slide-back.accent,\nhtml body .trans.flip-front.accent,\nhtml body .trans.flip-back.accent {\n  background-color: transparent; }\n\nhtml body .trans.accentColor,\nhtml body .trans.accentHover:hover,\nhtml body .trans.accentHover a:hover,\nhtml body .trans.accentLink a,\nhtml body .trans.accentLink a:hover,\nhtml body .trans.accentLink a:visited,\na.accentLinkhtml body .trans,\na.accentLinkhtml body .trans:hover,\na.accentLinkhtml body .trans:visited {\n  color: transparent; }\n\nhtml body .trans.accentBorder {\n  border-color: transparent; }\n\nhtml body .trans.accentBorderBottom {\n  border-bottom-color: transparent; }\n\nhtml body .trans.accentBorderLeft {\n  border-left-color: transparent; }\n\nhtml body .trans.accentBorderRight {\n  border-right-color: transparent; }\n\nhtml body .trans.accentBorderTop {\n  border-top-color: transparent; }\n\nhtml body .white.accent,\nhtml body .white.live-tile > .accent,\nhtml body .white.list-tile > .accent,\nhtml body .white.copy-tile > .accent,\nhtml body .white.live-tile > div,\nhtml body .white.copy-tile > div,\nhtml body .white.list-tile > div,\nhtml body .white.live-tile > .face,\nhtml body .white.list-tile > .face,\nhtml body .white.copy-tile > .face,\nhtml body .white.live-tile > .slide,\nhtml body .white.live-tile > .flip-back,\nhtml body .white.live-tile > .flip-front,\nhtml body .white.live-tile > .slide-back,\nhtml body .white.live-tile > .slide-front,\nhtml body .white.flip-list > li > .accent,\nhtml body .white.flip-list > li > .flip-back,\nhtml body .white.flip-list > li > .flip-front,\nhtml body .white.slide.accent,\nhtml body .white.slide-front.accent,\nhtml body .white.slide-back.accent,\nhtml body .white.flip-front.accent,\nhtml body .white.flip-back.accent {\n  background-color: #ffffff; }\n\nhtml body .white.accentColor,\nhtml body .white.accentHover:hover,\nhtml body .white.accentHover a:hover,\nhtml body .white.accentLink a,\nhtml body .white.accentLink a:hover,\nhtml body .white.accentLink a:visited,\na.accentLinkhtml body .white,\na.accentLinkhtml body .white:hover,\na.accentLinkhtml body .white:visited {\n  color: #ffffff; }\n\nhtml body .white.accentBorder {\n  border-color: #ffffff; }\n\nhtml body .white.accentBorderBottom {\n  border-bottom-color: #ffffff; }\n\nhtml body .white.accentBorderLeft {\n  border-left-color: #ffffff; }\n\nhtml body .white.accentBorderRight {\n  border-right-color: #ffffff; }\n\nhtml body .white.accentBorderTop {\n  border-top-color: #ffffff; }\n\nhtml body .black.accent,\nhtml body .black.live-tile > .accent,\nhtml body .black.list-tile > .accent,\nhtml body .black.copy-tile > .accent,\nhtml body .black.live-tile > div,\nhtml body .black.copy-tile > div,\nhtml body .black.list-tile > div,\nhtml body .black.live-tile > .face,\nhtml body .black.list-tile > .face,\nhtml body .black.copy-tile > .face,\nhtml body .black.live-tile > .slide,\nhtml body .black.live-tile > .flip-back,\nhtml body .black.live-tile > .flip-front,\nhtml body .black.live-tile > .slide-back,\nhtml body .black.live-tile > .slide-front,\nhtml body .black.flip-list > li > .accent,\nhtml body .black.flip-list > li > .flip-back,\nhtml body .black.flip-list > li > .flip-front,\nhtml body .black.slide.accent,\nhtml body .black.slide-front.accent,\nhtml body .black.slide-back.accent,\nhtml body .black.flip-front.accent,\nhtml body .black.flip-back.accent {\n  background-color: #000000; }\n\nhtml body .black.accentColor,\nhtml body .black.accentHover:hover,\nhtml body .black.accentHover a:hover,\nhtml body .black.accentLink a,\nhtml body .black.accentLink a:hover,\nhtml body .black.accentLink a:visited,\na.accentLinkhtml body .black,\na.accentLinkhtml body .black:hover,\na.accentLinkhtml body .black:visited {\n  color: #000000; }\n\nhtml body .black.accentBorder {\n  border-color: #000000; }\n\nhtml body .black.accentBorderBottom {\n  border-bottom-color: #000000; }\n\nhtml body .black.accentBorderLeft {\n  border-left-color: #000000; }\n\nhtml body .black.accentBorderRight {\n  border-right-color: #000000; }\n\nhtml body .black.accentBorderTop {\n  border-top-color: #000000; }\n\n.appbar {\n  background-color: #212021;\n  bottom: 0px;\n  color: #fff;\n  font-size: .9em;\n  height: 60px;\n  left: 0px;\n  line-height: normal;\n  margin: 0;\n  max-height: 100%;\n  overflow: hidden;\n  padding: 10px 0;\n  position: fixed;\n  right: 0px;\n  text-align: right;\n  width: 100%;\n  z-index: 100;\n  -ms-touch-action: manipulation; }\n\n.appbar.condensed {\n  height: 40px; }\n\n.appbar.condensed a.etc {\n  height: 40px;\n  line-height: 40px; }\n\n.appbar.top {\n  bottom: auto !important;\n  top: 0px; }\n\n.appbar a.etc,\n.appbar a.etc:hover,\n.appbar a.etc:visited {\n  color: #fff;\n  cursor: pointer;\n  display: block;\n  font-size: 32px;\n  /* add some extra padding to make it easier to touch */\n  height: 60px;\n  position: absolute;\n  right: 8px;\n  text-decoration: none;\n  top: 0px;\n  width: 90px;\n  z-index: 100; }\n\n.appbar .clear {\n  clear: both; }\n\n.appbar .theme-options {\n  display: block;\n  float: left;\n  margin: 0px;\n  position: relative;\n  width: 80%; }\n\n.appbar .theme-options > ul {\n  list-style-image: none;\n  list-style-type: none;\n  padding-right: 8px;\n  padding-left: 0px; }\n\n.appbar .theme-options li {\n  display: block;\n  margin: 8px;\n  float: left;\n  line-height: 32px;\n  height: 32px;\n  width: 32px; }\n\n.appbar .theme-options li > a,\n.appbar .theme-options li > a:hover,\n.appbar .theme-options li > a:visited {\n  display: block;\n  padding: 0px;\n  text-decoration: none;\n  height: 32px;\n  width: 32px; }\n\n.appbar .base-theme-options {\n  display: block;\n  float: left;\n  margin: 0px;\n  position: relative;\n  width: 20%; }\n\n.appbar .base-theme-options > ul {\n  padding-left: 2px; }\n\n.appbar .base-theme-options li {\n  display: block;\n  margin: 8px;\n  float: left;\n  line-height: 32px;\n  height: 32px;\n  width: 32px; }\n\n.appbar .base-theme-options li > a,\n.appbar .base-theme-options li > a:hover,\n.appbar .base-theme-options li > a:visited {\n  display: block;\n  padding: 0px;\n  text-decoration: none;\n  height: 32px;\n  width: 32px; }\n\n.appbar .base-theme-options li > a.dark.accent {\n  background-color: #000; }\n\n.appbar .theme-options h2,\n.appbar .base-theme-options h2 {\n  font-size: 2em;\n  font-weight: normal;\n  padding: 8px 8px 12px;\n  text-align: left; }\n\n.appbar .charm-title {\n  font-size: 10px;\n  display: block;\n  text-align: center; }\n\n.appbar .links {\n  font-size: 2em;\n  padding: 24px 0 0 8px;\n  text-align: left; }\n\n.appbar .links a,\n.appbar .links a:link {\n  text-decoration: none; }\n\n.appbar.small {\n  height: 28px; }\n\n.appbar.small a.etc,\n.appbar.small a.etc:hover,\n.appbar.small a.etc:visited {\n  font-size: 16px;\n  height: 60px;\n  width: 90px; }\n\n.light .appbar {\n  background-color: #dfdfdf;\n  color: #000; }\n\n.dark .appbar {\n  background-color: #212021; }\n\n.light .appbar-buttons li a {\n  color: #000; }\n\n.light .appbar-buttons a > img {\n  background-image: url(\"images/metroIcons_light.jpg\"); }\n\n.light .appbar a.etc,\n.light .appbar a.etc:hover,\n.light .appbar a.etc:visited {\n  color: #000; }\n\n.small .appbar-buttons {\n  /* default width is 3 buttons */\n  width: 156px; }\n\n.small .appbar-buttons a > img {\n  height: 32px;\n  width: 32px; }\n\n.small .appbar-buttons.one {\n  width: 52px; }\n\n.small .appbar-buttons.two {\n  width: 104px; }\n\n.small .appbar-buttons.three {\n  width: 156px; }\n\n.small .appbar-buttons.four {\n  width: 208px; }\n\n.small .appbar-buttons.five {\n  width: 260px; }\n\n.small .appbar-buttons.six {\n  width: 312px; }\n\n.small .appbar-buttons.seven {\n  width: 364px; }\n\n.small .appbar-buttons.eight {\n  width: 416px; }\n\n.small .appbar-buttons.nine {\n  width: 468px; }\n\n.small .appbar-buttons.ten {\n  width: 520px; }\n\n.appbar-buttons {\n  margin: 0 auto;\n  overflow: hidden;\n  position: relative;\n  padding: 0 0 2px;\n  text-align: right;\n  /* default width is 3 buttons */\n  width: 252px; }\n\n.appbar-buttons.one {\n  width: 84px; }\n\n.appbar-buttons.two {\n  width: 168px; }\n\n.appbar-buttons.three {\n  width: 252px; }\n\n.appbar-buttons.four {\n  width: 336px; }\n\n.appbar-buttons.five {\n  width: 420px; }\n\n.appbar-buttons.six {\n  width: 504px; }\n\n.appbar-buttons.seven {\n  width: 588px; }\n\n.appbar-buttons.eight {\n  width: 672px; }\n\n.appbar-buttons.nine {\n  width: 756px; }\n\n.appbar-buttons.ten {\n  width: 840px; }\n\n.appbar-buttons a > img {\n  background-image: url(\"images/metroIcons.jpg\");\n  background-repeat: no-repeat;\n  border: none;\n  height: 64px;\n  width: 64px; }\n\n.appbar-buttons a.small > img {\n  height: 32px;\n  width: 32px; }\n\n.appbar-buttons a.search > img {\n  background-position: -12px -12px; }\n\n.appbar-buttons a.home > img {\n  background-position: -104px -12px; }\n\n.appbar-buttons a.twitter > img {\n  background-position: -196px -12px; }\n\n.appbar-buttons a.calendar > img {\n  background-position: -288px -12px; }\n\n.appbar-buttons a.storm > img {\n  background-position: -380px -12px; }\n\n.appbar-buttons a.down > img {\n  background-position: -472px -12px; }\n\n.appbar-buttons a.camera > img {\n  background-position: -12px -99px; }\n\n.appbar-buttons a.camcorder > img {\n  background-position: -104px -99px; }\n\n.appbar-buttons a.qmark > img,\n.appbar-buttons a.about > img {\n  background-position: -196px -99px; }\n\n.appbar-buttons a.share > img {\n  background-position: -288px -99px; }\n\n.appbar-buttons a.rain > img {\n  background-position: -380px -99px; }\n\n.appbar-buttons a.cancel > img,\n.appbar-buttons a.close > img {\n  background-position: -472px -99px; }\n\n.appbar-buttons a.delete > img,\n.appbar-buttons a.trash > img {\n  background-position: -12px -188px; }\n\n.appbar-buttons a.tag > img {\n  background-position: -104px -188px; }\n\n.appbar-buttons a.addcontact > img {\n  background-position: -196px -188px; }\n\n.appbar-buttons a.save > img {\n  background-position: -288px -188px; }\n\n.appbar-buttons a.snow > img {\n  background-position: -380px -188px; }\n\n.appbar-buttons a.msg > img {\n  background-position: -472px -188px; }\n\n.appbar-buttons a.email > img {\n  background-position: -12px -274px; }\n\n.appbar-buttons a.clock > img {\n  background-position: -104px -274px; }\n\n.appbar-buttons a.edit > img {\n  background-position: -196px -274px; }\n\n.appbar-buttons a.circle > img {\n  background-position: -288px -274px; }\n\n.appbar-buttons a.moon > img {\n  background-position: -380px -274px; }\n\n.appbar-buttons a.calc > img {\n  background-position: -12px -362px; }\n\n.appbar-buttons a.gear > img {\n  background-position: -104px -362px; }\n\n.appbar-buttons a.plus > img {\n  background-position: -196px -362px; }\n\n.appbar-buttons a.dot > img {\n  background-position: -288px -362px; }\n\n.appbar-buttons a.restart > img,\n.appbar-buttons a.return > img {\n  background-position: -380px -362px; }\n\n.appbar-buttons a.add > img {\n  background-position: -472px -362px; }\n\n.appbar-buttons a.phone > img {\n  background-position: -12px -453px; }\n\n.appbar-buttons a.film > img {\n  background-position: -104px -453px; }\n\n.appbar-buttons a.back > img {\n  background-position: -196px -453px; }\n\n.appbar-buttons a.car > img {\n  background-position: -288px -453px; }\n\n.appbar-buttons a.forward > img {\n  background-position: -380px -453px; }\n\n.appbar-buttons a.selectmany > img {\n  background-position: -472px -453px; }\n\n.appbar-buttons a.stop > img {\n  background-position: -12px -538px; }\n\n.appbar-buttons a.contacts > img {\n  background-position: -104px -538px; }\n\n.appbar-buttons a.select > img {\n  background-position: -196px -538px; }\n\n.appbar-buttons a.sun > img {\n  background-position: -288px -538px; }\n\n.appbar-buttons a.dpad > img {\n  background-position: -380px -538px; }\n\n.appbar-buttons a.play > img {\n  background-position: -472px -538px; }\n\n.appbar-buttons li {\n  display: inline;\n  padding: 0 10px;\n  float: left;\n  list-style: none; }\n\n.appbar-buttons li a {\n  font-weight: bold;\n  background-color: transparent;\n  color: #fff; }\n\n.appbar-buttons li a:active,\n.appbar-buttons ul#menu li.selected a,\n.appbar-buttons .appbar-buttons li a:hover {\n  text-decoration: none; }\n\n.small .appbar-buttons .search > img,\n.appbar-buttons .small.search > img {\n  background-position: -562px -6px; }\n\n.small .appbar-buttons .home > img,\n.appbar-buttons .small.home > img {\n  background-position: -608px -6px; }\n\n.small .appbar-buttons .twitter > img,\n.appbar-buttons .small.twitter > img {\n  background-position: -654px -6px; }\n\n.small .appbar-buttons .calendar > img,\n.appbar-buttons .small.calendar > img {\n  background-position: -700px -6px; }\n\n.small .appbar-buttons .storm > img,\n.appbar-buttons .small.storm > img {\n  background-position: -746px -6px; }\n\n.small .appbar-buttons .down > img,\n.appbar-buttons .small.down > img {\n  background-position: -792px -6px; }\n\n.small .appbar-buttons .camera > img,\n.appbar-buttons .small.camera > img {\n  background-position: -562px -50px; }\n\n.small .appbar-buttons .camcorder > img,\n.appbar-buttons .small.camcorder > img {\n  background-position: -608px -50px; }\n\n.small .appbar-buttons .qmark > img,\n.appbar-buttons .small.qmark > img,\n.small .appbar-buttons .about > img,\n.appbar-buttons .small.about > img {\n  background-position: -654px -50px; }\n\n.small .appbar-buttons .share > img,\n.appbar-buttons .small.share > img {\n  background-position: -700px -50px; }\n\n.small .appbar-buttons .rain > img,\n.appbar-buttons .small.rain > img {\n  background-position: -746px -50px; }\n\n.small .appbar-buttons .cancel > img,\n.appbar-buttons .small.cancel > img,\n.small .appbar-buttons .close > img,\n.appbar-buttons .small.close > img {\n  background-position: -792px -50px; }\n\n.small .appbar-buttons .delete > img,\n.appbar-buttons .small.delete > img,\n.small .appbar-buttons .trash > img,\n.appbar-buttons .small.trash > img {\n  background-position: -562px -94px; }\n\n.small .appbar-buttons .tag > img,\n.appbar-buttons .small.tag > img {\n  background-position: -608px -94px; }\n\n.small .appbar-buttons .addcontact > img,\n.appbar-buttons .small.addcontact > img {\n  background-position: -654px -94px; }\n\n.small .appbar-buttons .save > img,\n.appbar-buttons .small.save > img {\n  background-position: -700px -94px; }\n\n.small .appbar-buttons .snow > img,\n.appbar-buttons .small.snow > img {\n  background-position: -746px -94px; }\n\n.small .appbar-buttons .msg > img,\n.appbar-buttons .small.msg > img {\n  background-position: -792px -94px; }\n\n.small .appbar-buttons .email > img,\n.appbar-buttons .small.email > img {\n  background-position: -562px -137px; }\n\n.small .appbar-buttons .clock > img,\n.appbar-buttons .small.clock > img {\n  background-position: -608px -137px; }\n\n.small .appbar-buttons .edit > img,\n.appbar-buttons .small.edit > img {\n  background-position: -654px -137px; }\n\n.small .appbar-buttons .circle > img,\n.appbar-buttons .small.circle > img {\n  background-position: -700px -137px; }\n\n.small .appbar-buttons .moon > img,\n.appbar-buttons .small.moon > img {\n  background-position: -746px -137px; }\n\n.small .appbar-buttons .calc > img,\n.appbar-buttons .small.calc > img {\n  background-position: -562px -181px; }\n\n.small .appbar-buttons .gear > img,\n.appbar-buttons .small.gear > img {\n  background-position: -608px -181px; }\n\n.small .appbar-buttons .plus > img,\n.appbar-buttons .small.plus > img {\n  background-position: -654px -181px; }\n\n.small .appbar-buttons .dot > img,\n.appbar-buttons .small.dot > img {\n  background-position: -700px -181px; }\n\n.small .appbar-buttons .restart > img,\n.appbar-buttons .small.restart > img,\n.small .appbar-buttons .return > img,\n.appbar-buttons .small.return > img {\n  background-position: -746px -181px; }\n\n.small .appbar-buttons .add > img,\n.appbar-buttons .small.add > img {\n  background-position: -792px -181px; }\n\n.small .appbar-buttons .phone > img,\n.appbar-buttons .small.phone > img {\n  background-position: -562px -226px; }\n\n.small .appbar-buttons .film > img,\n.appbar-buttons .small.film > img {\n  background-position: -608px -226px; }\n\n.small .appbar-buttons .back > img,\n.appbar-buttons .small.back > img {\n  background-position: -654px -226px; }\n\n.small .appbar-buttons .car > img,\n.appbar-buttons .small.car > img {\n  background-position: -700px -226px; }\n\n.small .appbar-buttons .forward > img,\n.appbar-buttons .small.forward > img {\n  background-position: -746px -226px; }\n\n.small .appbar-buttons .selectmany > img,\n.appbar-buttons .small.selectmany > img {\n  background-position: -792px -226px; }\n\n.small .appbar-buttons .stop > img,\n.appbar-buttons .small.stop > img {\n  background-position: -562px -269px; }\n\n.small .appbar-buttons .contacts > img,\n.appbar-buttons .small.contacts > img {\n  background-position: -608px -269px; }\n\n.small .appbar-buttons .select > img,\n.appbar-buttons .small.select > img {\n  background-position: -654px -269px; }\n\n.small .appbar-buttons .sun > img,\n.appbar-buttons .small.sun > img {\n  background-position: -700px -269px; }\n\n.small .appbar-buttons .dpad > img,\n.appbar-buttons .small.dpad > img {\n  background-position: -746px -269px; }\n\n.small .appbar-buttons .play > img,\n.appbar-buttons .small.play > img {\n  background-position: -792px -269px; }\n\n/* Media queries */\n@media screen and (max-width: 1025px) {\n  .appbar .theme-options h2,\n  .appbar .base-theme-options h2,\n  .appbar .links {\n    font-size: 1.7em;\n    padding: 8px 8px 2px;\n    text-align: left; }\n  .appbar .base-theme-options li,\n  .appbar .base-theme-options li a,\n  .appbar .theme-options li,\n  .appbar .theme-options li a {\n    display: block;\n    height: 32px;\n    margin: 4px;\n    width: 32px; } }\n\n@media screen and (max-width: 801px) {\n  .appbar .theme-options h2,\n  .appbar .base-theme-options h2,\n  .appbar .links {\n    font-size: 1.3em; }\n  .appbar .theme-options > ul {\n    padding-right: 6px; } }\n\n@media screen and (max-width: 641px) {\n  .appbar .theme-options {\n    width: 70%; }\n  .appbar .base-theme-options {\n    width: 30%; } }\n\n.mt-negative-lg {\n  margin-top: -2.1rem; }\n\n/**\r\n * Mapael\r\n */\n.mapTooltip {\n  position: fixed;\n  padding: 2px;\n  z-index: 1000;\n  max-width: 200px;\n  display: none;\n  background-color: #fff;\n  border: 1px solid #ccc;\n  border-radius: 0.25rem;\n  font-size: 0.875rem;\n  color: #555555; }\n\n.zoomIn, .zoomOut {\n  position: absolute;\n  bottom: 10px;\n  left: 10px;\n  width: 20px;\n  height: 20px;\n  box-sizing: content-box;\n  border: 1px solid #ccc;\n  background-color: #fff;\n  color: #555555;\n  line-height: 20px;\n  text-align: center;\n  border-radius: 0.25rem;\n  cursor: pointer;\n  font-weight: 700;\n  user-select: none; }\n\n.zoomOut {\n  left: 36px; }\n\n.mapael {\n  position: relative;\n  margin: -15px -20px 0; }\n  .mapael .map {\n    position: relative; }\n  .mapael .stats {\n    position: absolute;\n    z-index: 1;\n    top: 0;\n    left: 0;\n    margin: 5% 10%; }\n\n/***********************/\n/*      Live Tiles     */\n/***********************/\n.live-tile,\n.list-tile,\n.copy-tile,\n.tile-strip .flip-list > li {\n  height: auto;\n  width: 100%;\n  margin: 0;\n  color: inherit; }\n  .live-tile.fade,\n  .list-tile.fade,\n  .copy-tile.fade,\n  .tile-strip .flip-list > li.fade {\n    opacity: 1; }\n\n.live-tile p,\n.list-tile p,\n.copy-tile p {\n  padding: 0; }\n\n.live-tile p,\n.list-tile p,\n.copy-tile p,\n.live-tile .face,\n.list-tile .face,\n.copy-tile .face {\n  /* let .h* classes work! */ }\n  .live-tile p.h1,\n  .list-tile p.h1,\n  .copy-tile p.h1,\n  .live-tile .face.h1,\n  .list-tile .face.h1,\n  .copy-tile .face.h1 {\n    font-size: 2.5rem; }\n  .live-tile p.h2,\n  .list-tile p.h2,\n  .copy-tile p.h2,\n  .live-tile .face.h2,\n  .list-tile .face.h2,\n  .copy-tile .face.h2 {\n    font-size: 2rem; }\n  .live-tile p.h3,\n  .list-tile p.h3,\n  .copy-tile p.h3,\n  .live-tile .face.h3,\n  .list-tile .face.h3,\n  .copy-tile .face.h3 {\n    font-size: 1.75rem; }\n  .live-tile p.h4,\n  .list-tile p.h4,\n  .copy-tile p.h4,\n  .live-tile .face.h4,\n  .list-tile .face.h4,\n  .copy-tile .face.h4 {\n    font-size: 1.5rem; }\n  .live-tile p.h5,\n  .list-tile p.h5,\n  .copy-tile p.h5,\n  .live-tile .face.h5,\n  .list-tile .face.h5,\n  .copy-tile .face.h5 {\n    font-size: 1.25rem; }\n  .live-tile p.h6,\n  .list-tile p.h6,\n  .copy-tile p.h6,\n  .live-tile .face.h6,\n  .list-tile .face.h6,\n  .copy-tile .face.h6 {\n    font-size: 1rem; }\n  .live-tile p.value1,\n  .list-tile p.value1,\n  .copy-tile p.value1,\n  .live-tile .face.value1,\n  .list-tile .face.value1,\n  .copy-tile .face.value1 {\n    font-size: 2.5rem; }\n  .live-tile p.value2,\n  .list-tile p.value2,\n  .copy-tile p.value2,\n  .live-tile .face.value2,\n  .list-tile .face.value2,\n  .copy-tile .face.value2 {\n    font-size: 2rem; }\n  .live-tile p.value3,\n  .list-tile p.value3,\n  .copy-tile p.value3,\n  .live-tile .face.value3,\n  .list-tile .face.value3,\n  .copy-tile .face.value3 {\n    font-size: 1.75rem; }\n  .live-tile p.value4,\n  .list-tile p.value4,\n  .copy-tile p.value4,\n  .live-tile .face.value4,\n  .list-tile .face.value4,\n  .copy-tile .face.value4 {\n    font-size: 1.5rem; }\n  .live-tile p.value5,\n  .list-tile p.value5,\n  .copy-tile p.value5,\n  .live-tile .face.value5,\n  .list-tile .face.value5,\n  .copy-tile .face.value5 {\n    font-size: 1.25rem; }\n  .live-tile p.value6,\n  .list-tile p.value6,\n  .copy-tile p.value6,\n  .live-tile .face.value6,\n  .list-tile .face.value6,\n  .copy-tile .face.value6 {\n    font-size: 1rem; }\n\n/***********************/\n/*     Chart Simple    */\n/***********************/\n.widget-chart-simple .widget-body {\n  padding-top: 10px; }\n\n.widget-chart-simple .chart-value {\n  font-size: 24px; }\n\n.widget-chart-simple .chart {\n  margin-top: 20px; }\n\n.jqstooltip {\n  box-sizing: content-box; }\n\n/***********************/\n/*    Chart Changes    */\n/***********************/\n.widget-chart-changes .chart {\n  margin: -15px -20px 0;\n  padding: 15px 0 0; }\n\n.widget-chart-changes .chart-title {\n  margin: 20px 0 0; }\n\n.widget-chart-changes .chart-value, .widget-chart-changes .chart-value-change {\n  padding: 0 20px; }\n\n.widget-chart-changes .chart-value {\n  margin-bottom: 0;\n  font-weight: 700;\n  font-size: 21px;\n  line-height: 1;\n  color: #fff; }\n\n.widget-chart-changes .chart-value-change {\n  color: rgba(255, 255, 255, 0.7);\n  font-size: 85%;\n  margin-bottom: 0.65rem; }\n\n/***********************/\n/*  Chart Stats Simple */\n/***********************/\n.widget-chart-stats-simple > header h1, .widget-chart-stats-simple > header h2, .widget-chart-stats-simple > header h3, .widget-chart-stats-simple > header h4, .widget-chart-stats-simple > header h5, .widget-chart-stats-simple > header h6 {\n  margin-bottom: 0.25rem; }\n\n.widget-chart-stats-simple .chart {\n  height: 200px;\n  margin: 0.5rem -20px -15px; }\n  .widget-chart-stats-simple .chart > .chart-inner {\n    height: 100%; }\n\n/***********************/\n/*      Big Chart      */\n/***********************/\n.widget-big-chart .chart {\n  height: 200px; }\n\n/***********************/\n/*  Part:Chart Stats   */\n/***********************/\n.chart-stats {\n  border-top: 1px solid #eeeeee; }\n\n/***********************/\n/*  Part:Map Controls  */\n/***********************/\n.map-controls {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  border-top: 1px solid #bbb;\n  background-color: #ddd;\n  border-bottom-left-radius: 0.25rem;\n  border-bottom-right-radius: 0.25rem; }\n  .map-controls > .nav-item > .nav-link {\n    border-radius: 0;\n    padding: 0.7143rem 0 0.7143rem 0;\n    color: #555555; }\n    .map-controls > .nav-item > .nav-link:hover {\n      background-color: #eeeeee;\n      color: #555555; }\n  .map-controls > .nav-item.active > .nav-link, .map-controls > .nav-item.active > .nav-link:hover {\n    background-color: #fff;\n    color: #555555;\n    font-weight: 700; }\n  .map-controls > .nav-item:first-child > a {\n    border-bottom-left-radius: 0.25rem; }\n  .map-controls > .nav-item:last-child > a {\n    border-bottom-right-radius: 0.25rem; }\n\n.map svg {\n  height: 100%;\n  width: 100%; }\n\n/***********************************/\n/**          Post Links           **/\n/***********************************/\n.post-links {\n  margin-bottom: 0;\n  font-size: 0.875rem;\n  padding-left: 0; }\n  .post-links::after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .post-links > li {\n    float: left;\n    list-style: none; }\n    .post-links > li + li:before {\n      color: #999;\n      content: \"\\25cf\";\n      padding: 0 8px; }\n    .post-links > li > a {\n      text-decoration: none;\n      color: #999999; }\n      .post-links > li > a:hover {\n        color: #999999; }\n  .post-links.no-separator > li + li {\n    margin-left: 12px; }\n    .post-links.no-separator > li + li:before {\n      content: normal; }\n\n/***********************************/\n/**          Post Comments           **/\n/***********************************/\n.post-comments {\n  font-size: 0.875rem;\n  padding-left: 0; }\n  .post-comments::after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .post-links + .post-comments {\n    margin-top: 0.5rem; }\n  .post-comments > li {\n    padding: 10px;\n    border-top: 1px solid #e7e7e7;\n    list-style: none; }\n    .post-comments > li::after {\n      content: \"\";\n      display: table;\n      clear: both; }\n    .post-comments > li:last-child {\n      padding-bottom: 0; }\n  .post-comments p:last-child {\n    margin-bottom: 0; }\n  .post-comments .avatar {\n    margin-top: 1px; }\n  .post-comments .author {\n    margin-top: 0;\n    margin-bottom: 2px;\n    color: #7ca9dd; }\n  .post-comments .comment-body {\n    overflow: auto; }\n  .post-comments h6.author > small {\n    font-size: 11px; }\n  .widget > footer .post-comments {\n    margin-left: -20px;\n    margin-right: -20px; }\n\n/***********************************/\n/**           Post User           **/\n/***********************************/\n.post-user {\n  position: relative; }\n  .post-user::after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .post-user img {\n    border: 3px solid white; }\n\n/***********************************/\n/**             Tags              **/\n/***********************************/\n.tags {\n  padding-left: 0;\n  list-style: none; }\n  .tags::after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .tags > li {\n    float: left; }\n    .tags > li > a {\n      padding: 2px 8px;\n      font-size: 13px;\n      border-radius: 6px;\n      border: 1px solid white;\n      color: inherit;\n      text-decoration: none; }\n      .tags > li > a:hover {\n        background-color: rgba(0, 0, 0, 0.1); }\n      .tags > li > a .fa {\n        font-size: 8px;\n        vertical-align: 2px;\n        margin-right: 3px;\n        opacity: .8; }\n    .tags > li + li > a {\n      margin-left: 6px; }\n  .widget-top-overflow > img + .tags {\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    margin: 20px; }\n\n/***********************************/\n/**       Chat List Group         **/\n/***********************************/\n.widget-chat-list-group {\n  padding-top: 0.5rem; }\n  .widget-chat-list-group .list-group-item {\n    margin-left: 20px;\n    margin-right: 20px;\n    padding: 0;\n    border: 0; }\n    .widget-chat-list-group .list-group-item + .list-group-item {\n      margin-top: 30px; }\n    .widget-chat-list-group .list-group-item .thumb,\n    .widget-chat-list-group .list-group-item .thumb-sm {\n      float: left;\n      margin-right: 15px; }\n    .widget-chat-list-group .list-group-item .time {\n      float: right;\n      font-size: 0.875rem;\n      color: #218BC3; }\n    .widget-chat-list-group .list-group-item .sender {\n      margin-top: 5px;\n      margin-bottom: 5px;\n      font-size: 13px;\n      font-weight: 400; }\n    .widget-chat-list-group .list-group-item .body {\n      font-size: 13px;\n      color: #999999; }\n    .widget-chat-list-group .list-group-item.on-right .thumb,\n    .widget-chat-list-group .list-group-item.on-right .thumb-sm {\n      float: right;\n      margin-left: 15px;\n      margin-right: 0; }\n    .widget-chat-list-group .list-group-item.on-right .time {\n      float: left; }\n    .widget-chat-list-group .list-group-item.on-right .sender {\n      text-align: right; }\n\n/***********************************/\n/**           Weather             **/\n/***********************************/\n.widget-image .forecast {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin-bottom: 5px;\n  padding-left: 15px;\n  padding-right: 15px;\n  text-align: center; }\n"

/***/ },

/***/ "./src/app/widgets/widgets.template.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\r\n  <div class=\"col-lg-3 col-md-6 col-xs-12\">\r\n    <section class=\"widget bg-primary text-white\">\r\n      <div class=\"widget-body clearfix\">\r\n        <div class=\"row flex-nowrap\">\r\n          <div class=\"col-xs-3\">\r\n            <span class=\"widget-icon\">\r\n              <i class=\"glyphicon glyphicon-globe\"></i>\r\n            </span>\r\n          </div>\r\n          <div class=\"col-xs-9\">\r\n            <h6 class=\"no-margin\">USERS GROWTH</h6>\r\n            <p class=\"h2 no-margin fw-normal\">4,332</p>\r\n          </div>\r\n        </div>\r\n        <div class=\"row flex-nowrap\">\r\n          <div class=\"col-xs-6\">\r\n            <h6 class=\"no-margin\">Registrations</h6>\r\n            <p class=\"value5\">+830</p>\r\n          </div>\r\n          <div class=\"col-xs-6\">\r\n            <h6 class=\"no-margin\">Bounce Rate</h6>\r\n            <p class=\"value5\">4.5%</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n  <div class=\"col-lg-3 col-md-6 col-xs-12\">\r\n    <section class=\"widget bg-info text-white\">\r\n      <div class=\"widget-body clearfix\">\r\n        <div class=\"row flex-nowrap\">\r\n          <div class=\"col-xs-3\">\r\n            <span class=\"widget-icon\">\r\n              <i class=\"glyphicon glyphicon-user\"></i>\r\n            </span>\r\n          </div>\r\n          <div class=\"col-xs-9\">\r\n            <div live-tile class=\"live-tile\" data-mode=\"carousel\" data-speed=\"750\" data-delay=\"3000\" data-height=\"57\">\r\n              <div>\r\n                <h6 class=\"no-margin\">VISITS TODAY</h6>\r\n                <p class=\"h2 no-margin fw-normal\">12,324</p>\r\n              </div>\r\n              <div>\r\n                <h6 class=\"no-margin\">VISITS YESTERDAY</h6>\r\n                <p class=\"h2 no-margin fw-normal\">11,885</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"row flex-nowrap\">\r\n          <div class=\"col-xs-6\">\r\n            <h6 class=\"no-margin\">New Visitors</h6>\r\n            <div live-tile class=\"live-tile\" data-mode=\"carousel\" data-speed=\"750\" data-delay=\"3000\" data-height=\"25\">\r\n              <div>\r\n                <p class=\"value5\">1,332</p>\r\n              </div>\r\n              <div>\r\n                <p class=\"value5\">20.1%</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-xs-6\">\r\n            <h6 class=\"no-margin\">Bounce Rate</h6>\r\n            <div live-tile class=\"live-tile\" data-mode=\"carousel\" data-speed=\"750\" data-delay=\"3000\" data-height=\"26\">\r\n              <div>\r\n                <p class=\"value5\">217</p>\r\n              </div>\r\n              <div>\r\n                <p class=\"value5\">2.3%</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n  <div class=\"col-lg-3 col-md-6 col-xs-12\">\r\n    <section class=\"widget bg-gray\">\r\n      <div class=\"widget-body clearfix\">\r\n        <div live-tile class=\"live-tile\" data-mode=\"fade\" data-speed=\"750\" data-delay=\"4000\" data-height=\"104\">\r\n          <div class=\"bg-gray text-white\">\r\n            <div class=\"row flex-nowrap\">\r\n              <div class=\"col-xs-3\">\r\n                <span class=\"widget-icon\">\r\n                  <i class=\"glyphicon glyphicon-globe\"></i>\r\n                </span>\r\n              </div>\r\n              <div class=\"col-xs-9\">\r\n                <h6 class=\"no-margin\">ORDERS</h6>\r\n                <p class=\"h2 no-margin fw-normal\">82,765</p>\r\n              </div>\r\n            </div>\r\n            <div class=\"row flex-nowrap\">\r\n              <div class=\"col-xs-6\">\r\n                <h6 class=\"no-margin\">Avg. Time</h6>\r\n                <p class=\"value5\">2:56</p>\r\n              </div>\r\n              <div class=\"col-xs-6\">\r\n                <h6 class=\"no-margin\">Last Week</h6>\r\n                <p class=\"value5\">374</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"text-white\">\r\n            <div class=\"row flex-nowrap\">\r\n              <div class=\"col-xs-3\">\r\n                <span class=\"widget-icon\">\r\n                  <i class=\"glyphicon glyphicon-certificate\"></i>\r\n                </span>\r\n              </div>\r\n              <div class=\"col-xs-9\">\r\n                <h6 class=\"no-margin\">PICKED ORDERS</h6>\r\n                <p class=\"h2 no-margin fw-normal\">13.8%</p>\r\n              </div>\r\n            </div>\r\n            <div class=\"row flex-nowrap\">\r\n              <div class=\"col-xs-6\">\r\n                <h6 class=\"no-margin\">Basic</h6>\r\n                <p class=\"value5\">3,692</p>\r\n              </div>\r\n              <div class=\"col-xs-6\">\r\n                <h6 class=\"no-margin\">Advanced</h6>\r\n                <p class=\"value5\">1,441</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n  <div class=\"col-lg-3 col-md-6 col-xs-12\">\r\n    <section class=\"widget bg-success text-white\">\r\n      <div class=\"widget-body clearfix\">\r\n        <div class=\"row flex-nowrap\">\r\n          <div class=\"col-xs-3\">\r\n            <span class=\"widget-icon\">\r\n              <i class=\"glyphicon glyphicon-usd\"></i>\r\n            </span>\r\n          </div>\r\n          <div class=\"col-xs-9\">\r\n            <h6 class=\"no-margin\">TOTAL PROFIT</h6>\r\n            <p class=\"h2 no-margin fw-normal\">$7,448</p>\r\n          </div>\r\n        </div>\r\n        <div class=\"row flex-nowrap\">\r\n          <div class=\"col-xs-6\">\r\n            <h6 class=\"no-margin\">Last Month</h6>\r\n            <p class=\"value5\">$83,541</p>\r\n          </div>\r\n          <div class=\"col-xs-6\">\r\n            <h6 class=\"no-margin\">Last Week</h6>\r\n            <p class=\"value5\">$17,926</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n<div class=\"row\" flot-chart-widget>\r\n</div>\r\n<div class=\"row\">\r\n  <div class=\"col-lg-4 col-xs-12\">\r\n    <section widget class=\"widget\">\r\n      <div class=\"widget-controls\">\r\n        <a href=\"#\"><i class=\"fa fa-refresh\"></i></a>\r\n        <a href=\"#\" data-widgster=\"close\"><i class=\"glyphicon glyphicon-remove\"></i></a>\r\n      </div>\r\n      <div class=\"widget-body\">\r\n        <div class=\"widget-top-overflow windget-padding-md clearfix bg-warning text-white\">\r\n          <h3 class=\"mt-lg mb-lg\">Sing - <span class=\"fw-semi-bold\">Next Generation</span> Admin Dashboard\r\n            Template</h3>\r\n          <ul class=\"tags text-white pull-right\">\r\n            <li><a href=\"#\">features</a></li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"post-user mt-negative-lg\">\r\n          <span class=\"thumb-lg pull-left mr\">\r\n            <img class=\"img-circle\" src=\"assets/img/people/a4.jpg\" alt=\"...\">\r\n          </span>\r\n          <h6 class=\"m-b-1 fw-normal text-white\">Jeremy <small class=\"text-white text-light\">@sing</small></h6>\r\n          <p class=\"fs-mini text-muted\"><time>25 mins</time> &nbsp; <i class=\"fa fa-map-marker\"></i> &nbsp; near Amsterdam</p>\r\n        </div>\r\n        <p class=\"text-light fs-mini m\">Lots of cool stuff is happening around you. Just calm down for a sec and listen. Colors, sounds,\r\n          thoughts, ideas. </p>\r\n      </div>\r\n      <footer class=\"bg-body-light\">\r\n        <ul class=\"post-links\">\r\n          <li><a href=\"#\">1 hour</a></li>\r\n          <li><a href=\"#\"><span class=\"text-danger\"><i class=\"fa fa-heart\"></i> Like</span></a></li>\r\n          <li><a href=\"#\">Comment</a></li>\r\n        </ul>\r\n        <ul class=\"post-comments mt mb-0\">\r\n          <li>\r\n            <span class=\"thumb-xs avatar pull-left mr-sm\">\r\n              <img class=\"img-circle\" src=\"assets/img/people/a1.jpg\" alt=\"...\">\r\n            </span>\r\n            <div class=\"comment-body\">\r\n              <h6 class=\"author fs-sm fw-semi-bold\">Ignacio Abad <small>6 mins ago</small></h6>\r\n              <p class=\"fs-mini\">Hey, have you heard anything about that?</p>\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <span class=\"thumb-xs avatar pull-left mr-sm\">\r\n              <img class=\"img-circle\" src=\"assets/img/avatar.png\" alt=\"...\">\r\n            </span>\r\n            <div class=\"comment-body\">\r\n              <input class=\"form-control form-control-sm\" type=\"text\" placeholder=\"Write your comment...\">\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </footer>\r\n    </section>\r\n  </div>\r\n  <div class=\"col-lg-4 col-xs-12\">\r\n    <section class=\"widget\">\r\n      <div class=\"widget-controls\">\r\n        <a href=\"#\"><i class=\"fa fa-refresh\"></i></a>\r\n        <a href=\"#\" data-widgster=\"close\"><i class=\"glyphicon glyphicon-remove\"></i></a>\r\n      </div>\r\n      <div class=\"widget-body\">\r\n        <div class=\"widget-top-overflow text-white\">\r\n          <img src=\"assets/img/pictures/17.jpg\">\r\n          <ul class=\"tags text-white pull-right\">\r\n            <li><a href=\"#\">design</a></li>\r\n            <li><a href=\"#\">white</a></li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"post-user mt-sm\">\r\n          <span class=\"thumb pull-left mr\">\r\n            <img class=\"img-circle\" src=\"assets/img/people/a6.jpg\" alt=\"...\">\r\n          </span>\r\n          <h6 class=\"mb-xs mt-xs\"><span class=\"fw-semi-bold\">Maryna</span> Nilson</h6>\r\n          <p class=\"fs-mini text-muted\"><time>25 mins</time> &nbsp; <i class=\"fa fa-map-marker\"></i> &nbsp; near Amsterdam</p>\r\n        </div>\r\n        <p class=\"text-light fs-mini m\">Lots of cool stuff is happening around you. Just calm down for a sec and listen. Colors, sounds,\r\n          thoughts, ideas. </p>\r\n      </div>\r\n      <footer class=\"bg-body-light\">\r\n        <ul class=\"post-links no-separator\">\r\n          <li><a href=\"#\"><span class=\"text-danger\"><i class=\"fa fa-heart\"></i> 427</span></a></li>\r\n          <li><a href=\"#\"><i class=\"glyphicon glyphicon-comment\"></i> 98</a></li>\r\n        </ul>\r\n      </footer>\r\n    </section>\r\n  </div>\r\n  <div class=\"col-lg-4 col-xs-12\">\r\n    <section widget class=\"widget\">\r\n      <div class=\"widget-controls\">\r\n        <a href=\"#\"><i class=\"fa fa-refresh\"></i></a>\r\n        <a href=\"#\" data-widgster=\"close\"><i class=\"glyphicon glyphicon-remove\"></i></a>\r\n      </div>\r\n      <div class=\"widget-body\">\r\n        <div class=\"post-user mt-n-xs\">\r\n          <span class=\"thumb pull-left mr\">\r\n            <img class=\"img-circle\" src=\"assets/img/people/a2.jpg\" alt=\"...\">\r\n          </span>\r\n          <h6 class=\"mb-xs mt-xs\">Jess <span class=\"fw-semi-bold\">@jessica</span></h6>\r\n          <p class=\"fs-mini text-muted\"><time>25 mins</time> &nbsp; <i class=\"fa fa-map-marker\"></i> &nbsp; near Amsterdam</p>\r\n        </div>\r\n        <div class=\"widget-middle-overflow windget-padding-md clearfix bg-danger text-white\">\r\n          <h3 class=\"mt-lg mb-lg\">Sing - <span class=\"fw-semi-bold\">Next Generation</span> Admin Dashboard\r\n            Template</h3>\r\n          <ul class=\"tags text-white pull-right\">\r\n            <li><a href=\"#\">design</a></li>\r\n          </ul>\r\n        </div>\r\n        <p class=\"text-light fs-mini mt-sm\">Lots of cool stuff is happening around you. Just calm down for a sec and listen. Colors, sounds,\r\n          thoughts, ideas. </p>\r\n      </div>\r\n      <footer class=\"bg-body-light\">\r\n        <ul class=\"post-links\">\r\n          <li><a href=\"#\">1 hour</a></li>\r\n          <li><a href=\"#\"><span class=\"text-danger\"><i class=\"fa fa-heart\"></i> Like</span></a></li>\r\n          <li><a href=\"#\">Comment</a></li>\r\n        </ul>\r\n      </footer>\r\n    </section>\r\n  </div>\r\n</div>\r\n<div class=\"row\">\r\n  <div class=\"col-lg-6 col-xs-12\">\r\n    <section class=\"widget\">\r\n      <div class=\"widget-image text-white\">\r\n        <img src=\"assets/img/pictures/18.jpg\">\r\n        <h4 class=\"title\">\r\n          <span class=\"fw-normal\">Sunnyvale</span>, CA\r\n        </h4>\r\n        <div class=\"info text-xs-right\">\r\n          <i class=\"fa fa-map-marker h1 no-margin mr-xs\"></i>\r\n          <h6 class=\"no-margin mt-xs\">FLORIDA, USA</h6>\r\n          <p class=\"fs-sm\">9:41 am</p>\r\n        </div>\r\n        <div class=\"forecast\">\r\n          <div class=\"row\">\r\n            <div class=\"col-xs-6 col-md-4\">\r\n              <div class=\"row mt-xs\">\r\n                <div class=\"col-xs-6 no-padding\">\r\n                  <canvas skycon [weather]=\"'clear-day'\" [color]=\"config.settings.colors['white']\" width=\"40\" height=\"40\"></canvas>\r\n                  <p class=\"no-margin fw-normal mt-n-xs\">sunny</p>\r\n                </div>\r\n                <div class=\"col-xs-6 no-padding\">\r\n                  <h6 class=\"fw-semi-bold no-margin\">SUNDAY</h6>\r\n                  <p class=\"value1 \">29&deg;</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-xs-3 col-md-2 no-padding\">\r\n              <h6 class=\"no-margin\">TOMMOROW</h6>\r\n              <canvas class=\"mt-xs\" skycon [weather]=\"'partly-cloudy-day'\" [color]=\"config.settings.colors['white']\" width=\"28\" height=\"28\"></canvas>\r\n              <p class=\"no-margin fw-semi-bold\">32&deg;</p>\r\n            </div>\r\n            <div class=\"col-xs-3 col-md-2 no-padding\">\r\n              <h6 class=\"no-margin\">TUE</h6>\r\n              <canvas class=\"mt-xs\" skycon [weather]=\"'rain'\" [color]=\"config.settings.colors['white']\" width=\"28\" height=\"28\"></canvas>\r\n              <p class=\"no-margin fw-semi-bold\">25&deg;</p>\r\n            </div>\r\n            <div class=\"col-xs-3 col-md-2 no-padding\">\r\n              <h6 class=\"no-margin\">WED</h6>\r\n              <canvas class=\"mt-xs\" skycon [weather]=\"'clear-day'\" [color]=\"configFn.lightenColor(config.settings.colors['brand-warning'], 0.1)\" width=\"28\" height=\"28\"></canvas>\r\n              <p class=\"no-margin fw-semi-bold\">28&deg;</p>\r\n            </div>\r\n            <div class=\"col-xs-3 col-md-2 no-padding\">\r\n              <h6 class=\"no-margin\">THU</h6>\r\n              <canvas class=\"mt-xs\" skycon [weather]=\"'partly-cloudy-day'\" [color]=\"config.settings.colors['white']\" width=\"28\" height=\"28\"></canvas>\r\n              <p class=\"no-margin fw-semi-bold\">17&deg;</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6 col-xs-12\">\r\n        <section class=\"widget no-padding text-xs-center\">\r\n          <div class=\"row no-margin\">\r\n            <div class=\"col-xs-5 bg-danger btlr bblr\">\r\n              <canvas class=\"mt\" skycon [weather]=\"'clear-day'\" [color]=\"config.settings.colors['white']\" width=\"62\" height=\"62\"></canvas>\r\n              <h6 class=\"text-white fw-normal m-t-1\">FRIDAY</h6>\r\n            </div>\r\n            <div class=\"col-xs-7\">\r\n              <p class=\"value0 text-danger mt-n-xs mr-n-xs\">\r\n                33&deg;\r\n              </p>\r\n              <p class=\"mt-n-sm m-b-0 fw-normal fs-sm text-muted\">WINDY</p>\r\n              <div class=\"row mt-n-xs mb-xs\">\r\n                <div class=\"col-xs-6 no-padding\">\r\n                  <canvas skycon [weather]=\"'wind'\" [color]=\"config.settings.colors['gray-light']\" width=\"20\" height=\"20\"></canvas>\r\n                  <div class=\"display-inline-block\">\r\n                    <p class=\"value6\">4</p>\r\n                    <p class=\"fs-sm no-margin mt-n-xs text-muted fw-normal\">MPS</p>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-xs-6 no-padding\">\r\n                  <canvas skycon [weather]=\"'rain'\" [color]=\"config.settings.colors['gray-light']\" width=\"20\" height=\"20\"></canvas>\r\n                  <div class=\"display-inline-block\">\r\n                    <p class=\"value6\">52</p>\r\n                    <p class=\"fs-sm no-margin mt-n-xs text-muted fw-normal\">MM</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n      <div class=\"col-md-6 col-xs-12\">\r\n        <section class=\"widget no-padding text-xs-center\">\r\n          <div class=\"row no-margin\">\r\n            <div class=\"col-xs-7 bg-success btlr bblr\">\r\n              <p class=\"value0 text-white mt-sm mr-n-xs\">\r\n                20&deg;\r\n              </p>\r\n              <p class=\"text-white display-inline-block fw-normal display-inline-block mb\">SUNDAY</p>\r\n            </div>\r\n            <div class=\"col-xs-5\">\r\n              <canvas class=\"mt\" skycon [weather]=\"'partly-cloudy-day'\" [color]=\"config.settings.colors['brand-success']\" width=\"60\" height=\"60\"></canvas>\r\n              <p class=\"fw-normal fs-sm text-muted\">WINDY</p>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"col-lg-6 col-xs-12\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6 col-xs-12\">\r\n        <section class=\"widget widget-chart-simple widget-sm\">\r\n          <div class=\"widget-body\">\r\n            <h6 class=\"mb-xs fw-normal\">\r\n              Nasdaq\r\n            </h6>\r\n            <div class=\"chart-value\">\r\n              355 <span class=\"fw-semi-bold\">USD</span>\r\n            </div>\r\n            <p>Last Sale 354.94 USD</p>\r\n            <div class=\"chart\" nasdaq-sparkline-widget>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n      <div class=\"col-md-6 col-xs-12\">\r\n        <section class=\"widget widget-sm bg-success text-white\">\r\n          <div class=\"widget-body\">\r\n            <p class=\"mb-xs\"><i class=\"fa fa-comments fa-2x\"></i></p>\r\n            <h5>\r\n              Lots of <span class=\"fw-semi-bold\">possibilities</span> to customize your\r\n              new <span class=\"fw-semi-bold\">admin template</span>\r\n            </h5>\r\n            <p class=\"fs-mini mt-sm\">\r\n              <span class=\"fw-semi-bold\">83</span> likes\r\n              &nbsp;\r\n              <span class=\"fw-semi-bold\">96</span> comments\r\n              &nbsp;\r\n              <span class=\"fw-semi-bold\">7</span> shares\r\n            </p>\r\n            <p class=\"text-light fs-sm mt-lg\"><time>10 June</time></p>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6 col-xs-12\">\r\n        <section class=\"widget widget-sm bg-primary text-white\">\r\n          <div class=\"widget-body\">\r\n            <p class=\"mb-xs\"><i class=\"fa fa-arrow-circle-up fa-3x opacity-50\"></i></p>\r\n            <p class=\"text-light mb\"><time>10 June</time></p>\r\n            <h3>\r\n              Lots of <span class=\"fw-semi-bold\">new</span> amazing possibilities\r\n            </h3>\r\n            <p class=\"fs-mini mt\">\r\n              <span class=\"fw-semi-bold\">214</span> likes\r\n              &nbsp;\r\n              <span class=\"fw-semi-bold\">96</span> comments\r\n            </p>\r\n          </div>\r\n        </section>\r\n      </div>\r\n      <div class=\"col-md-6 col-xs-12\">\r\n        <section class=\"widget widget-sm\">\r\n          <header>\r\n            <h6>Server <span class=\"fw-semi-bold\">Overview</span></h6>\r\n          </header>\r\n          <div class=\"widget-body\">\r\n            <div class=\"clearfix fs-mini\">\r\n              <span class=\"pull-right no-margin fw-semi-bold\">CPU</span>\r\n              <span class=\"fs-mini\">60% / 37°C / 3.3 Ghz</span>\r\n            </div>\r\n            <div class=\"bg-gray-lighter progress-bar\">\r\n              <progress class=\"progress progress-primary progress-xs\" value=\"100\" max=\"100\" style=\"width: 70%\"></progress>\r\n            </div>\r\n            <div class=\"clearfix fs-mini mt\">\r\n              <span class=\"pull-right no-margin fw-semi-bold\">Mem</span>\r\n              <span class=\"fs-mini\">29% / 4GB (16 GB)</span>\r\n            </div>\r\n            <div class=\"bg-gray-lighter progress-bar\">\r\n              <progress class=\"progress progress-xs progress-warning\" value=\"100\" max=\"100\" style=\"width: 29%\"></progress>\r\n            </div>\r\n            <div class=\"clearfix fs-mini mt\">\r\n              <span class=\"pull-right no-margin fw-semi-bold\">LAN</span>\r\n              <span class=\"fs-mini\">6 Mb/s <i class=\"fa fa-caret-down\"></i> &nbsp; 3 Mb/s <i class=\"fa fa-caret-up\"></i></span>\r\n            </div>\r\n            <div class=\"bg-gray-lighter progress-bar\">\r\n              <progress class=\"progress progress-xs progress-danger\" value=\"100\" max=\"100\" style=\"width: 48%\"></progress>\r\n            </div>\r\n            <div class=\"clearfix fs-mini mt\">\r\n              <span class=\"pull-right no-margin fw-semi-bold\">Access</span>\r\n              <span class=\"fs-mini\">17 Mb/s <i class=\"fa fa-caret-up\"></i> &nbsp; (+18%)</span>\r\n            </div>\r\n            <div class=\"bg-gray-lighter progress-bar\">\r\n              <progress class=\"progress progress-xs progress-success\" value=\"100\" max=\"100\" style=\"width: 64%\"></progress>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"row\">\r\n  <div class=\"col-lg-4 col-xs-12\">\r\n    <section class=\"widget\">\r\n      <div class=\"widget-body\" years-map-widget>\r\n      </div>\r\n    </section>\r\n  </div>\r\n  <div class=\"col-lg-4 col-xs-12\">\r\n    <section class=\"widget\">\r\n      <header class=\"bb\">\r\n        <h6>Recent <span class=\"fw-semi-bold\">Chats</span></h6>\r\n      </header>\r\n      <div class=\"widget-body\">\r\n        <div class=\"widget-middle-overflow\">\r\n          <ul class=\"list-group widget-chat-list-group\" data-ui-jq=\"slimscroll\" data-ui-options=\"{ height: '287px', size: '4px', borderRadius: '1px', opacity: .3 }\">\r\n            <li class=\"list-group-item\">\r\n              <span class=\"thumb\">\r\n                <img class=\"img-circle\" src=\"assets/img/people/a6.jpg\" alt=\"...\">\r\n              </span>\r\n              <time class=\"time\">10 sec ago</time>\r\n              <h6 class=\"sender\">Chris Gray</h6>\r\n              <p class=\"body\">Hey! What's up? So much time since we saw each other there</p>\r\n            </li>\r\n            <li class=\"list-group-item on-right\">\r\n              <span class=\"thumb\">\r\n                <img class=\"img-circle\" src=\"assets/img/avatar.png\" alt=\"...\">\r\n              </span>\r\n              <time class=\"time\">10 sec ago</time>\r\n              <h6 class=\"sender\">John Doe</h6>\r\n              <p class=\"body\">True! Totally makes sense. But how do we find that?</p>\r\n            </li>\r\n            <li class=\"list-group-item\">\r\n              <span class=\"thumb\">\r\n                <img class=\"img-circle\" src=\"assets/img/people/a6.jpg\" alt=\"...\">\r\n              </span>\r\n              <time class=\"time\">10 sec ago</time>\r\n              <h6 class=\"sender\">Chris Gray</h6>\r\n              <p class=\"body\">OK, but so now what? What should we do now? Not sure actually.</p>\r\n            </li>\r\n            <li class=\"list-group-item on-right\">\r\n              <span class=\"thumb\">\r\n                <img class=\"img-circle\" src=\"assets/img/avatar.png\" alt=\"...\">\r\n              </span>\r\n              <time class=\"time\">10 sec ago</time>\r\n              <h6 class=\"sender\">John Doe</h6>\r\n              <p class=\"body\">Hey guys, didn't you notice this conversation is sort of jubberish?</p>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <footer class=\"bg-body-light bt\">\r\n        <div class=\"input-group input-group-sm\">\r\n          <input type=\"text\" class=\"form-control\" placeholder=\"Your message\">\r\n          <span class=\"input-group-btn\">\r\n            <button type=\"submit\" class=\"btn btn-default\">\r\n              Send\r\n            </button>\r\n          </span>\r\n        </div>\r\n      </footer>\r\n    </section>\r\n  </div>\r\n  <div class=\"col-lg-4 col-xs-12\">\r\n    <section class=\"widget bg-gray-dark text-white\">\r\n      <div class=\"widget-body\" realtime-traffic-widget>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n<div class=\"row\">\r\n  <div class=\"col-lg-3 col-xs-12\">\r\n    <section class=\"widget windget-padding-lg\">\r\n      <div class=\"widget-body clearfix\">\r\n        <div live-tile class=\"live-tile\" data-mode=\"carousel\" data-speed=\"750\" data-delay=\"3000\" data-height=\"313\">\r\n          <div>\r\n            <h3>Basic & <span class=\"fw-semi-bold\">Advanced</span> Features</h3>\r\n            <p class=\"value4 mt-lg\">All you need in one app</p>\r\n            <div class=\"h4 mt-lg mb-lg\">\r\n              <i class=\"fa fa-quote-left opacity-50\"></i>\r\n              That's awesome!\r\n              <i class=\"fa fa-quote-right opacity-50\"></i>\r\n            </div>\r\n            <div class=\"widget-footer-bottom\">\r\n              <p>Attention to what's really important</p>\r\n              <button class=\"btn btn-info btn-block mt\">Order Now!</button>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <h3>Beautiful <span class=\"fw-semi-bold\">Thing</span></h3>\r\n            <p class=\"value4 mt-lg\">Life-time package support</p>\r\n            <div class=\"h4 mt-lg mb-lg\">\r\n              <i class=\"fa fa-quote-left opacity-50\"></i>\r\n              That's awesome!\r\n              <i class=\"fa fa-quote-right opacity-50\"></i>\r\n            </div>\r\n            <div class=\"widget-footer-bottom\">\r\n              <p>Attention to what's really important</p>\r\n              <button class=\"btn btn-inverse btn-block mt\"><span class=\"fw-semi-bold text-warning\">Ready?</span></button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n  <div class=\"col-lg-3 col-xs-12\">\r\n    <section widget class=\"widget widget-chart-changes\" changes-chart-widget>\r\n    </section>\r\n  </div>\r\n  <div class=\"col-lg-3 col-xs-12\">\r\n    <section class=\"widget windget-padding-lg bg-primary text-white\">\r\n      <div class=\"widget-body clearfix\">\r\n        <div live-tile class=\"live-tile\" data-mode=\"carousel\" data-speed=\"300\" data-delay=\"3000\" data-height=\"313\">\r\n          <div>\r\n            <p class=\"h4 mt-xs\">\r\n              <i class=\"fa fa-quote-left opacity-50\"></i>\r\n              Thanks for the awesome support. That's awesome!\r\n              <i class=\"fa fa-quote-right opacity-50\"></i>\r\n            </p>\r\n            <div class=\"widget-footer-bottom\">\r\n              <span class=\"thumb pull-left mr\">\r\n                <img class=\"img-circle\" src=\"assets/img/people/a4.jpg\" alt=\"...\">\r\n              </span>\r\n              <h4 class=\"no-margin mb-xs\"><span class=\"fw-semi-bold\">Miha</span> Koshir</h4>\r\n              <p class=\"text-light\">@miha</p>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <div class=\"clearfix mt-xs\">\r\n              <span class=\"thumb pull-left mr\">\r\n                <img class=\"img-circle\" src=\"assets/img/people/a3.jpg\" alt=\"...\">\r\n              </span>\r\n              <h4 class=\"no-margin mb-xs\"><span class=\"fw-semi-bold\">Maryna</span> Ess</h4>\r\n              <p class=\"text-light\">@ess</p>\r\n            </div>\r\n            <div class=\"widget-footer-bottom\">\r\n              <p class=\"h4\">\r\n                <i class=\"fa fa-quote-left opacity-50\"></i>\r\n                Could have never imagined it would be so great!\r\n                <i class=\"fa fa-quote-right opacity-50\"></i>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n  <div class=\"col-lg-3 col-xs-12\">\r\n    <div live-tile class=\"live-tile\" data-mode=\"flip\" data-direction=\"horizontal\"\r\n         data-speed=\"600\" data-delay=\"3000\" data-height=\"373\"\r\n         data-play-onhover=\"true\">\r\n      <div>\r\n        <section class=\"widget windget-padding-lg widget-md bg-gray-dark text-white\">\r\n          <div class=\"widget-body widget-body-container\">\r\n            <div class=\"text-xs-center\">\r\n              <i class=\"fa fa-child text-warning fa-5x\"></i>\r\n            </div>\r\n            <h3 class=\"fw-normal\">Sing Web App</h3>\r\n            <div class=\"widget-footer-bottom\">\r\n              <div class=\"mb-sm\">Cutting-edge tech and design delivered</div>\r\n              <p><button class=\"btn btn-default btn-block\">Hover over me!</button></p>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n      <div>\r\n        <section class=\"widget windget-padding-lg widget-md\">\r\n          <div class=\"widget-body widget-body-container\">\r\n            <div class=\"text-xs-center\">\r\n              <i class=\"fa fa-globe text-primary fa-5x\"></i>\r\n            </div>\r\n            <h3 class=\"fw-normal\">Join The Web Now!</h3>\r\n            <div class=\"widget-footer-bottom\">\r\n              <div class=\"mb-sm\">Cutting-edge tech and design delivered</div>\r\n              <p><button class=\"btn btn-gray btn-block\">Join now!</button></p>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"

/***/ },

/***/ "./src/app/widgets/years-map-widget/fake-world-data.service.ts":
/***/ function(module, exports) {

"use strict";
"use strict";
/* tslint:disable */
var FakeWorldData = (function () {
    function FakeWorldData() {
        this.fakeWorldData = {
            "2008": {
                "areas": {
                    "AF": {
                        "value": 19880820,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Afghanistan</span><br />Population : 19880820"
                        }
                    },
                    "ZA": {
                        "value": 25183856,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">South Africa</span><br />Population : 25183856"
                        }
                    },
                    "AL": {
                        "value": 51947647,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Albania</span><br />Population : 51947647"
                        }
                    },
                    "DZ": {
                        "value": 25677417,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Algeria</span><br />Population : 25677417"
                        }
                    },
                    "DE": {
                        "value": 17767648,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Germany</span><br />Population : 17767648"
                        }
                    },
                    "AD": {
                        "value": 8241925,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Andorra</span><br />Population : 8241925"
                        }
                    },
                    "AO": {
                        "value": 20995901,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Angola</span><br />Population : 20995901"
                        }
                    },
                    "AG": {
                        "value": 10080896,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Antigua And Barbuda</span><br />Population : 10080896"
                        }
                    },
                    "SA": {
                        "value": 43615610,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saudi Arabia</span><br />Population : 43615610"
                        }
                    },
                    "AR": {
                        "value": 44063471,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Argentina</span><br />Population : 44063471"
                        }
                    },
                    "AM": {
                        "value": 50763102,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Armenia</span><br />Population : 50763102"
                        }
                    },
                    "AU": {
                        "value": 23849414,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Australia</span><br />Population : 23849414"
                        }
                    },
                    "AT": {
                        "value": 35652829,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Austria</span><br />Population : 35652829"
                        }
                    },
                    "AZ": {
                        "value": 48414118,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Azerbaijan</span><br />Population : 48414118"
                        }
                    },
                    "BS": {
                        "value": 4602371,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bahamas</span><br />Population : 4602371"
                        }
                    },
                    "BH": {
                        "value": 27673596,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bahrain</span><br />Population : 27673596"
                        }
                    },
                    "BD": {
                        "value": 21957431,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bangladesh</span><br />Population : 21957431"
                        }
                    },
                    "BB": {
                        "value": 26909491,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Barbados</span><br />Population : 26909491"
                        }
                    },
                    "BE": {
                        "value": 15416836,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belgium</span><br />Population : 15416836"
                        }
                    },
                    "BZ": {
                        "value": 12194067,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belize</span><br />Population : 12194067"
                        }
                    },
                    "BJ": {
                        "value": 657540,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Benin</span><br />Population : 657540"
                        }
                    },
                    "BT": {
                        "value": 15115216,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bhutan</span><br />Population : 15115216"
                        }
                    },
                    "BY": {
                        "value": 6459622,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belarus</span><br />Population : 6459622"
                        }
                    },
                    "MM": {
                        "value": 57901453,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Myanmar</span><br />Population : 57901453"
                        }
                    },
                    "BO": {
                        "value": 59731284,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bolivia, Plurinational State Of</span><br />Population : 59731284"
                        }
                    },
                    "BA": {
                        "value": 18646918,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bosnia And Herzegovina</span><br />Population : 18646918"
                        }
                    },
                    "BW": {
                        "value": 50733853,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Botswana</span><br />Population : 50733853"
                        }
                    },
                    "BR": {
                        "value": 35636377,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Brazil</span><br />Population : 35636377"
                        }
                    },
                    "BN": {
                        "value": 17606784,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Brunei Darussalam</span><br />Population : 17606784"
                        }
                    },
                    "BG": {
                        "value": 13170221,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bulgaria</span><br />Population : 13170221"
                        }
                    },
                    "BF": {
                        "value": 11592654,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Burkina Faso</span><br />Population : 11592654"
                        }
                    },
                    "BI": {
                        "value": 25889465,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Burundi</span><br />Population : 25889465"
                        }
                    },
                    "KH": {
                        "value": 22162167,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cambodia</span><br />Population : 22162167"
                        }
                    },
                    "CM": {
                        "value": 4300750,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cameroon</span><br />Population : 4300750"
                        }
                    },
                    "CA": {
                        "value": 21939151,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Canada</span><br />Population : 21939151"
                        }
                    },
                    "CV": {
                        "value": 19301343,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cape Verde</span><br />Population : 19301343"
                        }
                    },
                    "CF": {
                        "value": 11625558,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Central African Republic</span><br />Population : 11625558"
                        }
                    },
                    "CL": {
                        "value": 27604132,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Chile</span><br />Population : 27604132"
                        }
                    },
                    "CN": {
                        "value": 5026467,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">China</span><br />Population : 5026467"
                        }
                    },
                    "CY": {
                        "value": 36462634,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cyprus</span><br />Population : 36462634"
                        }
                    },
                    "CO": {
                        "value": 14075082,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Colombia</span><br />Population : 14075082"
                        }
                    },
                    "KM": {
                        "value": 28795990,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Comoros</span><br />Population : 28795990"
                        }
                    },
                    "CG": {
                        "value": 33857730,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Congo</span><br />Population : 33857730"
                        }
                    },
                    "CD": {
                        "value": 8113964,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Congo, The Democratic Republic Of The</span><br />Population : 8113964"
                        }
                    },
                    "KP": {
                        "value": 27638864,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Korea, Democratic People's Republic Of</span><br />Population : 27638864"
                        }
                    },
                    "KR": {
                        "value": 43441950,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Korea, Republic Of</span><br />Population : 43441950"
                        }
                    },
                    "CR": {
                        "value": 31686063,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Costa Rica</span><br />Population : 31686063"
                        }
                    },
                    "CI": {
                        "value": 14745959,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">C\u00d4te D'ivoire</span><br />Population : 14745959"
                        }
                    },
                    "HR": {
                        "value": 20495029,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Croatia</span><br />Population : 20495029"
                        }
                    },
                    "CU": {
                        "value": 17257635,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cuba</span><br />Population : 17257635"
                        }
                    },
                    "DK": {
                        "value": 11614590,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Denmark</span><br />Population : 11614590"
                        }
                    },
                    "DJ": {
                        "value": 46999243,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Djibouti</span><br />Population : 46999243"
                        }
                    },
                    "DM": {
                        "value": 50671701,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Dominica</span><br />Population : 50671701"
                        }
                    },
                    "EG": {
                        "value": 45708673,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Egypt</span><br />Population : 45708673"
                        }
                    },
                    "AE": {
                        "value": 16696438,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United Arab Emirates</span><br />Population : 16696438"
                        }
                    },
                    "EC": {
                        "value": 5664441,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ecuador</span><br />Population : 5664441"
                        }
                    },
                    "ER": {
                        "value": 26447006,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Eritrea</span><br />Population : 26447006"
                        }
                    },
                    "ES": {
                        "value": 14610687,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Spain</span><br />Population : 14610687"
                        }
                    },
                    "EE": {
                        "value": 134732,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Estonia</span><br />Population : 134732"
                        }
                    },
                    "US": {
                        "value": 1182177,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United States</span><br />Population : 1182177"
                        }
                    },
                    "ET": {
                        "value": 5849069,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ethiopia</span><br />Population : 5849069"
                        }
                    },
                    "FJ": {
                        "value": 19429303,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Fiji</span><br />Population : 19429303"
                        }
                    },
                    "FI": {
                        "value": 4982595,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Finland</span><br />Population : 4982595"
                        }
                    },
                    "FR": {
                        "value": 54143079,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">France</span><br />Population : 54143079"
                        }
                    },
                    "GA": {
                        "value": 16956015,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Gabon</span><br />Population : 16956015"
                        }
                    },
                    "GM": {
                        "value": 5880145,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Gambia</span><br />Population : 5880145"
                        }
                    },
                    "GE": {
                        "value": 44343155,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Georgia</span><br />Population : 44343155"
                        }
                    },
                    "GH": {
                        "value": 35387769,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ghana</span><br />Population : 35387769"
                        }
                    },
                    "GR": {
                        "value": 57895969,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Greece</span><br />Population : 57895969"
                        }
                    },
                    "GD": {
                        "value": 9528839,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Grenada</span><br />Population : 9528839"
                        }
                    },
                    "GT": {
                        "value": 41469534,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guatemala</span><br />Population : 41469534"
                        }
                    },
                    "GN": {
                        "value": 25406872,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guinea</span><br />Population : 25406872"
                        }
                    },
                    "GQ": {
                        "value": 36947055,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Equatorial Guinea</span><br />Population : 36947055"
                        }
                    },
                    "GW": {
                        "value": 35991010,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guinea-bissau</span><br />Population : 35991010"
                        }
                    },
                    "GY": {
                        "value": 9464859,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guyana</span><br />Population : 9464859"
                        }
                    },
                    "HT": {
                        "value": 14841015,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Haiti</span><br />Population : 14841015"
                        }
                    },
                    "HN": {
                        "value": 12137399,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Honduras</span><br />Population : 12137399"
                        }
                    },
                    "HU": {
                        "value": 1032281,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Hungary</span><br />Population : 1032281"
                        }
                    },
                    "JM": {
                        "value": 51282254,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Jamaica</span><br />Population : 51282254"
                        }
                    },
                    "JP": {
                        "value": 24280823,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Japan</span><br />Population : 24280823"
                        }
                    },
                    "MH": {
                        "value": 11545126,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Marshall Islands</span><br />Population : 11545126"
                        }
                    },
                    "PW": {
                        "value": 30068280,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Palau</span><br />Population : 30068280"
                        }
                    },
                    "SB": {
                        "value": 324844,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Solomon Islands</span><br />Population : 324844"
                        }
                    },
                    "IN": {
                        "value": 44366919,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">India</span><br />Population : 44366919"
                        }
                    },
                    "ID": {
                        "value": 33298361,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Indonesia</span><br />Population : 33298361"
                        }
                    },
                    "JO": {
                        "value": 38864630,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Jordan</span><br />Population : 38864630"
                        }
                    },
                    "IR": {
                        "value": 19445755,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iran, Islamic Republic Of</span><br />Population : 19445755"
                        }
                    },
                    "IQ": {
                        "value": 35789929,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iraq</span><br />Population : 35789929"
                        }
                    },
                    "IE": {
                        "value": 45575229,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ireland</span><br />Population : 45575229"
                        }
                    },
                    "IS": {
                        "value": 33036957,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iceland</span><br />Population : 33036957"
                        }
                    },
                    "IL": {
                        "value": 1948110,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Israel</span><br />Population : 1948110"
                        }
                    },
                    "IT": {
                        "value": 49090479,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Italy</span><br />Population : 49090479"
                        }
                    },
                    "KZ": {
                        "value": 46503855,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kazakhstan</span><br />Population : 46503855"
                        }
                    },
                    "KE": {
                        "value": 48150885,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kenya</span><br />Population : 48150885"
                        }
                    },
                    "KG": {
                        "value": 50785038,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kyrgyzstan</span><br />Population : 50785038"
                        }
                    },
                    "KI": {
                        "value": 44959192,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kiribati</span><br />Population : 44959192"
                        }
                    },
                    "KW": {
                        "value": 4262362,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kuwait</span><br />Population : 4262362"
                        }
                    },
                    "LA": {
                        "value": 29922040,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lao People's Democratic Republic</span><br />Population : 29922040"
                        }
                    },
                    "LS": {
                        "value": 59259659,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lesotho</span><br />Population : 59259659"
                        }
                    },
                    "LV": {
                        "value": 14036694,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Latvia</span><br />Population : 14036694"
                        }
                    },
                    "LB": {
                        "value": 36778879,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lebanon</span><br />Population : 36778879"
                        }
                    },
                    "LR": {
                        "value": 13916046,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Liberia</span><br />Population : 13916046"
                        }
                    },
                    "LY": {
                        "value": 10525100,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Libya</span><br />Population : 10525100"
                        }
                    },
                    "LI": {
                        "value": 36813611,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Liechtenstein</span><br />Population : 36813611"
                        }
                    },
                    "LT": {
                        "value": 52331528,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lithuania</span><br />Population : 52331528"
                        }
                    },
                    "LU": {
                        "value": 5748529,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Luxembourg</span><br />Population : 5748529"
                        }
                    },
                    "MK": {
                        "value": 37484488,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Macedonia, The Former Yugoslav Republic Of</span><br />Population : 37484488"
                        }
                    },
                    "MG": {
                        "value": 44030567,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Madagascar</span><br />Population : 44030567"
                        }
                    },
                    "MY": {
                        "value": 49048435,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malaysia</span><br />Population : 49048435"
                        }
                    },
                    "MW": {
                        "value": 40985114,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malawi</span><br />Population : 40985114"
                        }
                    },
                    "MV": {
                        "value": 3490945,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Maldives</span><br />Population : 3490945"
                        }
                    },
                    "ML": {
                        "value": 56278186,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mali</span><br />Population : 56278186"
                        }
                    },
                    "MT": {
                        "value": 55007724,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malta</span><br />Population : 55007724"
                        }
                    },
                    "MA": {
                        "value": 5441424,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Morocco</span><br />Population : 5441424"
                        }
                    },
                    "MU": {
                        "value": 41447598,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mauritius</span><br />Population : 41447598"
                        }
                    },
                    "MR": {
                        "value": 4297094,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mauritania</span><br />Population : 4297094"
                        }
                    },
                    "MX": {
                        "value": 8437521,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mexico</span><br />Population : 8437521"
                        }
                    },
                    "FM": {
                        "value": 54483088,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Micronesia, Federated States Of</span><br />Population : 54483088"
                        }
                    },
                    "MD": {
                        "value": 14707571,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Moldova, Republic Of</span><br />Population : 14707571"
                        }
                    },
                    "MC": {
                        "value": 28477917,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Monaco</span><br />Population : 28477917"
                        }
                    },
                    "MN": {
                        "value": 57215952,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mongolia</span><br />Population : 57215952"
                        }
                    },
                    "ME": {
                        "value": 14025726,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Montenegro</span><br />Population : 14025726"
                        }
                    },
                    "MZ": {
                        "value": 56173990,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mozambique</span><br />Population : 56173990"
                        }
                    },
                    "NA": {
                        "value": 59561280,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Namibia</span><br />Population : 59561280"
                        }
                    },
                    "NP": {
                        "value": 19771139,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nepal</span><br />Population : 19771139"
                        }
                    },
                    "NI": {
                        "value": 39434967,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nicaragua</span><br />Population : 39434967"
                        }
                    },
                    "NE": {
                        "value": 29199979,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Niger</span><br />Population : 29199979"
                        }
                    },
                    "NG": {
                        "value": 58237806,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nigeria</span><br />Population : 58237806"
                        }
                    },
                    "NO": {
                        "value": 43981211,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Norway</span><br />Population : 43981211"
                        }
                    },
                    "NZ": {
                        "value": 16526434,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">New Zealand</span><br />Population : 16526434"
                        }
                    },
                    "OM": {
                        "value": 6788662,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Oman</span><br />Population : 6788662"
                        }
                    },
                    "UG": {
                        "value": 15148120,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uganda</span><br />Population : 15148120"
                        }
                    },
                    "UZ": {
                        "value": 8174289,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uzbekistan</span><br />Population : 8174289"
                        }
                    },
                    "PK": {
                        "value": 40765753,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Pakistan</span><br />Population : 40765753"
                        }
                    },
                    "PS": {
                        "value": 31993167,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Palestine, State Of</span><br />Population : 31993167"
                        }
                    },
                    "PA": {
                        "value": 10782849,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Panama</span><br />Population : 10782849"
                        }
                    },
                    "PG": {
                        "value": 328500,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Papua New Guinea</span><br />Population : 328500"
                        }
                    },
                    "PY": {
                        "value": 57868549,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Paraguay</span><br />Population : 57868549"
                        }
                    },
                    "NL": {
                        "value": 58016617,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Netherlands</span><br />Population : 58016617"
                        }
                    },
                    "PE": {
                        "value": 35782617,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Peru</span><br />Population : 35782617"
                        }
                    },
                    "PH": {
                        "value": 18571969,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Philippines</span><br />Population : 18571969"
                        }
                    },
                    "PL": {
                        "value": 43500446,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Poland</span><br />Population : 43500446"
                        }
                    },
                    "PT": {
                        "value": 8112136,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Portugal</span><br />Population : 8112136"
                        }
                    },
                    "QA": {
                        "value": 50838050,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Qatar</span><br />Population : 50838050"
                        }
                    },
                    "DO": {
                        "value": 31082822,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Dominican Republic</span><br />Population : 31082822"
                        }
                    },
                    "RO": {
                        "value": 3277069,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Romania</span><br />Population : 3277069"
                        }
                    },
                    "GB": {
                        "value": 15182852,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United Kingdom</span><br />Population : 15182852"
                        }
                    },
                    "RU": {
                        "value": 46589771,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Russian Federation</span><br />Population : 46589771"
                        }
                    },
                    "RW": {
                        "value": 35989182,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Rwanda</span><br />Population : 35989182"
                        }
                    },
                    "KN": {
                        "value": 32664044,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Kitts And Nevis</span><br />Population : 32664044"
                        }
                    },
                    "SM": {
                        "value": 2481887,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">San Marino</span><br />Population : 2481887"
                        }
                    },
                    "VC": {
                        "value": 43628406,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Vincent And The Grenadines</span><br />Population : 43628406"
                        }
                    },
                    "LC": {
                        "value": 1469174,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Lucia</span><br />Population : 1469174"
                        }
                    },
                    "SV": {
                        "value": 17476996,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">El Salvador</span><br />Population : 17476996"
                        }
                    },
                    "WS": {
                        "value": 43012369,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Samoa</span><br />Population : 43012369"
                        }
                    },
                    "ST": {
                        "value": 32594580,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sao Tome And Principe</span><br />Population : 32594580"
                        }
                    },
                    "SN": {
                        "value": 45450925,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Senegal</span><br />Population : 45450925"
                        }
                    },
                    "RS": {
                        "value": 53181549,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Serbia</span><br />Population : 53181549"
                        }
                    },
                    "SC": {
                        "value": 127420,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Seychelles</span><br />Population : 127420"
                        }
                    },
                    "SL": {
                        "value": 34078919,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sierra Leone</span><br />Population : 34078919"
                        }
                    },
                    "SG": {
                        "value": 16312558,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Singapore</span><br />Population : 16312558"
                        }
                    },
                    "SK": {
                        "value": 25593329,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Slovakia</span><br />Population : 25593329"
                        }
                    },
                    "SI": {
                        "value": 6730166,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Slovenia</span><br />Population : 6730166"
                        }
                    },
                    "SO": {
                        "value": 38722046,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Somalia</span><br />Population : 38722046"
                        }
                    },
                    "SD": {
                        "value": 31982199,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sudan</span><br />Population : 31982199"
                        }
                    },
                    "SS": {
                        "value": 30177960,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">South Sudan</span><br />Population : 30177960"
                        }
                    },
                    "LK": {
                        "value": 45973734,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sri Lanka</span><br />Population : 45973734"
                        }
                    },
                    "SE": {
                        "value": 7214587,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sweden</span><br />Population : 7214587"
                        }
                    },
                    "CH": {
                        "value": 737973,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Switzerland</span><br />Population : 737973"
                        }
                    },
                    "SR": {
                        "value": 12651068,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Suriname</span><br />Population : 12651068"
                        }
                    },
                    "SZ": {
                        "value": 11161245,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Swaziland</span><br />Population : 11161245"
                        }
                    },
                    "SY": {
                        "value": 49997168,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Syrian Arab Republic</span><br />Population : 49997168"
                        }
                    },
                    "TJ": {
                        "value": 40508005,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tajikistan</span><br />Population : 40508005"
                        }
                    },
                    "TZ": {
                        "value": 8578277,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tanzania, United Republic Of</span><br />Population : 8578277"
                        }
                    },
                    "TD": {
                        "value": 5245828,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Chad</span><br />Population : 5245828"
                        }
                    },
                    "CZ": {
                        "value": 7960412,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Czech Republic</span><br />Population : 7960412"
                        }
                    },
                    "TH": {
                        "value": 59570420,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Thailand</span><br />Population : 59570420"
                        }
                    },
                    "TL": {
                        "value": 23575214,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Timor-leste</span><br />Population : 23575214"
                        }
                    },
                    "TG": {
                        "value": 41330606,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Togo</span><br />Population : 41330606"
                        }
                    },
                    "TO": {
                        "value": 51444947,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tonga</span><br />Population : 51444947"
                        }
                    },
                    "TT": {
                        "value": 56053342,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Trinidad And Tobago</span><br />Population : 56053342"
                        }
                    },
                    "TN": {
                        "value": 33307501,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tunisia</span><br />Population : 33307501"
                        }
                    },
                    "TM": {
                        "value": 42668704,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Turkmenistan</span><br />Population : 42668704"
                        }
                    },
                    "TR": {
                        "value": 21341394,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Turkey</span><br />Population : 21341394"
                        }
                    },
                    "TV": {
                        "value": 58034897,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tuvalu</span><br />Population : 58034897"
                        }
                    },
                    "VU": {
                        "value": 43390766,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Vanuatu</span><br />Population : 43390766"
                        }
                    },
                    "VE": {
                        "value": 22363248,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Venezuela, Bolivarian Republic Of</span><br />Population : 22363248"
                        }
                    },
                    "VN": {
                        "value": 28090381,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Viet Nam</span><br />Population : 28090381"
                        }
                    },
                    "UA": {
                        "value": 3743209,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ukraine</span><br />Population : 3743209"
                        }
                    },
                    "UY": {
                        "value": 29490631,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uruguay</span><br />Population : 29490631"
                        }
                    },
                    "YE": {
                        "value": 23467361,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Yemen</span><br />Population : 23467361"
                        }
                    },
                    "ZM": {
                        "value": 32382532,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Zambia</span><br />Population : 32382532"
                        }
                    },
                    "ZW": {
                        "value": 41056406,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Zimbabwe</span><br />Population : 41056406"
                        }
                    }
                }
            },
            "2009": {
                "areas": {
                    "AF": {
                        "value": 52466800,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Afghanistan</span><br />Population : 52466800"
                        }
                    },
                    "ZA": {
                        "value": 26108826,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">South Africa</span><br />Population : 26108826"
                        }
                    },
                    "AL": {
                        "value": 53559946,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Albania</span><br />Population : 53559946"
                        }
                    },
                    "DZ": {
                        "value": 49796088,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Algeria</span><br />Population : 49796088"
                        }
                    },
                    "DE": {
                        "value": 16718374,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Germany</span><br />Population : 16718374"
                        }
                    },
                    "AD": {
                        "value": 26774219,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Andorra</span><br />Population : 26774219"
                        }
                    },
                    "AO": {
                        "value": 54956540,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Angola</span><br />Population : 54956540"
                        }
                    },
                    "AG": {
                        "value": 56018610,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Antigua And Barbuda</span><br />Population : 56018610"
                        }
                    },
                    "SA": {
                        "value": 54792020,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saudi Arabia</span><br />Population : 54792020"
                        }
                    },
                    "AR": {
                        "value": 47445276,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Argentina</span><br />Population : 47445276"
                        }
                    },
                    "AM": {
                        "value": 20670517,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Armenia</span><br />Population : 20670517"
                        }
                    },
                    "AU": {
                        "value": 6435858,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Australia</span><br />Population : 6435858"
                        }
                    },
                    "AT": {
                        "value": 59990860,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Austria</span><br />Population : 59990860"
                        }
                    },
                    "AZ": {
                        "value": 18862622,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Azerbaijan</span><br />Population : 18862622"
                        }
                    },
                    "BS": {
                        "value": 8730001,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bahamas</span><br />Population : 8730001"
                        }
                    },
                    "BH": {
                        "value": 56413459,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bahrain</span><br />Population : 56413459"
                        }
                    },
                    "BD": {
                        "value": 15468020,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bangladesh</span><br />Population : 15468020"
                        }
                    },
                    "BB": {
                        "value": 21516882,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Barbados</span><br />Population : 21516882"
                        }
                    },
                    "BE": {
                        "value": 47213120,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belgium</span><br />Population : 47213120"
                        }
                    },
                    "BZ": {
                        "value": 31867035,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belize</span><br />Population : 31867035"
                        }
                    },
                    "BJ": {
                        "value": 54126627,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Benin</span><br />Population : 54126627"
                        }
                    },
                    "BT": {
                        "value": 46048682,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bhutan</span><br />Population : 46048682"
                        }
                    },
                    "BY": {
                        "value": 14447995,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belarus</span><br />Population : 14447995"
                        }
                    },
                    "MM": {
                        "value": 28262213,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Myanmar</span><br />Population : 28262213"
                        }
                    },
                    "BO": {
                        "value": 39319803,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bolivia, Plurinational State Of</span><br />Population : 39319803"
                        }
                    },
                    "BA": {
                        "value": 53148645,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bosnia And Herzegovina</span><br />Population : 53148645"
                        }
                    },
                    "BW": {
                        "value": 58312754,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Botswana</span><br />Population : 58312754"
                        }
                    },
                    "BR": {
                        "value": 51214618,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Brazil</span><br />Population : 51214618"
                        }
                    },
                    "BN": {
                        "value": 44050675,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Brunei Darussalam</span><br />Population : 44050675"
                        }
                    },
                    "BG": {
                        "value": 33457398,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bulgaria</span><br />Population : 33457398"
                        }
                    },
                    "BF": {
                        "value": 57135520,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Burkina Faso</span><br />Population : 57135520"
                        }
                    },
                    "BI": {
                        "value": 16489874,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Burundi</span><br />Population : 16489874"
                        }
                    },
                    "KH": {
                        "value": 51472367,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cambodia</span><br />Population : 51472367"
                        }
                    },
                    "CM": {
                        "value": 7565564,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cameroon</span><br />Population : 7565564"
                        }
                    },
                    "CA": {
                        "value": 38994418,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Canada</span><br />Population : 38994418"
                        }
                    },
                    "CV": {
                        "value": 49503608,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cape Verde</span><br />Population : 49503608"
                        }
                    },
                    "CF": {
                        "value": 14788003,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Central African Republic</span><br />Population : 14788003"
                        }
                    },
                    "CL": {
                        "value": 26013769,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Chile</span><br />Population : 26013769"
                        }
                    },
                    "CN": {
                        "value": 2017575,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">China</span><br />Population : 2017575"
                        }
                    },
                    "CY": {
                        "value": 6121441,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cyprus</span><br />Population : 6121441"
                        }
                    },
                    "CO": {
                        "value": 36950711,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Colombia</span><br />Population : 36950711"
                        }
                    },
                    "KM": {
                        "value": 49492639,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Comoros</span><br />Population : 49492639"
                        }
                    },
                    "CG": {
                        "value": 34183115,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Congo</span><br />Population : 34183115"
                        }
                    },
                    "CD": {
                        "value": 11759002,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Congo, The Democratic Republic Of The</span><br />Population : 11759002"
                        }
                    },
                    "KP": {
                        "value": 11263614,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Korea, Democratic People's Republic Of</span><br />Population : 11263614"
                        }
                    },
                    "KR": {
                        "value": 8742797,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Korea, Republic Of</span><br />Population : 8742797"
                        }
                    },
                    "CR": {
                        "value": 13819162,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Costa Rica</span><br />Population : 13819162"
                        }
                    },
                    "CI": {
                        "value": 42081915,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">C\u00d4te D'ivoire</span><br />Population : 42081915"
                        }
                    },
                    "HR": {
                        "value": 40679837,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Croatia</span><br />Population : 40679837"
                        }
                    },
                    "CU": {
                        "value": 44154871,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cuba</span><br />Population : 44154871"
                        }
                    },
                    "DK": {
                        "value": 28903842,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Denmark</span><br />Population : 28903842"
                        }
                    },
                    "DJ": {
                        "value": 42805805,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Djibouti</span><br />Population : 42805805"
                        }
                    },
                    "DM": {
                        "value": 18502505,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Dominica</span><br />Population : 18502505"
                        }
                    },
                    "EG": {
                        "value": 26569482,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Egypt</span><br />Population : 26569482"
                        }
                    },
                    "AE": {
                        "value": 17665280,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United Arab Emirates</span><br />Population : 17665280"
                        }
                    },
                    "EC": {
                        "value": 49496295,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ecuador</span><br />Population : 49496295"
                        }
                    },
                    "ER": {
                        "value": 47684745,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Eritrea</span><br />Population : 47684745"
                        }
                    },
                    "ES": {
                        "value": 36477258,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Spain</span><br />Population : 36477258"
                        }
                    },
                    "EE": {
                        "value": 8181601,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Estonia</span><br />Population : 8181601"
                        }
                    },
                    "US": {
                        "value": 7869012,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United States</span><br />Population : 7869012"
                        }
                    },
                    "ET": {
                        "value": 21529678,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ethiopia</span><br />Population : 21529678"
                        }
                    },
                    "FJ": {
                        "value": 4618823,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Fiji</span><br />Population : 4618823"
                        }
                    },
                    "FI": {
                        "value": 58480930,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Finland</span><br />Population : 58480930"
                        }
                    },
                    "FR": {
                        "value": 13389581,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">France</span><br />Population : 13389581"
                        }
                    },
                    "GA": {
                        "value": 42990433,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Gabon</span><br />Population : 42990433"
                        }
                    },
                    "GM": {
                        "value": 11484802,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Gambia</span><br />Population : 11484802"
                        }
                    },
                    "GE": {
                        "value": 16941391,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Georgia</span><br />Population : 16941391"
                        }
                    },
                    "GH": {
                        "value": 11773626,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ghana</span><br />Population : 11773626"
                        }
                    },
                    "GR": {
                        "value": 5370132,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Greece</span><br />Population : 5370132"
                        }
                    },
                    "GD": {
                        "value": 47715821,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Grenada</span><br />Population : 47715821"
                        }
                    },
                    "GT": {
                        "value": 1491110,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guatemala</span><br />Population : 1491110"
                        }
                    },
                    "GN": {
                        "value": 38586774,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guinea</span><br />Population : 38586774"
                        }
                    },
                    "GQ": {
                        "value": 11621902,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Equatorial Guinea</span><br />Population : 11621902"
                        }
                    },
                    "GW": {
                        "value": 14102502,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guinea-bissau</span><br />Population : 14102502"
                        }
                    },
                    "GY": {
                        "value": 40208212,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guyana</span><br />Population : 40208212"
                        }
                    },
                    "HT": {
                        "value": 39544647,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Haiti</span><br />Population : 39544647"
                        }
                    },
                    "HN": {
                        "value": 14948868,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Honduras</span><br />Population : 14948868"
                        }
                    },
                    "HU": {
                        "value": 21085473,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Hungary</span><br />Population : 21085473"
                        }
                    },
                    "JM": {
                        "value": 11420822,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Jamaica</span><br />Population : 11420822"
                        }
                    },
                    "JP": {
                        "value": 50212873,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Japan</span><br />Population : 50212873"
                        }
                    },
                    "MH": {
                        "value": 58404154,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Marshall Islands</span><br />Population : 58404154"
                        }
                    },
                    "PW": {
                        "value": 29355359,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Palau</span><br />Population : 29355359"
                        }
                    },
                    "SB": {
                        "value": 3107064,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Solomon Islands</span><br />Population : 3107064"
                        }
                    },
                    "IN": {
                        "value": 16307074,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">India</span><br />Population : 16307074"
                        }
                    },
                    "ID": {
                        "value": 35290884,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Indonesia</span><br />Population : 35290884"
                        }
                    },
                    "JO": {
                        "value": 29552783,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Jordan</span><br />Population : 29552783"
                        }
                    },
                    "IR": {
                        "value": 13395065,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iran, Islamic Republic Of</span><br />Population : 13395065"
                        }
                    },
                    "IQ": {
                        "value": 33292877,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iraq</span><br />Population : 33292877"
                        }
                    },
                    "IE": {
                        "value": 48562186,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ireland</span><br />Population : 48562186"
                        }
                    },
                    "IS": {
                        "value": 42268372,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iceland</span><br />Population : 42268372"
                        }
                    },
                    "IL": {
                        "value": 10462948,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Israel</span><br />Population : 10462948"
                        }
                    },
                    "IT": {
                        "value": 46885907,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Italy</span><br />Population : 46885907"
                        }
                    },
                    "KZ": {
                        "value": 51421183,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kazakhstan</span><br />Population : 51421183"
                        }
                    },
                    "KE": {
                        "value": 58142749,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kenya</span><br />Population : 58142749"
                        }
                    },
                    "KG": {
                        "value": 52338840,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kyrgyzstan</span><br />Population : 52338840"
                        }
                    },
                    "KI": {
                        "value": 32751788,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kiribati</span><br />Population : 32751788"
                        }
                    },
                    "KW": {
                        "value": 27020999,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kuwait</span><br />Population : 27020999"
                        }
                    },
                    "LA": {
                        "value": 37866541,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lao People's Democratic Republic</span><br />Population : 37866541"
                        }
                    },
                    "LS": {
                        "value": 47300864,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lesotho</span><br />Population : 47300864"
                        }
                    },
                    "LV": {
                        "value": 56406147,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Latvia</span><br />Population : 56406147"
                        }
                    },
                    "LB": {
                        "value": 48364762,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lebanon</span><br />Population : 48364762"
                        }
                    },
                    "LR": {
                        "value": 31980371,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Liberia</span><br />Population : 31980371"
                        }
                    },
                    "LY": {
                        "value": 53377146,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Libya</span><br />Population : 53377146"
                        }
                    },
                    "LI": {
                        "value": 33614606,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Liechtenstein</span><br />Population : 33614606"
                        }
                    },
                    "LT": {
                        "value": 38705594,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lithuania</span><br />Population : 38705594"
                        }
                    },
                    "LU": {
                        "value": 1174865,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Luxembourg</span><br />Population : 1174865"
                        }
                    },
                    "MK": {
                        "value": 38745810,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Macedonia, The Former Yugoslav Republic Of</span><br />Population : 38745810"
                        }
                    },
                    "MG": {
                        "value": 29892792,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Madagascar</span><br />Population : 29892792"
                        }
                    },
                    "MY": {
                        "value": 11146621,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malaysia</span><br />Population : 11146621"
                        }
                    },
                    "MW": {
                        "value": 55890650,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malawi</span><br />Population : 55890650"
                        }
                    },
                    "MV": {
                        "value": 1534982,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Maldives</span><br />Population : 1534982"
                        }
                    },
                    "ML": {
                        "value": 20906329,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mali</span><br />Population : 20906329"
                        }
                    },
                    "MT": {
                        "value": 8740969,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malta</span><br />Population : 8740969"
                        }
                    },
                    "MA": {
                        "value": 37018347,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Morocco</span><br />Population : 37018347"
                        }
                    },
                    "MU": {
                        "value": 29722787,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mauritius</span><br />Population : 29722787"
                        }
                    },
                    "MR": {
                        "value": 12270843,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mauritania</span><br />Population : 12270843"
                        }
                    },
                    "MX": {
                        "value": 44591764,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mexico</span><br />Population : 44591764"
                        }
                    },
                    "FM": {
                        "value": 54998584,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Micronesia, Federated States Of</span><br />Population : 54998584"
                        }
                    },
                    "MD": {
                        "value": 1637350,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Moldova, Republic Of</span><br />Population : 1637350"
                        }
                    },
                    "MC": {
                        "value": 39551959,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Monaco</span><br />Population : 39551959"
                        }
                    },
                    "MN": {
                        "value": 41952127,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mongolia</span><br />Population : 41952127"
                        }
                    },
                    "ME": {
                        "value": 10621985,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Montenegro</span><br />Population : 10621985"
                        }
                    },
                    "MZ": {
                        "value": 5256796,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mozambique</span><br />Population : 5256796"
                        }
                    },
                    "NA": {
                        "value": 48465302,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Namibia</span><br />Population : 48465302"
                        }
                    },
                    "NP": {
                        "value": 13925186,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nepal</span><br />Population : 13925186"
                        }
                    },
                    "NI": {
                        "value": 14329175,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nicaragua</span><br />Population : 14329175"
                        }
                    },
                    "NE": {
                        "value": 38709250,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Niger</span><br />Population : 38709250"
                        }
                    },
                    "NG": {
                        "value": 14676495,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nigeria</span><br />Population : 14676495"
                        }
                    },
                    "NO": {
                        "value": 3564065,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Norway</span><br />Population : 3564065"
                        }
                    },
                    "NZ": {
                        "value": 26810779,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">New Zealand</span><br />Population : 26810779"
                        }
                    },
                    "OM": {
                        "value": 10272836,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Oman</span><br />Population : 10272836"
                        }
                    },
                    "UG": {
                        "value": 3701165,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uganda</span><br />Population : 3701165"
                        }
                    },
                    "UZ": {
                        "value": 23971890,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uzbekistan</span><br />Population : 23971890"
                        }
                    },
                    "PK": {
                        "value": 38707422,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Pakistan</span><br />Population : 38707422"
                        }
                    },
                    "PS": {
                        "value": 37875681,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Palestine, State Of</span><br />Population : 37875681"
                        }
                    },
                    "PA": {
                        "value": 51104938,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Panama</span><br />Population : 51104938"
                        }
                    },
                    "PG": {
                        "value": 58301786,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Papua New Guinea</span><br />Population : 58301786"
                        }
                    },
                    "PY": {
                        "value": 10709729,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Paraguay</span><br />Population : 10709729"
                        }
                    },
                    "NL": {
                        "value": 29795908,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Netherlands</span><br />Population : 29795908"
                        }
                    },
                    "PE": {
                        "value": 42703436,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Peru</span><br />Population : 42703436"
                        }
                    },
                    "PH": {
                        "value": 59756876,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Philippines</span><br />Population : 59756876"
                        }
                    },
                    "PL": {
                        "value": 53258326,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Poland</span><br />Population : 53258326"
                        }
                    },
                    "PT": {
                        "value": 44061643,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Portugal</span><br />Population : 44061643"
                        }
                    },
                    "QA": {
                        "value": 14062286,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Qatar</span><br />Population : 14062286"
                        }
                    },
                    "DO": {
                        "value": 11490286,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Dominican Republic</span><br />Population : 11490286"
                        }
                    },
                    "RO": {
                        "value": 7243835,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Romania</span><br />Population : 7243835"
                        }
                    },
                    "GB": {
                        "value": 48851010,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United Kingdom</span><br />Population : 48851010"
                        }
                    },
                    "RU": {
                        "value": 30697113,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Russian Federation</span><br />Population : 30697113"
                        }
                    },
                    "RW": {
                        "value": 46405142,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Rwanda</span><br />Population : 46405142"
                        }
                    },
                    "KN": {
                        "value": 43006885,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Kitts And Nevis</span><br />Population : 43006885"
                        }
                    },
                    "SM": {
                        "value": 42292136,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">San Marino</span><br />Population : 42292136"
                        }
                    },
                    "VC": {
                        "value": 8373541,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Vincent And The Grenadines</span><br />Population : 8373541"
                        }
                    },
                    "LC": {
                        "value": 27854568,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Lucia</span><br />Population : 27854568"
                        }
                    },
                    "SV": {
                        "value": 1438098,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">El Salvador</span><br />Population : 1438098"
                        }
                    },
                    "WS": {
                        "value": 52463144,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Samoa</span><br />Population : 52463144"
                        }
                    },
                    "ST": {
                        "value": 12607196,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sao Tome And Principe</span><br />Population : 12607196"
                        }
                    },
                    "SN": {
                        "value": 28841690,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Senegal</span><br />Population : 28841690"
                        }
                    },
                    "RS": {
                        "value": 52878101,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Serbia</span><br />Population : 52878101"
                        }
                    },
                    "SC": {
                        "value": 17592160,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Seychelles</span><br />Population : 17592160"
                        }
                    },
                    "SL": {
                        "value": 19063702,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sierra Leone</span><br />Population : 19063702"
                        }
                    },
                    "SG": {
                        "value": 32519632,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Singapore</span><br />Population : 32519632"
                        }
                    },
                    "SK": {
                        "value": 38217517,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Slovakia</span><br />Population : 38217517"
                        }
                    },
                    "SI": {
                        "value": 25657309,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Slovenia</span><br />Population : 25657309"
                        }
                    },
                    "SO": {
                        "value": 33358685,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Somalia</span><br />Population : 33358685"
                        }
                    },
                    "SD": {
                        "value": 51991520,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sudan</span><br />Population : 51991520"
                        }
                    },
                    "SS": {
                        "value": 7996972,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">South Sudan</span><br />Population : 7996972"
                        }
                    },
                    "LK": {
                        "value": 14886715,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sri Lanka</span><br />Population : 14886715"
                        }
                    },
                    "SE": {
                        "value": 31157770,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sweden</span><br />Population : 31157770"
                        }
                    },
                    "CH": {
                        "value": 10510476,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Switzerland</span><br />Population : 10510476"
                        }
                    },
                    "SR": {
                        "value": 42707092,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Suriname</span><br />Population : 42707092"
                        }
                    },
                    "SZ": {
                        "value": 13358505,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Swaziland</span><br />Population : 13358505"
                        }
                    },
                    "SY": {
                        "value": 18076581,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Syrian Arab Republic</span><br />Population : 18076581"
                        }
                    },
                    "TJ": {
                        "value": 40979630,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tajikistan</span><br />Population : 40979630"
                        }
                    },
                    "TZ": {
                        "value": 13188501,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tanzania, United Republic Of</span><br />Population : 13188501"
                        }
                    },
                    "TD": {
                        "value": 19200802,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Chad</span><br />Population : 19200802"
                        }
                    },
                    "CZ": {
                        "value": 29680743,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Czech Republic</span><br />Population : 29680743"
                        }
                    },
                    "TH": {
                        "value": 6752102,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Thailand</span><br />Population : 6752102"
                        }
                    },
                    "TL": {
                        "value": 59831824,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Timor-leste</span><br />Population : 59831824"
                        }
                    },
                    "TG": {
                        "value": 591732,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Togo</span><br />Population : 591732"
                        }
                    },
                    "TO": {
                        "value": 11685882,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tonga</span><br />Population : 11685882"
                        }
                    },
                    "TT": {
                        "value": 40731021,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Trinidad And Tobago</span><br />Population : 40731021"
                        }
                    },
                    "TN": {
                        "value": 53477686,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tunisia</span><br />Population : 53477686"
                        }
                    },
                    "TM": {
                        "value": 15559421,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Turkmenistan</span><br />Population : 15559421"
                        }
                    },
                    "TR": {
                        "value": 59557624,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Turkey</span><br />Population : 59557624"
                        }
                    },
                    "TV": {
                        "value": 6269509,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tuvalu</span><br />Population : 6269509"
                        }
                    },
                    "VU": {
                        "value": 14716711,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Vanuatu</span><br />Population : 14716711"
                        }
                    },
                    "VE": {
                        "value": 32281992,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Venezuela, Bolivarian Republic Of</span><br />Population : 32281992"
                        }
                    },
                    "VN": {
                        "value": 59111591,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Viet Nam</span><br />Population : 59111591"
                        }
                    },
                    "UA": {
                        "value": 36270694,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ukraine</span><br />Population : 36270694"
                        }
                    },
                    "UY": {
                        "value": 53989527,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uruguay</span><br />Population : 53989527"
                        }
                    },
                    "YE": {
                        "value": 48887571,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Yemen</span><br />Population : 48887571"
                        }
                    },
                    "ZM": {
                        "value": 45913410,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Zambia</span><br />Population : 45913410"
                        }
                    },
                    "ZW": {
                        "value": 53987699,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Zimbabwe</span><br />Population : 53987699"
                        }
                    }
                }
            },
            "2010": {
                "areas": {
                    "AF": {
                        "value": 44310251,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Afghanistan</span><br />Population : 44310251"
                        }
                    },
                    "ZA": {
                        "value": 33673102,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">South Africa</span><br />Population : 33673102"
                        }
                    },
                    "AL": {
                        "value": 15131668,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Albania</span><br />Population : 15131668"
                        }
                    },
                    "DZ": {
                        "value": 37266956,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Algeria</span><br />Population : 37266956"
                        }
                    },
                    "DE": {
                        "value": 49333603,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Germany</span><br />Population : 49333603"
                        }
                    },
                    "AD": {
                        "value": 15912225,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Andorra</span><br />Population : 15912225"
                        }
                    },
                    "AO": {
                        "value": 14714883,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Angola</span><br />Population : 14714883"
                        }
                    },
                    "AG": {
                        "value": 55481177,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Antigua And Barbuda</span><br />Population : 55481177"
                        }
                    },
                    "SA": {
                        "value": 46752463,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saudi Arabia</span><br />Population : 46752463"
                        }
                    },
                    "AR": {
                        "value": 7861700,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Argentina</span><br />Population : 7861700"
                        }
                    },
                    "AM": {
                        "value": 54426419,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Armenia</span><br />Population : 54426419"
                        }
                    },
                    "AU": {
                        "value": 15082312,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Australia</span><br />Population : 15082312"
                        }
                    },
                    "AT": {
                        "value": 4744955,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Austria</span><br />Population : 4744955"
                        }
                    },
                    "AZ": {
                        "value": 15137152,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Azerbaijan</span><br />Population : 15137152"
                        }
                    },
                    "BS": {
                        "value": 27569400,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bahamas</span><br />Population : 27569400"
                        }
                    },
                    "BH": {
                        "value": 26510986,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bahrain</span><br />Population : 26510986"
                        }
                    },
                    "BD": {
                        "value": 41239206,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bangladesh</span><br />Population : 41239206"
                        }
                    },
                    "BB": {
                        "value": 13404205,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Barbados</span><br />Population : 13404205"
                        }
                    },
                    "BE": {
                        "value": 37096951,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belgium</span><br />Population : 37096951"
                        }
                    },
                    "BZ": {
                        "value": 50457825,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belize</span><br />Population : 50457825"
                        }
                    },
                    "BJ": {
                        "value": 4613339,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Benin</span><br />Population : 4613339"
                        }
                    },
                    "BT": {
                        "value": 8278485,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bhutan</span><br />Population : 8278485"
                        }
                    },
                    "BY": {
                        "value": 36212198,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belarus</span><br />Population : 36212198"
                        }
                    },
                    "MM": {
                        "value": 17663452,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Myanmar</span><br />Population : 17663452"
                        }
                    },
                    "BO": {
                        "value": 12795480,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bolivia, Plurinational State Of</span><br />Population : 12795480"
                        }
                    },
                    "BA": {
                        "value": 35325617,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bosnia And Herzegovina</span><br />Population : 35325617"
                        }
                    },
                    "BW": {
                        "value": 8068264,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Botswana</span><br />Population : 8068264"
                        }
                    },
                    "BR": {
                        "value": 8618493,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Brazil</span><br />Population : 8618493"
                        }
                    },
                    "BN": {
                        "value": 33963754,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Brunei Darussalam</span><br />Population : 33963754"
                        }
                    },
                    "BG": {
                        "value": 40261225,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bulgaria</span><br />Population : 40261225"
                        }
                    },
                    "BF": {
                        "value": 25668277,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Burkina Faso</span><br />Population : 25668277"
                        }
                    },
                    "BI": {
                        "value": 13963574,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Burundi</span><br />Population : 13963574"
                        }
                    },
                    "KH": {
                        "value": 6346286,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cambodia</span><br />Population : 6346286"
                        }
                    },
                    "CM": {
                        "value": 58650934,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cameroon</span><br />Population : 58650934"
                        }
                    },
                    "CA": {
                        "value": 12265359,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Canada</span><br />Population : 12265359"
                        }
                    },
                    "CV": {
                        "value": 54289319,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cape Verde</span><br />Population : 54289319"
                        }
                    },
                    "CF": {
                        "value": 17921200,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Central African Republic</span><br />Population : 17921200"
                        }
                    },
                    "CL": {
                        "value": 36210370,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Chile</span><br />Population : 36210370"
                        }
                    },
                    "CN": {
                        "value": 40862638,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">China</span><br />Population : 40862638"
                        }
                    },
                    "CY": {
                        "value": 436352,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cyprus</span><br />Population : 436352"
                        }
                    },
                    "CO": {
                        "value": 6916623,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Colombia</span><br />Population : 6916623"
                        }
                    },
                    "KM": {
                        "value": 8505157,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Comoros</span><br />Population : 8505157"
                        }
                    },
                    "CG": {
                        "value": 34713236,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Congo</span><br />Population : 34713236"
                        }
                    },
                    "CD": {
                        "value": 52695301,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Congo, The Democratic Republic Of The</span><br />Population : 52695301"
                        }
                    },
                    "KP": {
                        "value": 1410678,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Korea, Democratic People's Republic Of</span><br />Population : 1410678"
                        }
                    },
                    "KR": {
                        "value": 41050922,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Korea, Republic Of</span><br />Population : 41050922"
                        }
                    },
                    "CR": {
                        "value": 6920279,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Costa Rica</span><br />Population : 6920279"
                        }
                    },
                    "CI": {
                        "value": 22006787,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">C\u00d4te D'ivoire</span><br />Population : 22006787"
                        }
                    },
                    "HR": {
                        "value": 59431492,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Croatia</span><br />Population : 59431492"
                        }
                    },
                    "CU": {
                        "value": 49613288,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cuba</span><br />Population : 49613288"
                        }
                    },
                    "DK": {
                        "value": 536892,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Denmark</span><br />Population : 536892"
                        }
                    },
                    "DJ": {
                        "value": 48761438,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Djibouti</span><br />Population : 48761438"
                        }
                    },
                    "DM": {
                        "value": 29357187,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Dominica</span><br />Population : 29357187"
                        }
                    },
                    "EG": {
                        "value": 39807880,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Egypt</span><br />Population : 39807880"
                        }
                    },
                    "AE": {
                        "value": 28666202,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United Arab Emirates</span><br />Population : 28666202"
                        }
                    },
                    "EC": {
                        "value": 3799877,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ecuador</span><br />Population : 3799877"
                        }
                    },
                    "ER": {
                        "value": 29115890,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Eritrea</span><br />Population : 29115890"
                        }
                    },
                    "ES": {
                        "value": 47200324,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Spain</span><br />Population : 47200324"
                        }
                    },
                    "EE": {
                        "value": 14561331,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Estonia</span><br />Population : 14561331"
                        }
                    },
                    "US": {
                        "value": 27512732,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United States</span><br />Population : 27512732"
                        }
                    },
                    "ET": {
                        "value": 26885727,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ethiopia</span><br />Population : 26885727"
                        }
                    },
                    "FJ": {
                        "value": 17506244,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Fiji</span><br />Population : 17506244"
                        }
                    },
                    "FI": {
                        "value": 31225406,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Finland</span><br />Population : 31225406"
                        }
                    },
                    "FR": {
                        "value": 50640625,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">France</span><br />Population : 50640625"
                        }
                    },
                    "GA": {
                        "value": 20794821,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Gabon</span><br />Population : 20794821"
                        }
                    },
                    "GM": {
                        "value": 46191266,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Gambia</span><br />Population : 46191266"
                        }
                    },
                    "GE": {
                        "value": 1911550,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Georgia</span><br />Population : 1911550"
                        }
                    },
                    "GH": {
                        "value": 33874182,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ghana</span><br />Population : 33874182"
                        }
                    },
                    "GR": {
                        "value": 38921298,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Greece</span><br />Population : 38921298"
                        }
                    },
                    "GD": {
                        "value": 19071014,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Grenada</span><br />Population : 19071014"
                        }
                    },
                    "GT": {
                        "value": 59522892,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guatemala</span><br />Population : 59522892"
                        }
                    },
                    "GN": {
                        "value": 27754028,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guinea</span><br />Population : 27754028"
                        }
                    },
                    "GQ": {
                        "value": 19493283,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Equatorial Guinea</span><br />Population : 19493283"
                        }
                    },
                    "GW": {
                        "value": 31611115,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guinea-bissau</span><br />Population : 31611115"
                        }
                    },
                    "GY": {
                        "value": 7512552,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guyana</span><br />Population : 7512552"
                        }
                    },
                    "HT": {
                        "value": 52870789,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Haiti</span><br />Population : 52870789"
                        }
                    },
                    "HN": {
                        "value": 50488901,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Honduras</span><br />Population : 50488901"
                        }
                    },
                    "HU": {
                        "value": 29527191,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Hungary</span><br />Population : 29527191"
                        }
                    },
                    "JM": {
                        "value": 38683658,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Jamaica</span><br />Population : 38683658"
                        }
                    },
                    "JP": {
                        "value": 39965088,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Japan</span><br />Population : 39965088"
                        }
                    },
                    "MH": {
                        "value": 10236276,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Marshall Islands</span><br />Population : 10236276"
                        }
                    },
                    "PW": {
                        "value": 48384870,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Palau</span><br />Population : 48384870"
                        }
                    },
                    "SB": {
                        "value": 16389334,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Solomon Islands</span><br />Population : 16389334"
                        }
                    },
                    "IN": {
                        "value": 9627551,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">India</span><br />Population : 9627551"
                        }
                    },
                    "ID": {
                        "value": 46613535,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Indonesia</span><br />Population : 46613535"
                        }
                    },
                    "JO": {
                        "value": 33899774,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Jordan</span><br />Population : 33899774"
                        }
                    },
                    "IR": {
                        "value": 13632705,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iran, Islamic Republic Of</span><br />Population : 13632705"
                        }
                    },
                    "IQ": {
                        "value": 12398803,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iraq</span><br />Population : 12398803"
                        }
                    },
                    "IE": {
                        "value": 37948801,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ireland</span><br />Population : 37948801"
                        }
                    },
                    "IS": {
                        "value": 21637530,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iceland</span><br />Population : 21637530"
                        }
                    },
                    "IL": {
                        "value": 13566897,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Israel</span><br />Population : 13566897"
                        }
                    },
                    "IT": {
                        "value": 8969470,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Italy</span><br />Population : 8969470"
                        }
                    },
                    "KZ": {
                        "value": 12320199,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kazakhstan</span><br />Population : 12320199"
                        }
                    },
                    "KE": {
                        "value": 17213763,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kenya</span><br />Population : 17213763"
                        }
                    },
                    "KG": {
                        "value": 29295035,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kyrgyzstan</span><br />Population : 29295035"
                        }
                    },
                    "KI": {
                        "value": 49880176,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kiribati</span><br />Population : 49880176"
                        }
                    },
                    "KW": {
                        "value": 27755856,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kuwait</span><br />Population : 27755856"
                        }
                    },
                    "LA": {
                        "value": 56194098,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lao People's Democratic Republic</span><br />Population : 56194098"
                        }
                    },
                    "LS": {
                        "value": 43970243,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lesotho</span><br />Population : 43970243"
                        }
                    },
                    "LV": {
                        "value": 35921546,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Latvia</span><br />Population : 35921546"
                        }
                    },
                    "LB": {
                        "value": 52433896,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lebanon</span><br />Population : 52433896"
                        }
                    },
                    "LR": {
                        "value": 24394159,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Liberia</span><br />Population : 24394159"
                        }
                    },
                    "LY": {
                        "value": 10795645,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Libya</span><br />Population : 10795645"
                        }
                    },
                    "LI": {
                        "value": 17634204,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Liechtenstein</span><br />Population : 17634204"
                        }
                    },
                    "LT": {
                        "value": 24582443,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lithuania</span><br />Population : 24582443"
                        }
                    },
                    "LU": {
                        "value": 17279571,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Luxembourg</span><br />Population : 17279571"
                        }
                    },
                    "MK": {
                        "value": 32724368,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Macedonia, The Former Yugoslav Republic Of</span><br />Population : 32724368"
                        }
                    },
                    "MG": {
                        "value": 15608777,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Madagascar</span><br />Population : 15608777"
                        }
                    },
                    "MY": {
                        "value": 32179623,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malaysia</span><br />Population : 32179623"
                        }
                    },
                    "MW": {
                        "value": 40465961,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malawi</span><br />Population : 40465961"
                        }
                    },
                    "MV": {
                        "value": 3059536,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Maldives</span><br />Population : 3059536"
                        }
                    },
                    "ML": {
                        "value": 20485889,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mali</span><br />Population : 20485889"
                        }
                    },
                    "MT": {
                        "value": 13453561,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malta</span><br />Population : 13453561"
                        }
                    },
                    "MA": {
                        "value": 9718951,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Morocco</span><br />Population : 9718951"
                        }
                    },
                    "MU": {
                        "value": 24754275,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mauritius</span><br />Population : 24754275"
                        }
                    },
                    "MR": {
                        "value": 52856165,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mauritania</span><br />Population : 52856165"
                        }
                    },
                    "MX": {
                        "value": 56382383,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mexico</span><br />Population : 56382383"
                        }
                    },
                    "FM": {
                        "value": 50454169,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Micronesia, Federated States Of</span><br />Population : 50454169"
                        }
                    },
                    "MD": {
                        "value": 51011710,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Moldova, Republic Of</span><br />Population : 51011710"
                        }
                    },
                    "MC": {
                        "value": 43460230,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Monaco</span><br />Population : 43460230"
                        }
                    },
                    "MN": {
                        "value": 39294211,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mongolia</span><br />Population : 39294211"
                        }
                    },
                    "ME": {
                        "value": 18537237,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Montenegro</span><br />Population : 18537237"
                        }
                    },
                    "MZ": {
                        "value": 5084964,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mozambique</span><br />Population : 5084964"
                        }
                    },
                    "NA": {
                        "value": 12888708,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Namibia</span><br />Population : 12888708"
                        }
                    },
                    "NP": {
                        "value": 50167173,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nepal</span><br />Population : 50167173"
                        }
                    },
                    "NI": {
                        "value": 39383783,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nicaragua</span><br />Population : 39383783"
                        }
                    },
                    "NE": {
                        "value": 19877164,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Niger</span><br />Population : 19877164"
                        }
                    },
                    "NG": {
                        "value": 11682226,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nigeria</span><br />Population : 11682226"
                        }
                    },
                    "NO": {
                        "value": 27229391,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Norway</span><br />Population : 27229391"
                        }
                    },
                    "NZ": {
                        "value": 28759430,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">New Zealand</span><br />Population : 28759430"
                        }
                    },
                    "OM": {
                        "value": 18641434,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Oman</span><br />Population : 18641434"
                        }
                    },
                    "UG": {
                        "value": 531408,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uganda</span><br />Population : 531408"
                        }
                    },
                    "UZ": {
                        "value": 58458994,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uzbekistan</span><br />Population : 58458994"
                        }
                    },
                    "PK": {
                        "value": 52179804,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Pakistan</span><br />Population : 52179804"
                        }
                    },
                    "PS": {
                        "value": 14480899,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Palestine, State Of</span><br />Population : 14480899"
                        }
                    },
                    "PA": {
                        "value": 29976880,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Panama</span><br />Population : 29976880"
                        }
                    },
                    "PG": {
                        "value": 22184103,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Papua New Guinea</span><br />Population : 22184103"
                        }
                    },
                    "PY": {
                        "value": 25410528,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Paraguay</span><br />Population : 25410528"
                        }
                    },
                    "NL": {
                        "value": 50448685,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Netherlands</span><br />Population : 50448685"
                        }
                    },
                    "PE": {
                        "value": 809265,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Peru</span><br />Population : 809265"
                        }
                    },
                    "PH": {
                        "value": 6382846,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Philippines</span><br />Population : 6382846"
                        }
                    },
                    "PL": {
                        "value": 13967230,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Poland</span><br />Population : 13967230"
                        }
                    },
                    "PT": {
                        "value": 19847915,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Portugal</span><br />Population : 19847915"
                        }
                    },
                    "QA": {
                        "value": 23469189,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Qatar</span><br />Population : 23469189"
                        }
                    },
                    "DO": {
                        "value": 9183346,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Dominican Republic</span><br />Population : 9183346"
                        }
                    },
                    "RO": {
                        "value": 53415534,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Romania</span><br />Population : 53415534"
                        }
                    },
                    "GB": {
                        "value": 25631717,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United Kingdom</span><br />Population : 25631717"
                        }
                    },
                    "RU": {
                        "value": 58647278,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Russian Federation</span><br />Population : 58647278"
                        }
                    },
                    "RW": {
                        "value": 58663730,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Rwanda</span><br />Population : 58663730"
                        }
                    },
                    "KN": {
                        "value": 29571063,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Kitts And Nevis</span><br />Population : 29571063"
                        }
                    },
                    "SM": {
                        "value": 21003213,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">San Marino</span><br />Population : 21003213"
                        }
                    },
                    "VC": {
                        "value": 37084155,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Vincent And The Grenadines</span><br />Population : 37084155"
                        }
                    },
                    "LC": {
                        "value": 33152121,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Lucia</span><br />Population : 33152121"
                        }
                    },
                    "SV": {
                        "value": 37899445,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">El Salvador</span><br />Population : 37899445"
                        }
                    },
                    "WS": {
                        "value": 49015531,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Samoa</span><br />Population : 49015531"
                        }
                    },
                    "ST": {
                        "value": 39270447,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sao Tome And Principe</span><br />Population : 39270447"
                        }
                    },
                    "SN": {
                        "value": 20626645,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Senegal</span><br />Population : 20626645"
                        }
                    },
                    "RS": {
                        "value": 24116302,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Serbia</span><br />Population : 24116302"
                        }
                    },
                    "SC": {
                        "value": 2971792,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Seychelles</span><br />Population : 2971792"
                        }
                    },
                    "SL": {
                        "value": 55846778,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sierra Leone</span><br />Population : 55846778"
                        }
                    },
                    "SG": {
                        "value": 19215426,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Singapore</span><br />Population : 19215426"
                        }
                    },
                    "SK": {
                        "value": 23787262,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Slovakia</span><br />Population : 23787262"
                        }
                    },
                    "SI": {
                        "value": 45725125,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Slovenia</span><br />Population : 45725125"
                        }
                    },
                    "SO": {
                        "value": 47503772,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Somalia</span><br />Population : 47503772"
                        }
                    },
                    "SD": {
                        "value": 56996592,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sudan</span><br />Population : 56996592"
                        }
                    },
                    "SS": {
                        "value": 42527948,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">South Sudan</span><br />Population : 42527948"
                        }
                    },
                    "LK": {
                        "value": 10678653,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sri Lanka</span><br />Population : 10678653"
                        }
                    },
                    "SE": {
                        "value": 4882055,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sweden</span><br />Population : 4882055"
                        }
                    },
                    "CH": {
                        "value": 12298263,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Switzerland</span><br />Population : 12298263"
                        }
                    },
                    "SR": {
                        "value": 56003986,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Suriname</span><br />Population : 56003986"
                        }
                    },
                    "SZ": {
                        "value": 785501,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Swaziland</span><br />Population : 785501"
                        }
                    },
                    "SY": {
                        "value": 8472253,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Syrian Arab Republic</span><br />Population : 8472253"
                        }
                    },
                    "TJ": {
                        "value": 32998569,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tajikistan</span><br />Population : 32998569"
                        }
                    },
                    "TZ": {
                        "value": 9930999,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tanzania, United Republic Of</span><br />Population : 9930999"
                        }
                    },
                    "TD": {
                        "value": 29148795,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Chad</span><br />Population : 29148795"
                        }
                    },
                    "CZ": {
                        "value": 48914991,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Czech Republic</span><br />Population : 48914991"
                        }
                    },
                    "TH": {
                        "value": 57325632,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Thailand</span><br />Population : 57325632"
                        }
                    },
                    "TL": {
                        "value": 59674616,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Timor-leste</span><br />Population : 59674616"
                        }
                    },
                    "TG": {
                        "value": 19021658,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Togo</span><br />Population : 19021658"
                        }
                    },
                    "TO": {
                        "value": 27000891,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tonga</span><br />Population : 27000891"
                        }
                    },
                    "TT": {
                        "value": 53457578,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Trinidad And Tobago</span><br />Population : 53457578"
                        }
                    },
                    "TN": {
                        "value": 31150458,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tunisia</span><br />Population : 31150458"
                        }
                    },
                    "TM": {
                        "value": 43407218,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Turkmenistan</span><br />Population : 43407218"
                        }
                    },
                    "TR": {
                        "value": 53170581,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Turkey</span><br />Population : 53170581"
                        }
                    },
                    "TV": {
                        "value": 19522531,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tuvalu</span><br />Population : 19522531"
                        }
                    },
                    "VU": {
                        "value": 19824151,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Vanuatu</span><br />Population : 19824151"
                        }
                    },
                    "VE": {
                        "value": 25558597,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Venezuela, Bolivarian Republic Of</span><br />Population : 25558597"
                        }
                    },
                    "VN": {
                        "value": 28214685,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Viet Nam</span><br />Population : 28214685"
                        }
                    },
                    "UA": {
                        "value": 43498618,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ukraine</span><br />Population : 43498618"
                        }
                    },
                    "UY": {
                        "value": 31311322,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uruguay</span><br />Population : 31311322"
                        }
                    },
                    "YE": {
                        "value": 38478922,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Yemen</span><br />Population : 38478922"
                        }
                    },
                    "ZM": {
                        "value": 2673828,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Zambia</span><br />Population : 2673828"
                        }
                    },
                    "ZW": {
                        "value": 3713961,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Zimbabwe</span><br />Population : 3713961"
                        }
                    }
                }
            },
            "2011": {
                "areas": {
                    "AF": {
                        "value": 59288907,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Afghanistan</span><br />Population : 59288907"
                        }
                    },
                    "ZA": {
                        "value": 2249731,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">South Africa</span><br />Population : 2249731"
                        }
                    },
                    "AL": {
                        "value": 54824924,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Albania</span><br />Population : 54824924"
                        }
                    },
                    "DZ": {
                        "value": 49159943,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Algeria</span><br />Population : 49159943"
                        }
                    },
                    "DE": {
                        "value": 3534817,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Germany</span><br />Population : 3534817"
                        }
                    },
                    "AD": {
                        "value": 38597742,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Andorra</span><br />Population : 38597742"
                        }
                    },
                    "AO": {
                        "value": 52126792,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Angola</span><br />Population : 52126792"
                        }
                    },
                    "AG": {
                        "value": 28357269,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Antigua And Barbuda</span><br />Population : 28357269"
                        }
                    },
                    "SA": {
                        "value": 30962173,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saudi Arabia</span><br />Population : 30962173"
                        }
                    },
                    "AR": {
                        "value": 36923291,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Argentina</span><br />Population : 36923291"
                        }
                    },
                    "AM": {
                        "value": 38080417,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Armenia</span><br />Population : 38080417"
                        }
                    },
                    "AU": {
                        "value": 28496197,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Australia</span><br />Population : 28496197"
                        }
                    },
                    "AT": {
                        "value": 4924099,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Austria</span><br />Population : 4924099"
                        }
                    },
                    "AZ": {
                        "value": 17817004,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Azerbaijan</span><br />Population : 17817004"
                        }
                    },
                    "BS": {
                        "value": 40763925,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bahamas</span><br />Population : 40763925"
                        }
                    },
                    "BH": {
                        "value": 55192353,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bahrain</span><br />Population : 55192353"
                        }
                    },
                    "BD": {
                        "value": 58323722,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bangladesh</span><br />Population : 58323722"
                        }
                    },
                    "BB": {
                        "value": 31819507,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Barbados</span><br />Population : 31819507"
                        }
                    },
                    "BE": {
                        "value": 58305442,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belgium</span><br />Population : 58305442"
                        }
                    },
                    "BZ": {
                        "value": 24211359,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belize</span><br />Population : 24211359"
                        }
                    },
                    "BJ": {
                        "value": 54514164,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Benin</span><br />Population : 54514164"
                        }
                    },
                    "BT": {
                        "value": 39621423,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bhutan</span><br />Population : 39621423"
                        }
                    },
                    "BY": {
                        "value": 58883091,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belarus</span><br />Population : 58883091"
                        }
                    },
                    "MM": {
                        "value": 1068841,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Myanmar</span><br />Population : 1068841"
                        }
                    },
                    "BO": {
                        "value": 6598550,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bolivia, Plurinational State Of</span><br />Population : 6598550"
                        }
                    },
                    "BA": {
                        "value": 31863379,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bosnia And Herzegovina</span><br />Population : 31863379"
                        }
                    },
                    "BW": {
                        "value": 40624997,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Botswana</span><br />Population : 40624997"
                        }
                    },
                    "BR": {
                        "value": 21330426,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Brazil</span><br />Population : 21330426"
                        }
                    },
                    "BN": {
                        "value": 17530008,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Brunei Darussalam</span><br />Population : 17530008"
                        }
                    },
                    "BG": {
                        "value": 29135999,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bulgaria</span><br />Population : 29135999"
                        }
                    },
                    "BF": {
                        "value": 31609287,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Burkina Faso</span><br />Population : 31609287"
                        }
                    },
                    "BI": {
                        "value": 30711737,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Burundi</span><br />Population : 30711737"
                        }
                    },
                    "KH": {
                        "value": 40511661,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cambodia</span><br />Population : 40511661"
                        }
                    },
                    "CM": {
                        "value": 22079907,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cameroon</span><br />Population : 22079907"
                        }
                    },
                    "CA": {
                        "value": 29964084,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Canada</span><br />Population : 29964084"
                        }
                    },
                    "CV": {
                        "value": 4878399,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cape Verde</span><br />Population : 4878399"
                        }
                    },
                    "CF": {
                        "value": 58696634,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Central African Republic</span><br />Population : 58696634"
                        }
                    },
                    "CL": {
                        "value": 31285730,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Chile</span><br />Population : 31285730"
                        }
                    },
                    "CN": {
                        "value": 3867514,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">China</span><br />Population : 3867514"
                        }
                    },
                    "CY": {
                        "value": 9346038,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cyprus</span><br />Population : 9346038"
                        }
                    },
                    "CO": {
                        "value": 25288052,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Colombia</span><br />Population : 25288052"
                        }
                    },
                    "KM": {
                        "value": 47394092,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Comoros</span><br />Population : 47394092"
                        }
                    },
                    "CG": {
                        "value": 11347702,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Congo</span><br />Population : 11347702"
                        }
                    },
                    "CD": {
                        "value": 19780279,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Congo, The Democratic Republic Of The</span><br />Population : 19780279"
                        }
                    },
                    "KP": {
                        "value": 43239041,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Korea, Democratic People's Republic Of</span><br />Population : 43239041"
                        }
                    },
                    "KR": {
                        "value": 31095618,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Korea, Republic Of</span><br />Population : 31095618"
                        }
                    },
                    "CR": {
                        "value": 20582773,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Costa Rica</span><br />Population : 20582773"
                        }
                    },
                    "CI": {
                        "value": 41796747,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">C\u00d4te D'ivoire</span><br />Population : 41796747"
                        }
                    },
                    "HR": {
                        "value": 5852725,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Croatia</span><br />Population : 5852725"
                        }
                    },
                    "CU": {
                        "value": 32930933,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cuba</span><br />Population : 32930933"
                        }
                    },
                    "DK": {
                        "value": 29700851,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Denmark</span><br />Population : 29700851"
                        }
                    },
                    "DJ": {
                        "value": 51061066,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Djibouti</span><br />Population : 51061066"
                        }
                    },
                    "DM": {
                        "value": 16082229,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Dominica</span><br />Population : 16082229"
                        }
                    },
                    "EG": {
                        "value": 13590661,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Egypt</span><br />Population : 13590661"
                        }
                    },
                    "AE": {
                        "value": 6880062,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United Arab Emirates</span><br />Population : 6880062"
                        }
                    },
                    "EC": {
                        "value": 53188861,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ecuador</span><br />Population : 53188861"
                        }
                    },
                    "ER": {
                        "value": 27130679,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Eritrea</span><br />Population : 27130679"
                        }
                    },
                    "ES": {
                        "value": 23615430,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Spain</span><br />Population : 23615430"
                        }
                    },
                    "EE": {
                        "value": 10148532,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Estonia</span><br />Population : 10148532"
                        }
                    },
                    "US": {
                        "value": 23845758,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United States</span><br />Population : 23845758"
                        }
                    },
                    "ET": {
                        "value": 22151199,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ethiopia</span><br />Population : 22151199"
                        }
                    },
                    "FJ": {
                        "value": 23695862,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Fiji</span><br />Population : 23695862"
                        }
                    },
                    "FI": {
                        "value": 7684384,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Finland</span><br />Population : 7684384"
                        }
                    },
                    "FR": {
                        "value": 28547382,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">France</span><br />Population : 28547382"
                        }
                    },
                    "GA": {
                        "value": 14246914,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Gabon</span><br />Population : 14246914"
                        }
                    },
                    "GM": {
                        "value": 4472583,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Gambia</span><br />Population : 4472583"
                        }
                    },
                    "GE": {
                        "value": 57515744,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Georgia</span><br />Population : 57515744"
                        }
                    },
                    "GH": {
                        "value": 42959357,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ghana</span><br />Population : 42959357"
                        }
                    },
                    "GR": {
                        "value": 46470951,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Greece</span><br />Population : 46470951"
                        }
                    },
                    "GD": {
                        "value": 46436219,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Grenada</span><br />Population : 46436219"
                        }
                    },
                    "GT": {
                        "value": 8020736,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guatemala</span><br />Population : 8020736"
                        }
                    },
                    "GN": {
                        "value": 12797308,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guinea</span><br />Population : 12797308"
                        }
                    },
                    "GQ": {
                        "value": 12126431,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Equatorial Guinea</span><br />Population : 12126431"
                        }
                    },
                    "GW": {
                        "value": 20427392,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guinea-bissau</span><br />Population : 20427392"
                        }
                    },
                    "GY": {
                        "value": 37027487,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guyana</span><br />Population : 37027487"
                        }
                    },
                    "HT": {
                        "value": 33526862,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Haiti</span><br />Population : 33526862"
                        }
                    },
                    "HN": {
                        "value": 14166482,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Honduras</span><br />Population : 14166482"
                        }
                    },
                    "HU": {
                        "value": 6936731,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Hungary</span><br />Population : 6936731"
                        }
                    },
                    "JM": {
                        "value": 52814121,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Jamaica</span><br />Population : 52814121"
                        }
                    },
                    "JP": {
                        "value": 50863642,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Japan</span><br />Population : 50863642"
                        }
                    },
                    "MH": {
                        "value": 5794229,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Marshall Islands</span><br />Population : 5794229"
                        }
                    },
                    "PW": {
                        "value": 56504859,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Palau</span><br />Population : 56504859"
                        }
                    },
                    "SB": {
                        "value": 53508762,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Solomon Islands</span><br />Population : 53508762"
                        }
                    },
                    "IN": {
                        "value": 40473273,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">India</span><br />Population : 40473273"
                        }
                    },
                    "ID": {
                        "value": 30062796,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Indonesia</span><br />Population : 30062796"
                        }
                    },
                    "JO": {
                        "value": 10022400,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Jordan</span><br />Population : 10022400"
                        }
                    },
                    "IR": {
                        "value": 7289535,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iran, Islamic Republic Of</span><br />Population : 7289535"
                        }
                    },
                    "IQ": {
                        "value": 7971380,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iraq</span><br />Population : 7971380"
                        }
                    },
                    "IE": {
                        "value": 40175308,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ireland</span><br />Population : 40175308"
                        }
                    },
                    "IS": {
                        "value": 37829981,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iceland</span><br />Population : 37829981"
                        }
                    },
                    "IL": {
                        "value": 32084567,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Israel</span><br />Population : 32084567"
                        }
                    },
                    "IT": {
                        "value": 48823590,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Italy</span><br />Population : 48823590"
                        }
                    },
                    "KZ": {
                        "value": 19284891,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kazakhstan</span><br />Population : 19284891"
                        }
                    },
                    "KE": {
                        "value": 40718225,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kenya</span><br />Population : 40718225"
                        }
                    },
                    "KG": {
                        "value": 36171982,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kyrgyzstan</span><br />Population : 36171982"
                        }
                    },
                    "KI": {
                        "value": 48845526,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kiribati</span><br />Population : 48845526"
                        }
                    },
                    "KW": {
                        "value": 40394669,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kuwait</span><br />Population : 40394669"
                        }
                    },
                    "LA": {
                        "value": 9327758,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lao People's Democratic Republic</span><br />Population : 9327758"
                        }
                    },
                    "LS": {
                        "value": 17679904,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lesotho</span><br />Population : 17679904"
                        }
                    },
                    "LV": {
                        "value": 43602814,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Latvia</span><br />Population : 43602814"
                        }
                    },
                    "LB": {
                        "value": 26757767,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lebanon</span><br />Population : 26757767"
                        }
                    },
                    "LR": {
                        "value": 24149206,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Liberia</span><br />Population : 24149206"
                        }
                    },
                    "LY": {
                        "value": 4686459,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Libya</span><br />Population : 4686459"
                        }
                    },
                    "LI": {
                        "value": 38711078,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Liechtenstein</span><br />Population : 38711078"
                        }
                    },
                    "LT": {
                        "value": 51377311,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lithuania</span><br />Population : 51377311"
                        }
                    },
                    "LU": {
                        "value": 15923193,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Luxembourg</span><br />Population : 15923193"
                        }
                    },
                    "MK": {
                        "value": 55219773,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Macedonia, The Former Yugoslav Republic Of</span><br />Population : 55219773"
                        }
                    },
                    "MG": {
                        "value": 9835943,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Madagascar</span><br />Population : 9835943"
                        }
                    },
                    "MY": {
                        "value": 37506424,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malaysia</span><br />Population : 37506424"
                        }
                    },
                    "MW": {
                        "value": 5240344,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malawi</span><br />Population : 5240344"
                        }
                    },
                    "MV": {
                        "value": 17657968,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Maldives</span><br />Population : 17657968"
                        }
                    },
                    "ML": {
                        "value": 22493036,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mali</span><br />Population : 22493036"
                        }
                    },
                    "MT": {
                        "value": 58148234,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malta</span><br />Population : 58148234"
                        }
                    },
                    "MA": {
                        "value": 42641284,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Morocco</span><br />Population : 42641284"
                        }
                    },
                    "MU": {
                        "value": 9929171,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mauritius</span><br />Population : 9929171"
                        }
                    },
                    "MR": {
                        "value": 52347980,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mauritania</span><br />Population : 52347980"
                        }
                    },
                    "MX": {
                        "value": 36555863,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mexico</span><br />Population : 36555863"
                        }
                    },
                    "FM": {
                        "value": 28916638,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Micronesia, Federated States Of</span><br />Population : 28916638"
                        }
                    },
                    "MD": {
                        "value": 211508,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Moldova, Republic Of</span><br />Population : 211508"
                        }
                    },
                    "MC": {
                        "value": 45116400,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Monaco</span><br />Population : 45116400"
                        }
                    },
                    "MN": {
                        "value": 45732437,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mongolia</span><br />Population : 45732437"
                        }
                    },
                    "ME": {
                        "value": 14607031,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Montenegro</span><br />Population : 14607031"
                        }
                    },
                    "MZ": {
                        "value": 46533103,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mozambique</span><br />Population : 46533103"
                        }
                    },
                    "NA": {
                        "value": 36363922,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Namibia</span><br />Population : 36363922"
                        }
                    },
                    "NP": {
                        "value": 8931082,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nepal</span><br />Population : 8931082"
                        }
                    },
                    "NI": {
                        "value": 20303088,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nicaragua</span><br />Population : 20303088"
                        }
                    },
                    "NE": {
                        "value": 57172080,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Niger</span><br />Population : 57172080"
                        }
                    },
                    "NG": {
                        "value": 31706171,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nigeria</span><br />Population : 31706171"
                        }
                    },
                    "NO": {
                        "value": 59054923,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Norway</span><br />Population : 59054923"
                        }
                    },
                    "NZ": {
                        "value": 36645435,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">New Zealand</span><br />Population : 36645435"
                        }
                    },
                    "OM": {
                        "value": 30256564,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Oman</span><br />Population : 30256564"
                        }
                    },
                    "UG": {
                        "value": 6808770,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uganda</span><br />Population : 6808770"
                        }
                    },
                    "UZ": {
                        "value": 59457084,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uzbekistan</span><br />Population : 59457084"
                        }
                    },
                    "PK": {
                        "value": 24324695,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Pakistan</span><br />Population : 24324695"
                        }
                    },
                    "PS": {
                        "value": 53764682,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Palestine, State Of</span><br />Population : 53764682"
                        }
                    },
                    "PA": {
                        "value": 27187347,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Panama</span><br />Population : 27187347"
                        }
                    },
                    "PG": {
                        "value": 23240689,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Papua New Guinea</span><br />Population : 23240689"
                        }
                    },
                    "PY": {
                        "value": 33881494,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Paraguay</span><br />Population : 33881494"
                        }
                    },
                    "NL": {
                        "value": 6024557,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Netherlands</span><br />Population : 6024557"
                        }
                    },
                    "PE": {
                        "value": 8607525,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Peru</span><br />Population : 8607525"
                        }
                    },
                    "PH": {
                        "value": 53358866,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Philippines</span><br />Population : 53358866"
                        }
                    },
                    "PL": {
                        "value": 26006457,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Poland</span><br />Population : 26006457"
                        }
                    },
                    "PT": {
                        "value": 34914316,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Portugal</span><br />Population : 34914316"
                        }
                    },
                    "QA": {
                        "value": 16584930,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Qatar</span><br />Population : 16584930"
                        }
                    },
                    "DO": {
                        "value": 43114737,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Dominican Republic</span><br />Population : 43114737"
                        }
                    },
                    "RO": {
                        "value": 51240210,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Romania</span><br />Population : 51240210"
                        }
                    },
                    "GB": {
                        "value": 18762082,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United Kingdom</span><br />Population : 18762082"
                        }
                    },
                    "RU": {
                        "value": 26785187,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Russian Federation</span><br />Population : 26785187"
                        }
                    },
                    "RW": {
                        "value": 35561429,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Rwanda</span><br />Population : 35561429"
                        }
                    },
                    "KN": {
                        "value": 10373376,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Kitts And Nevis</span><br />Population : 10373376"
                        }
                    },
                    "SM": {
                        "value": 45545981,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">San Marino</span><br />Population : 45545981"
                        }
                    },
                    "VC": {
                        "value": 44823920,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Vincent And The Grenadines</span><br />Population : 44823920"
                        }
                    },
                    "LC": {
                        "value": 43802066,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Lucia</span><br />Population : 43802066"
                        }
                    },
                    "SV": {
                        "value": 13846582,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">El Salvador</span><br />Population : 13846582"
                        }
                    },
                    "WS": {
                        "value": 53494138,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Samoa</span><br />Population : 53494138"
                        }
                    },
                    "ST": {
                        "value": 46366754,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sao Tome And Principe</span><br />Population : 46366754"
                        }
                    },
                    "SN": {
                        "value": 50989774,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Senegal</span><br />Population : 50989774"
                        }
                    },
                    "RS": {
                        "value": 22350452,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Serbia</span><br />Population : 22350452"
                        }
                    },
                    "SC": {
                        "value": 10784677,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Seychelles</span><br />Population : 10784677"
                        }
                    },
                    "SL": {
                        "value": 37029315,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sierra Leone</span><br />Population : 37029315"
                        }
                    },
                    "SG": {
                        "value": 10327676,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Singapore</span><br />Population : 10327676"
                        }
                    },
                    "SK": {
                        "value": 26525610,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Slovakia</span><br />Population : 26525610"
                        }
                    },
                    "SI": {
                        "value": 35345725,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Slovenia</span><br />Population : 35345725"
                        }
                    },
                    "SO": {
                        "value": 52377228,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Somalia</span><br />Population : 52377228"
                        }
                    },
                    "SD": {
                        "value": 24768899,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sudan</span><br />Population : 24768899"
                        }
                    },
                    "SS": {
                        "value": 46962683,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">South Sudan</span><br />Population : 46962683"
                        }
                    },
                    "LK": {
                        "value": 35455405,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sri Lanka</span><br />Population : 35455405"
                        }
                    },
                    "SE": {
                        "value": 38126117,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sweden</span><br />Population : 38126117"
                        }
                    },
                    "CH": {
                        "value": 47516568,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Switzerland</span><br />Population : 47516568"
                        }
                    },
                    "SR": {
                        "value": 14402295,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Suriname</span><br />Population : 14402295"
                        }
                    },
                    "SZ": {
                        "value": 9241842,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Swaziland</span><br />Population : 9241842"
                        }
                    },
                    "SY": {
                        "value": 29841608,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Syrian Arab Republic</span><br />Population : 29841608"
                        }
                    },
                    "TJ": {
                        "value": 1823806,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tajikistan</span><br />Population : 1823806"
                        }
                    },
                    "TZ": {
                        "value": 9335070,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tanzania, United Republic Of</span><br />Population : 9335070"
                        }
                    },
                    "TD": {
                        "value": 44683164,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Chad</span><br />Population : 44683164"
                        }
                    },
                    "CZ": {
                        "value": 33139325,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Czech Republic</span><br />Population : 33139325"
                        }
                    },
                    "TH": {
                        "value": 20593741,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Thailand</span><br />Population : 20593741"
                        }
                    },
                    "TL": {
                        "value": 22401636,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Timor-leste</span><br />Population : 22401636"
                        }
                    },
                    "TG": {
                        "value": 20107492,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Togo</span><br />Population : 20107492"
                        }
                    },
                    "TO": {
                        "value": 23684894,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tonga</span><br />Population : 23684894"
                        }
                    },
                    "TT": {
                        "value": 27079495,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Trinidad And Tobago</span><br />Population : 27079495"
                        }
                    },
                    "TN": {
                        "value": 14292614,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tunisia</span><br />Population : 14292614"
                        }
                    },
                    "TM": {
                        "value": 23492953,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Turkmenistan</span><br />Population : 23492953"
                        }
                    },
                    "TR": {
                        "value": 7093939,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Turkey</span><br />Population : 7093939"
                        }
                    },
                    "TV": {
                        "value": 34384195,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tuvalu</span><br />Population : 34384195"
                        }
                    },
                    "VU": {
                        "value": 35548633,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Vanuatu</span><br />Population : 35548633"
                        }
                    },
                    "VE": {
                        "value": 52967673,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Venezuela, Bolivarian Republic Of</span><br />Population : 52967673"
                        }
                    },
                    "VN": {
                        "value": 18932086,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Viet Nam</span><br />Population : 18932086"
                        }
                    },
                    "UA": {
                        "value": 25660965,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ukraine</span><br />Population : 25660965"
                        }
                    },
                    "UY": {
                        "value": 46860315,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uruguay</span><br />Population : 46860315"
                        }
                    },
                    "YE": {
                        "value": 16809775,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Yemen</span><br />Population : 16809775"
                        }
                    },
                    "ZM": {
                        "value": 4914959,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Zambia</span><br />Population : 4914959"
                        }
                    },
                    "ZW": {
                        "value": 14012930,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Zimbabwe</span><br />Population : 14012930"
                        }
                    }
                }
            },
            "2012": {
                "areas": {
                    "AF": {
                        "value": 9658627,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Afghanistan</span><br />Population : 9658627"
                        }
                    },
                    "ZA": {
                        "value": 11627386,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">South Africa</span><br />Population : 11627386"
                        }
                    },
                    "AL": {
                        "value": 4404946,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Albania</span><br />Population : 4404946"
                        }
                    },
                    "DZ": {
                        "value": 17385595,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Algeria</span><br />Population : 17385595"
                        }
                    },
                    "DE": {
                        "value": 4971627,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Germany</span><br />Population : 4971627"
                        }
                    },
                    "AD": {
                        "value": 13638189,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Andorra</span><br />Population : 13638189"
                        }
                    },
                    "AO": {
                        "value": 2701248,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Angola</span><br />Population : 2701248"
                        }
                    },
                    "AG": {
                        "value": 15126184,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Antigua And Barbuda</span><br />Population : 15126184"
                        }
                    },
                    "SA": {
                        "value": 46964511,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saudi Arabia</span><br />Population : 46964511"
                        }
                    },
                    "AR": {
                        "value": 12256219,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Argentina</span><br />Population : 12256219"
                        }
                    },
                    "AM": {
                        "value": 50485245,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Armenia</span><br />Population : 50485245"
                        }
                    },
                    "AU": {
                        "value": 16025561,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Australia</span><br />Population : 16025561"
                        }
                    },
                    "AT": {
                        "value": 13965402,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Austria</span><br />Population : 13965402"
                        }
                    },
                    "AZ": {
                        "value": 43047101,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Azerbaijan</span><br />Population : 43047101"
                        }
                    },
                    "BS": {
                        "value": 11110061,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bahamas</span><br />Population : 11110061"
                        }
                    },
                    "BH": {
                        "value": 40674353,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bahrain</span><br />Population : 40674353"
                        }
                    },
                    "BD": {
                        "value": 53852427,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bangladesh</span><br />Population : 53852427"
                        }
                    },
                    "BB": {
                        "value": 51726459,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Barbados</span><br />Population : 51726459"
                        }
                    },
                    "BE": {
                        "value": 17478824,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belgium</span><br />Population : 17478824"
                        }
                    },
                    "BZ": {
                        "value": 19813183,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belize</span><br />Population : 19813183"
                        }
                    },
                    "BJ": {
                        "value": 44953708,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Benin</span><br />Population : 44953708"
                        }
                    },
                    "BT": {
                        "value": 13959918,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bhutan</span><br />Population : 13959918"
                        }
                    },
                    "BY": {
                        "value": 52744657,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belarus</span><br />Population : 52744657"
                        }
                    },
                    "MM": {
                        "value": 33932678,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Myanmar</span><br />Population : 33932678"
                        }
                    },
                    "BO": {
                        "value": 15347372,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bolivia, Plurinational State Of</span><br />Population : 15347372"
                        }
                    },
                    "BA": {
                        "value": 55163105,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bosnia And Herzegovina</span><br />Population : 55163105"
                        }
                    },
                    "BW": {
                        "value": 10210684,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Botswana</span><br />Population : 10210684"
                        }
                    },
                    "BR": {
                        "value": 13773462,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Brazil</span><br />Population : 13773462"
                        }
                    },
                    "BN": {
                        "value": 23061545,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Brunei Darussalam</span><br />Population : 23061545"
                        }
                    },
                    "BG": {
                        "value": 31201642,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bulgaria</span><br />Population : 31201642"
                        }
                    },
                    "BF": {
                        "value": 52730033,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Burkina Faso</span><br />Population : 52730033"
                        }
                    },
                    "BI": {
                        "value": 39826160,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Burundi</span><br />Population : 39826160"
                        }
                    },
                    "KH": {
                        "value": 36274350,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cambodia</span><br />Population : 36274350"
                        }
                    },
                    "CM": {
                        "value": 7591156,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cameroon</span><br />Population : 7591156"
                        }
                    },
                    "CA": {
                        "value": 13705826,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Canada</span><br />Population : 13705826"
                        }
                    },
                    "CV": {
                        "value": 42831397,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cape Verde</span><br />Population : 42831397"
                        }
                    },
                    "CF": {
                        "value": 53113913,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Central African Republic</span><br />Population : 53113913"
                        }
                    },
                    "CL": {
                        "value": 19897272,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Chile</span><br />Population : 19897272"
                        }
                    },
                    "CN": {
                        "value": 55991190,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">China</span><br />Population : 55991190"
                        }
                    },
                    "CY": {
                        "value": 43379798,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cyprus</span><br />Population : 43379798"
                        }
                    },
                    "CO": {
                        "value": 41758359,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Colombia</span><br />Population : 41758359"
                        }
                    },
                    "KM": {
                        "value": 13835614,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Comoros</span><br />Population : 13835614"
                        }
                    },
                    "CG": {
                        "value": 12989248,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Congo</span><br />Population : 12989248"
                        }
                    },
                    "CD": {
                        "value": 32111987,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Congo, The Democratic Republic Of The</span><br />Population : 32111987"
                        }
                    },
                    "KP": {
                        "value": 335812,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Korea, Democratic People's Republic Of</span><br />Population : 335812"
                        }
                    },
                    "KR": {
                        "value": 24971808,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Korea, Republic Of</span><br />Population : 24971808"
                        }
                    },
                    "CR": {
                        "value": 47553128,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Costa Rica</span><br />Population : 47553128"
                        }
                    },
                    "CI": {
                        "value": 29618591,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">C\u00d4te D'ivoire</span><br />Population : 29618591"
                        }
                    },
                    "HR": {
                        "value": 16824399,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Croatia</span><br />Population : 16824399"
                        }
                    },
                    "CU": {
                        "value": 58921479,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cuba</span><br />Population : 58921479"
                        }
                    },
                    "DK": {
                        "value": 52985953,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Denmark</span><br />Population : 52985953"
                        }
                    },
                    "DJ": {
                        "value": 26540234,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Djibouti</span><br />Population : 26540234"
                        }
                    },
                    "DM": {
                        "value": 29452243,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Dominica</span><br />Population : 29452243"
                        }
                    },
                    "EG": {
                        "value": 31450250,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Egypt</span><br />Population : 31450250"
                        }
                    },
                    "AE": {
                        "value": 12440847,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United Arab Emirates</span><br />Population : 12440847"
                        }
                    },
                    "EC": {
                        "value": 43467542,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ecuador</span><br />Population : 43467542"
                        }
                    },
                    "ER": {
                        "value": 6397470,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Eritrea</span><br />Population : 6397470"
                        }
                    },
                    "ES": {
                        "value": 8073748,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Spain</span><br />Population : 8073748"
                        }
                    },
                    "EE": {
                        "value": 58820939,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Estonia</span><br />Population : 58820939"
                        }
                    },
                    "US": {
                        "value": 11141137,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United States</span><br />Population : 11141137"
                        }
                    },
                    "ET": {
                        "value": 5688205,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ethiopia</span><br />Population : 5688205"
                        }
                    },
                    "FJ": {
                        "value": 24357599,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Fiji</span><br />Population : 24357599"
                        }
                    },
                    "FI": {
                        "value": 55479349,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Finland</span><br />Population : 55479349"
                        }
                    },
                    "FR": {
                        "value": 10051648,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">France</span><br />Population : 10051648"
                        }
                    },
                    "GA": {
                        "value": 55402573,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Gabon</span><br />Population : 55402573"
                        }
                    },
                    "GM": {
                        "value": 26017425,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Gambia</span><br />Population : 26017425"
                        }
                    },
                    "GE": {
                        "value": 15519204,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Georgia</span><br />Population : 15519204"
                        }
                    },
                    "GH": {
                        "value": 30839697,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ghana</span><br />Population : 30839697"
                        }
                    },
                    "GR": {
                        "value": 33868698,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Greece</span><br />Population : 33868698"
                        }
                    },
                    "GD": {
                        "value": 48618854,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Grenada</span><br />Population : 48618854"
                        }
                    },
                    "GT": {
                        "value": 41893631,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guatemala</span><br />Population : 41893631"
                        }
                    },
                    "GN": {
                        "value": 34195911,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guinea</span><br />Population : 34195911"
                        }
                    },
                    "GQ": {
                        "value": 29064706,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Equatorial Guinea</span><br />Population : 29064706"
                        }
                    },
                    "GW": {
                        "value": 37877509,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guinea-bissau</span><br />Population : 37877509"
                        }
                    },
                    "GY": {
                        "value": 27905753,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guyana</span><br />Population : 27905753"
                        }
                    },
                    "HT": {
                        "value": 10760913,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Haiti</span><br />Population : 10760913"
                        }
                    },
                    "HN": {
                        "value": 39118723,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Honduras</span><br />Population : 39118723"
                        }
                    },
                    "HU": {
                        "value": 29359015,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Hungary</span><br />Population : 29359015"
                        }
                    },
                    "JM": {
                        "value": 16608694,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Jamaica</span><br />Population : 16608694"
                        }
                    },
                    "JP": {
                        "value": 41025330,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Japan</span><br />Population : 41025330"
                        }
                    },
                    "MH": {
                        "value": 32208871,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Marshall Islands</span><br />Population : 32208871"
                        }
                    },
                    "PW": {
                        "value": 28678998,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Palau</span><br />Population : 28678998"
                        }
                    },
                    "SB": {
                        "value": 21105582,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Solomon Islands</span><br />Population : 21105582"
                        }
                    },
                    "IN": {
                        "value": 55729786,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">India</span><br />Population : 55729786"
                        }
                    },
                    "ID": {
                        "value": 6463278,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Indonesia</span><br />Population : 6463278"
                        }
                    },
                    "JO": {
                        "value": 11503082,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Jordan</span><br />Population : 11503082"
                        }
                    },
                    "IR": {
                        "value": 24549539,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iran, Islamic Republic Of</span><br />Population : 24549539"
                        }
                    },
                    "IQ": {
                        "value": 15564905,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iraq</span><br />Population : 15564905"
                        }
                    },
                    "IE": {
                        "value": 49860068,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ireland</span><br />Population : 49860068"
                        }
                    },
                    "IS": {
                        "value": 43346894,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iceland</span><br />Population : 43346894"
                        }
                    },
                    "IL": {
                        "value": 40043692,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Israel</span><br />Population : 40043692"
                        }
                    },
                    "IT": {
                        "value": 30971313,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Italy</span><br />Population : 30971313"
                        }
                    },
                    "KZ": {
                        "value": 40727365,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kazakhstan</span><br />Population : 40727365"
                        }
                    },
                    "KE": {
                        "value": 39976056,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kenya</span><br />Population : 39976056"
                        }
                    },
                    "KG": {
                        "value": 50741166,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kyrgyzstan</span><br />Population : 50741166"
                        }
                    },
                    "KI": {
                        "value": 2739636,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kiribati</span><br />Population : 2739636"
                        }
                    },
                    "KW": {
                        "value": 7143295,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kuwait</span><br />Population : 7143295"
                        }
                    },
                    "LA": {
                        "value": 7006195,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lao People's Democratic Republic</span><br />Population : 7006195"
                        }
                    },
                    "LS": {
                        "value": 9845083,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lesotho</span><br />Population : 9845083"
                        }
                    },
                    "LV": {
                        "value": 41310498,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Latvia</span><br />Population : 41310498"
                        }
                    },
                    "LB": {
                        "value": 7135983,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lebanon</span><br />Population : 7135983"
                        }
                    },
                    "LR": {
                        "value": 39902936,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Liberia</span><br />Population : 39902936"
                        }
                    },
                    "LY": {
                        "value": 20308572,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Libya</span><br />Population : 20308572"
                        }
                    },
                    "LI": {
                        "value": 47474524,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Liechtenstein</span><br />Population : 47474524"
                        }
                    },
                    "LT": {
                        "value": 8883554,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lithuania</span><br />Population : 8883554"
                        }
                    },
                    "LU": {
                        "value": 24481903,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Luxembourg</span><br />Population : 24481903"
                        }
                    },
                    "MK": {
                        "value": 35334757,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Macedonia, The Former Yugoslav Republic Of</span><br />Population : 35334757"
                        }
                    },
                    "MG": {
                        "value": 11872339,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Madagascar</span><br />Population : 11872339"
                        }
                    },
                    "MY": {
                        "value": 10514132,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malaysia</span><br />Population : 10514132"
                        }
                    },
                    "MW": {
                        "value": 56208722,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malawi</span><br />Population : 56208722"
                        }
                    },
                    "MV": {
                        "value": 38076761,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Maldives</span><br />Population : 38076761"
                        }
                    },
                    "ML": {
                        "value": 14994568,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mali</span><br />Population : 14994568"
                        }
                    },
                    "MT": {
                        "value": 40105844,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malta</span><br />Population : 40105844"
                        }
                    },
                    "MA": {
                        "value": 20899017,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Morocco</span><br />Population : 20899017"
                        }
                    },
                    "MU": {
                        "value": 41637711,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mauritius</span><br />Population : 41637711"
                        }
                    },
                    "MR": {
                        "value": 47481836,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mauritania</span><br />Population : 47481836"
                        }
                    },
                    "MX": {
                        "value": 35886813,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mexico</span><br />Population : 35886813"
                        }
                    },
                    "FM": {
                        "value": 14018414,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Micronesia, Federated States Of</span><br />Population : 14018414"
                        }
                    },
                    "MD": {
                        "value": 29170731,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Moldova, Republic Of</span><br />Population : 29170731"
                        }
                    },
                    "MC": {
                        "value": 10124768,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Monaco</span><br />Population : 10124768"
                        }
                    },
                    "MN": {
                        "value": 25935165,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mongolia</span><br />Population : 25935165"
                        }
                    },
                    "ME": {
                        "value": 41182538,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Montenegro</span><br />Population : 41182538"
                        }
                    },
                    "MZ": {
                        "value": 13778946,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mozambique</span><br />Population : 13778946"
                        }
                    },
                    "NA": {
                        "value": 13363989,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Namibia</span><br />Population : 13363989"
                        }
                    },
                    "NP": {
                        "value": 8379025,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nepal</span><br />Population : 8379025"
                        }
                    },
                    "NI": {
                        "value": 18157013,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nicaragua</span><br />Population : 18157013"
                        }
                    },
                    "NE": {
                        "value": 38515482,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Niger</span><br />Population : 38515482"
                        }
                    },
                    "NG": {
                        "value": 17890124,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nigeria</span><br />Population : 17890124"
                        }
                    },
                    "NO": {
                        "value": 11296518,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Norway</span><br />Population : 11296518"
                        }
                    },
                    "NZ": {
                        "value": 10457464,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">New Zealand</span><br />Population : 10457464"
                        }
                    },
                    "OM": {
                        "value": 56583463,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Oman</span><br />Population : 56583463"
                        }
                    },
                    "UG": {
                        "value": 14343799,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uganda</span><br />Population : 14343799"
                        }
                    },
                    "UZ": {
                        "value": 32815768,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uzbekistan</span><br />Population : 32815768"
                        }
                    },
                    "PK": {
                        "value": 53649518,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Pakistan</span><br />Population : 53649518"
                        }
                    },
                    "PS": {
                        "value": 51136014,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Palestine, State Of</span><br />Population : 51136014"
                        }
                    },
                    "PA": {
                        "value": 23315637,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Panama</span><br />Population : 23315637"
                        }
                    },
                    "PG": {
                        "value": 41114902,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Papua New Guinea</span><br />Population : 41114902"
                        }
                    },
                    "PY": {
                        "value": 33548798,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Paraguay</span><br />Population : 33548798"
                        }
                    },
                    "NL": {
                        "value": 35276260,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Netherlands</span><br />Population : 35276260"
                        }
                    },
                    "PE": {
                        "value": 35446265,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Peru</span><br />Population : 35446265"
                        }
                    },
                    "PH": {
                        "value": 34322043,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Philippines</span><br />Population : 34322043"
                        }
                    },
                    "PL": {
                        "value": 45620929,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Poland</span><br />Population : 45620929"
                        }
                    },
                    "PT": {
                        "value": 52057328,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Portugal</span><br />Population : 52057328"
                        }
                    },
                    "QA": {
                        "value": 11426306,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Qatar</span><br />Population : 11426306"
                        }
                    },
                    "DO": {
                        "value": 40515317,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Dominican Republic</span><br />Population : 40515317"
                        }
                    },
                    "RO": {
                        "value": 35581537,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Romania</span><br />Population : 35581537"
                        }
                    },
                    "GB": {
                        "value": 54682340,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United Kingdom</span><br />Population : 54682340"
                        }
                    },
                    "RU": {
                        "value": 1796386,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Russian Federation</span><br />Population : 1796386"
                        }
                    },
                    "RW": {
                        "value": 57822849,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Rwanda</span><br />Population : 57822849"
                        }
                    },
                    "KN": {
                        "value": 38996246,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Kitts And Nevis</span><br />Population : 38996246"
                        }
                    },
                    "SM": {
                        "value": 26304422,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">San Marino</span><br />Population : 26304422"
                        }
                    },
                    "VC": {
                        "value": 27147131,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Vincent And The Grenadines</span><br />Population : 27147131"
                        }
                    },
                    "LC": {
                        "value": 54422763,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Lucia</span><br />Population : 54422763"
                        }
                    },
                    "SV": {
                        "value": 1580682,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">El Salvador</span><br />Population : 1580682"
                        }
                    },
                    "WS": {
                        "value": 39926700,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Samoa</span><br />Population : 39926700"
                        }
                    },
                    "ST": {
                        "value": 18219165,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sao Tome And Principe</span><br />Population : 18219165"
                        }
                    },
                    "SN": {
                        "value": 28443185,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Senegal</span><br />Population : 28443185"
                        }
                    },
                    "RS": {
                        "value": 18800470,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Serbia</span><br />Population : 18800470"
                        }
                    },
                    "SC": {
                        "value": 18802298,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Seychelles</span><br />Population : 18802298"
                        }
                    },
                    "SL": {
                        "value": 55503113,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sierra Leone</span><br />Population : 55503113"
                        }
                    },
                    "SG": {
                        "value": 7962240,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Singapore</span><br />Population : 7962240"
                        }
                    },
                    "SK": {
                        "value": 36371234,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Slovakia</span><br />Population : 36371234"
                        }
                    },
                    "SI": {
                        "value": 35934342,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Slovenia</span><br />Population : 35934342"
                        }
                    },
                    "SO": {
                        "value": 9839599,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Somalia</span><br />Population : 9839599"
                        }
                    },
                    "SD": {
                        "value": 51008054,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sudan</span><br />Population : 51008054"
                        }
                    },
                    "SS": {
                        "value": 29958600,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">South Sudan</span><br />Population : 29958600"
                        }
                    },
                    "LK": {
                        "value": 14575955,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sri Lanka</span><br />Population : 14575955"
                        }
                    },
                    "SE": {
                        "value": 21619250,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sweden</span><br />Population : 21619250"
                        }
                    },
                    "CH": {
                        "value": 5958749,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Switzerland</span><br />Population : 5958749"
                        }
                    },
                    "SR": {
                        "value": 5178192,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Suriname</span><br />Population : 5178192"
                        }
                    },
                    "SZ": {
                        "value": 27730264,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Swaziland</span><br />Population : 27730264"
                        }
                    },
                    "SY": {
                        "value": 21582690,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Syrian Arab Republic</span><br />Population : 21582690"
                        }
                    },
                    "TJ": {
                        "value": 50642453,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tajikistan</span><br />Population : 50642453"
                        }
                    },
                    "TZ": {
                        "value": 57495636,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tanzania, United Republic Of</span><br />Population : 57495636"
                        }
                    },
                    "TD": {
                        "value": 58550394,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Chad</span><br />Population : 58550394"
                        }
                    },
                    "CZ": {
                        "value": 30320544,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Czech Republic</span><br />Population : 30320544"
                        }
                    },
                    "TH": {
                        "value": 33437289,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Thailand</span><br />Population : 33437289"
                        }
                    },
                    "TL": {
                        "value": 12826556,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Timor-leste</span><br />Population : 12826556"
                        }
                    },
                    "TG": {
                        "value": 339468,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Togo</span><br />Population : 339468"
                        }
                    },
                    "TO": {
                        "value": 38473438,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tonga</span><br />Population : 38473438"
                        }
                    },
                    "TT": {
                        "value": 12371383,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Trinidad And Tobago</span><br />Population : 12371383"
                        }
                    },
                    "TN": {
                        "value": 26536578,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tunisia</span><br />Population : 26536578"
                        }
                    },
                    "TM": {
                        "value": 15950613,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Turkmenistan</span><br />Population : 15950613"
                        }
                    },
                    "TR": {
                        "value": 6731994,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Turkey</span><br />Population : 6731994"
                        }
                    },
                    "TV": {
                        "value": 15522860,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tuvalu</span><br />Population : 15522860"
                        }
                    },
                    "VU": {
                        "value": 44341327,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Vanuatu</span><br />Population : 44341327"
                        }
                    },
                    "VE": {
                        "value": 58586954,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Venezuela, Bolivarian Republic Of</span><br />Population : 58586954"
                        }
                    },
                    "VN": {
                        "value": 45536841,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Viet Nam</span><br />Population : 45536841"
                        }
                    },
                    "UA": {
                        "value": 41019846,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ukraine</span><br />Population : 41019846"
                        }
                    },
                    "UY": {
                        "value": 41906427,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uruguay</span><br />Population : 41906427"
                        }
                    },
                    "YE": {
                        "value": 51501615,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Yemen</span><br />Population : 51501615"
                        }
                    },
                    "ZM": {
                        "value": 55678602,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Zambia</span><br />Population : 55678602"
                        }
                    },
                    "ZW": {
                        "value": 57040464,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Zimbabwe</span><br />Population : 57040464"
                        }
                    }
                }
            },
            "2013": {
                "areas": {
                    "AF": {
                        "value": 30428397,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Afghanistan</span><br />Population : 30428397"
                        }
                    },
                    "ZA": {
                        "value": 42385364,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">South Africa</span><br />Population : 42385364"
                        }
                    },
                    "AL": {
                        "value": 23215097,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Albania</span><br />Population : 23215097"
                        }
                    },
                    "DZ": {
                        "value": 59170087,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Algeria</span><br />Population : 59170087"
                        }
                    },
                    "DE": {
                        "value": 12696768,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Germany</span><br />Population : 12696768"
                        }
                    },
                    "AD": {
                        "value": 30181616,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Andorra</span><br />Population : 30181616"
                        }
                    },
                    "AO": {
                        "value": 59475364,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Angola</span><br />Population : 59475364"
                        }
                    },
                    "AG": {
                        "value": 31932843,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Antigua And Barbuda</span><br />Population : 31932843"
                        }
                    },
                    "SA": {
                        "value": 57555961,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saudi Arabia</span><br />Population : 57555961"
                        }
                    },
                    "AR": {
                        "value": 11777282,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Argentina</span><br />Population : 11777282"
                        }
                    },
                    "AM": {
                        "value": 18871762,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Armenia</span><br />Population : 18871762"
                        }
                    },
                    "AU": {
                        "value": 12534076,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Australia</span><br />Population : 12534076"
                        }
                    },
                    "AT": {
                        "value": 58309098,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Austria</span><br />Population : 58309098"
                        }
                    },
                    "AZ": {
                        "value": 37712988,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Azerbaijan</span><br />Population : 37712988"
                        }
                    },
                    "BS": {
                        "value": 19332419,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bahamas</span><br />Population : 19332419"
                        }
                    },
                    "BH": {
                        "value": 36539411,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bahrain</span><br />Population : 36539411"
                        }
                    },
                    "BD": {
                        "value": 58009305,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bangladesh</span><br />Population : 58009305"
                        }
                    },
                    "BB": {
                        "value": 8779358,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Barbados</span><br />Population : 8779358"
                        }
                    },
                    "BE": {
                        "value": 29035458,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belgium</span><br />Population : 29035458"
                        }
                    },
                    "BZ": {
                        "value": 49664472,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belize</span><br />Population : 49664472"
                        }
                    },
                    "BJ": {
                        "value": 9859707,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Benin</span><br />Population : 9859707"
                        }
                    },
                    "BT": {
                        "value": 35417017,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bhutan</span><br />Population : 35417017"
                        }
                    },
                    "BY": {
                        "value": 46109006,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Belarus</span><br />Population : 46109006"
                        }
                    },
                    "MM": {
                        "value": 27574884,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Myanmar</span><br />Population : 27574884"
                        }
                    },
                    "BO": {
                        "value": 16813431,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bolivia, Plurinational State Of</span><br />Population : 16813431"
                        }
                    },
                    "BA": {
                        "value": 18416589,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bosnia And Herzegovina</span><br />Population : 18416589"
                        }
                    },
                    "BW": {
                        "value": 38731186,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Botswana</span><br />Population : 38731186"
                        }
                    },
                    "BR": {
                        "value": 35786273,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Brazil</span><br />Population : 35786273"
                        }
                    },
                    "BN": {
                        "value": 32073599,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Brunei Darussalam</span><br />Population : 32073599"
                        }
                    },
                    "BG": {
                        "value": 8318701,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Bulgaria</span><br />Population : 8318701"
                        }
                    },
                    "BF": {
                        "value": 5030123,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Burkina Faso</span><br />Population : 5030123"
                        }
                    },
                    "BI": {
                        "value": 49964264,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Burundi</span><br />Population : 49964264"
                        }
                    },
                    "KH": {
                        "value": 38793338,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cambodia</span><br />Population : 38793338"
                        }
                    },
                    "CM": {
                        "value": 25713977,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cameroon</span><br />Population : 25713977"
                        }
                    },
                    "CA": {
                        "value": 32983945,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Canada</span><br />Population : 32983945"
                        }
                    },
                    "CV": {
                        "value": 15824481,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cape Verde</span><br />Population : 15824481"
                        }
                    },
                    "CF": {
                        "value": 50075772,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Central African Republic</span><br />Population : 50075772"
                        }
                    },
                    "CL": {
                        "value": 1343042,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Chile</span><br />Population : 1343042"
                        }
                    },
                    "CN": {
                        "value": 920773,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">China</span><br />Population : 920773"
                        }
                    },
                    "CY": {
                        "value": 28832550,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cyprus</span><br />Population : 28832550"
                        }
                    },
                    "CO": {
                        "value": 49074027,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Colombia</span><br />Population : 49074027"
                        }
                    },
                    "KM": {
                        "value": 15696521,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Comoros</span><br />Population : 15696521"
                        }
                    },
                    "CG": {
                        "value": 56718735,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Congo</span><br />Population : 56718735"
                        }
                    },
                    "CD": {
                        "value": 34704096,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Congo, The Democratic Republic Of The</span><br />Population : 34704096"
                        }
                    },
                    "KP": {
                        "value": 48891227,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Korea, Democratic People's Republic Of</span><br />Population : 48891227"
                        }
                    },
                    "KR": {
                        "value": 59415040,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Korea, Republic Of</span><br />Population : 59415040"
                        }
                    },
                    "CR": {
                        "value": 18805954,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Costa Rica</span><br />Population : 18805954"
                        }
                    },
                    "CI": {
                        "value": 9104742,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">C\u00d4te D'ivoire</span><br />Population : 9104742"
                        }
                    },
                    "HR": {
                        "value": 32680496,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Croatia</span><br />Population : 32680496"
                        }
                    },
                    "CU": {
                        "value": 33289221,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Cuba</span><br />Population : 33289221"
                        }
                    },
                    "DK": {
                        "value": 35060556,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Denmark</span><br />Population : 35060556"
                        }
                    },
                    "DJ": {
                        "value": 17550116,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Djibouti</span><br />Population : 17550116"
                        }
                    },
                    "DM": {
                        "value": 13544961,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Dominica</span><br />Population : 13544961"
                        }
                    },
                    "EG": {
                        "value": 47759693,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Egypt</span><br />Population : 47759693"
                        }
                    },
                    "AE": {
                        "value": 43710666,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United Arab Emirates</span><br />Population : 43710666"
                        }
                    },
                    "EC": {
                        "value": 35705841,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ecuador</span><br />Population : 35705841"
                        }
                    },
                    "ER": {
                        "value": 34537747,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Eritrea</span><br />Population : 34537747"
                        }
                    },
                    "ES": {
                        "value": 3617077,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Spain</span><br />Population : 3617077"
                        }
                    },
                    "EE": {
                        "value": 12934408,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Estonia</span><br />Population : 12934408"
                        }
                    },
                    "US": {
                        "value": 9287542,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United States</span><br />Population : 9287542"
                        }
                    },
                    "ET": {
                        "value": 48861978,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ethiopia</span><br />Population : 48861978"
                        }
                    },
                    "FJ": {
                        "value": 11302002,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Fiji</span><br />Population : 11302002"
                        }
                    },
                    "FI": {
                        "value": 759909,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Finland</span><br />Population : 759909"
                        }
                    },
                    "FR": {
                        "value": 33760846,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">France</span><br />Population : 33760846"
                        }
                    },
                    "GA": {
                        "value": 39670780,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Gabon</span><br />Population : 39670780"
                        }
                    },
                    "GM": {
                        "value": 31505090,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Gambia</span><br />Population : 31505090"
                        }
                    },
                    "GE": {
                        "value": 35265292,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Georgia</span><br />Population : 35265292"
                        }
                    },
                    "GH": {
                        "value": 54841376,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ghana</span><br />Population : 54841376"
                        }
                    },
                    "GR": {
                        "value": 20067276,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Greece</span><br />Population : 20067276"
                        }
                    },
                    "GD": {
                        "value": 54866968,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Grenada</span><br />Population : 54866968"
                        }
                    },
                    "GT": {
                        "value": 54678684,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guatemala</span><br />Population : 54678684"
                        }
                    },
                    "GN": {
                        "value": 48194757,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guinea</span><br />Population : 48194757"
                        }
                    },
                    "GQ": {
                        "value": 33104593,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Equatorial Guinea</span><br />Population : 33104593"
                        }
                    },
                    "GW": {
                        "value": 42078259,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guinea-bissau</span><br />Population : 42078259"
                        }
                    },
                    "GY": {
                        "value": 27178207,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Guyana</span><br />Population : 27178207"
                        }
                    },
                    "HT": {
                        "value": 19436615,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Haiti</span><br />Population : 19436615"
                        }
                    },
                    "HN": {
                        "value": 31985855,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Honduras</span><br />Population : 31985855"
                        }
                    },
                    "HU": {
                        "value": 43679590,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Hungary</span><br />Population : 43679590"
                        }
                    },
                    "JM": {
                        "value": 10791989,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Jamaica</span><br />Population : 10791989"
                        }
                    },
                    "JP": {
                        "value": 4132574,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Japan</span><br />Population : 4132574"
                        }
                    },
                    "MH": {
                        "value": 59764188,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Marshall Islands</span><br />Population : 59764188"
                        }
                    },
                    "PW": {
                        "value": 20361584,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Palau</span><br />Population : 20361584"
                        }
                    },
                    "SB": {
                        "value": 33598154,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Solomon Islands</span><br />Population : 33598154"
                        }
                    },
                    "IN": {
                        "value": 7898260,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">India</span><br />Population : 7898260"
                        }
                    },
                    "ID": {
                        "value": 9742715,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Indonesia</span><br />Population : 9742715"
                        }
                    },
                    "JO": {
                        "value": 22664868,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Jordan</span><br />Population : 22664868"
                        }
                    },
                    "IR": {
                        "value": 33824826,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iran, Islamic Republic Of</span><br />Population : 33824826"
                        }
                    },
                    "IQ": {
                        "value": 6399298,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iraq</span><br />Population : 6399298"
                        }
                    },
                    "IE": {
                        "value": 44774564,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ireland</span><br />Population : 44774564"
                        }
                    },
                    "IS": {
                        "value": 11280066,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Iceland</span><br />Population : 11280066"
                        }
                    },
                    "IL": {
                        "value": 39550131,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Israel</span><br />Population : 39550131"
                        }
                    },
                    "IT": {
                        "value": 5251312,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Italy</span><br />Population : 5251312"
                        }
                    },
                    "KZ": {
                        "value": 58162858,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kazakhstan</span><br />Population : 58162858"
                        }
                    },
                    "KE": {
                        "value": 36747803,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kenya</span><br />Population : 36747803"
                        }
                    },
                    "KG": {
                        "value": 48902195,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kyrgyzstan</span><br />Population : 48902195"
                        }
                    },
                    "KI": {
                        "value": 40019928,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kiribati</span><br />Population : 40019928"
                        }
                    },
                    "KW": {
                        "value": 33060721,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Kuwait</span><br />Population : 33060721"
                        }
                    },
                    "LA": {
                        "value": 59758704,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lao People's Democratic Republic</span><br />Population : 59758704"
                        }
                    },
                    "LS": {
                        "value": 30059140,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lesotho</span><br />Population : 30059140"
                        }
                    },
                    "LV": {
                        "value": 56420771,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Latvia</span><br />Population : 56420771"
                        }
                    },
                    "LB": {
                        "value": 42471280,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lebanon</span><br />Population : 42471280"
                        }
                    },
                    "LR": {
                        "value": 11053393,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Liberia</span><br />Population : 11053393"
                        }
                    },
                    "LY": {
                        "value": 41049094,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Libya</span><br />Population : 41049094"
                        }
                    },
                    "LI": {
                        "value": 30119464,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Liechtenstein</span><br />Population : 30119464"
                        }
                    },
                    "LT": {
                        "value": 9647659,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Lithuania</span><br />Population : 9647659"
                        }
                    },
                    "LU": {
                        "value": 31022498,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Luxembourg</span><br />Population : 31022498"
                        }
                    },
                    "MK": {
                        "value": 50050180,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Macedonia, The Former Yugoslav Republic Of</span><br />Population : 50050180"
                        }
                    },
                    "MG": {
                        "value": 26631634,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Madagascar</span><br />Population : 26631634"
                        }
                    },
                    "MY": {
                        "value": 7592984,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malaysia</span><br />Population : 7592984"
                        }
                    },
                    "MW": {
                        "value": 50406641,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malawi</span><br />Population : 50406641"
                        }
                    },
                    "MV": {
                        "value": 55190525,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Maldives</span><br />Population : 55190525"
                        }
                    },
                    "ML": {
                        "value": 21622906,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mali</span><br />Population : 21622906"
                        }
                    },
                    "MT": {
                        "value": 19460379,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Malta</span><br />Population : 19460379"
                        }
                    },
                    "MA": {
                        "value": 29896448,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Morocco</span><br />Population : 29896448"
                        }
                    },
                    "MU": {
                        "value": 24648251,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mauritius</span><br />Population : 24648251"
                        }
                    },
                    "MR": {
                        "value": 20708905,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mauritania</span><br />Population : 20708905"
                        }
                    },
                    "MX": {
                        "value": 58352970,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mexico</span><br />Population : 58352970"
                        }
                    },
                    "FM": {
                        "value": 20032544,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Micronesia, Federated States Of</span><br />Population : 20032544"
                        }
                    },
                    "MD": {
                        "value": 16451486,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Moldova, Republic Of</span><br />Population : 16451486"
                        }
                    },
                    "MC": {
                        "value": 59455256,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Monaco</span><br />Population : 59455256"
                        }
                    },
                    "MN": {
                        "value": 47523880,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mongolia</span><br />Population : 47523880"
                        }
                    },
                    "ME": {
                        "value": 41405554,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Montenegro</span><br />Population : 41405554"
                        }
                    },
                    "MZ": {
                        "value": 58678354,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Mozambique</span><br />Population : 58678354"
                        }
                    },
                    "NA": {
                        "value": 23677582,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Namibia</span><br />Population : 23677582"
                        }
                    },
                    "NP": {
                        "value": 59976236,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nepal</span><br />Population : 59976236"
                        }
                    },
                    "NI": {
                        "value": 24756103,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nicaragua</span><br />Population : 24756103"
                        }
                    },
                    "NE": {
                        "value": 29656979,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Niger</span><br />Population : 29656979"
                        }
                    },
                    "NG": {
                        "value": 8841510,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Nigeria</span><br />Population : 8841510"
                        }
                    },
                    "NO": {
                        "value": 18963162,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Norway</span><br />Population : 18963162"
                        }
                    },
                    "NZ": {
                        "value": 50574817,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">New Zealand</span><br />Population : 50574817"
                        }
                    },
                    "OM": {
                        "value": 17365487,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Oman</span><br />Population : 17365487"
                        }
                    },
                    "UG": {
                        "value": 20562665,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uganda</span><br />Population : 20562665"
                        }
                    },
                    "UZ": {
                        "value": 57387784,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uzbekistan</span><br />Population : 57387784"
                        }
                    },
                    "PK": {
                        "value": 49602320,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Pakistan</span><br />Population : 49602320"
                        }
                    },
                    "PS": {
                        "value": 19932004,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Palestine, State Of</span><br />Population : 19932004"
                        }
                    },
                    "PA": {
                        "value": 34506671,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Panama</span><br />Population : 34506671"
                        }
                    },
                    "PG": {
                        "value": 38603226,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Papua New Guinea</span><br />Population : 38603226"
                        }
                    },
                    "PY": {
                        "value": 42429236,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Paraguay</span><br />Population : 42429236"
                        }
                    },
                    "NL": {
                        "value": 5534652,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Netherlands</span><br />Population : 5534652"
                        }
                    },
                    "PE": {
                        "value": 56289154,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Peru</span><br />Population : 56289154"
                        }
                    },
                    "PH": {
                        "value": 35612613,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Philippines</span><br />Population : 35612613"
                        }
                    },
                    "PL": {
                        "value": 19696191,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Poland</span><br />Population : 19696191"
                        }
                    },
                    "PT": {
                        "value": 32201559,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Portugal</span><br />Population : 32201559"
                        }
                    },
                    "QA": {
                        "value": 1675738,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Qatar</span><br />Population : 1675738"
                        }
                    },
                    "DO": {
                        "value": 31569070,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Dominican Republic</span><br />Population : 31569070"
                        }
                    },
                    "RO": {
                        "value": 1993811,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Romania</span><br />Population : 1993811"
                        }
                    },
                    "GB": {
                        "value": 8210849,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">United Kingdom</span><br />Population : 8210849"
                        }
                    },
                    "RU": {
                        "value": 55982050,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Russian Federation</span><br />Population : 55982050"
                        }
                    },
                    "RW": {
                        "value": 39575723,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Rwanda</span><br />Population : 39575723"
                        }
                    },
                    "KN": {
                        "value": 39862720,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Kitts And Nevis</span><br />Population : 39862720"
                        }
                    },
                    "SM": {
                        "value": 51490647,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">San Marino</span><br />Population : 51490647"
                        }
                    },
                    "VC": {
                        "value": 15173712,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Vincent And The Grenadines</span><br />Population : 15173712"
                        }
                    },
                    "LC": {
                        "value": 42785697,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Saint Lucia</span><br />Population : 42785697"
                        }
                    },
                    "SV": {
                        "value": 34093543,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">El Salvador</span><br />Population : 34093543"
                        }
                    },
                    "WS": {
                        "value": 10419076,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Samoa</span><br />Population : 10419076"
                        }
                    },
                    "ST": {
                        "value": 4666351,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sao Tome And Principe</span><br />Population : 4666351"
                        }
                    },
                    "SN": {
                        "value": 54302115,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Senegal</span><br />Population : 54302115"
                        }
                    },
                    "RS": {
                        "value": 35226904,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Serbia</span><br />Population : 35226904"
                        }
                    },
                    "SC": {
                        "value": 2924264,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Seychelles</span><br />Population : 2924264"
                        }
                    },
                    "SL": {
                        "value": 125592,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sierra Leone</span><br />Population : 125592"
                        }
                    },
                    "SG": {
                        "value": 57278104,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Singapore</span><br />Population : 57278104"
                        }
                    },
                    "SK": {
                        "value": 3953430,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Slovakia</span><br />Population : 3953430"
                        }
                    },
                    "SI": {
                        "value": 57084336,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Slovenia</span><br />Population : 57084336"
                        }
                    },
                    "SO": {
                        "value": 7167059,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Somalia</span><br />Population : 7167059"
                        }
                    },
                    "SD": {
                        "value": 4916787,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sudan</span><br />Population : 4916787"
                        }
                    },
                    "SS": {
                        "value": 50713745,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">South Sudan</span><br />Population : 50713745"
                        }
                    },
                    "LK": {
                        "value": 51227414,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sri Lanka</span><br />Population : 51227414"
                        }
                    },
                    "SE": {
                        "value": 1456378,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Sweden</span><br />Population : 1456378"
                        }
                    },
                    "CH": {
                        "value": 171292,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Switzerland</span><br />Population : 171292"
                        }
                    },
                    "SR": {
                        "value": 16398474,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Suriname</span><br />Population : 16398474"
                        }
                    },
                    "SZ": {
                        "value": 13431625,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Swaziland</span><br />Population : 13431625"
                        }
                    },
                    "SY": {
                        "value": 48509174,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Syrian Arab Republic</span><br />Population : 48509174"
                        }
                    },
                    "TJ": {
                        "value": 56144742,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tajikistan</span><br />Population : 56144742"
                        }
                    },
                    "TZ": {
                        "value": 11448242,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tanzania, United Republic Of</span><br />Population : 11448242"
                        }
                    },
                    "TD": {
                        "value": 1725094,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Chad</span><br />Population : 1725094"
                        }
                    },
                    "CZ": {
                        "value": 4191070,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Czech Republic</span><br />Population : 4191070"
                        }
                    },
                    "TH": {
                        "value": 36190262,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Thailand</span><br />Population : 36190262"
                        }
                    },
                    "TL": {
                        "value": 56453675,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Timor-leste</span><br />Population : 56453675"
                        }
                    },
                    "TG": {
                        "value": 44185947,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Togo</span><br />Population : 44185947"
                        }
                    },
                    "TO": {
                        "value": 53817694,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tonga</span><br />Population : 53817694"
                        }
                    },
                    "TT": {
                        "value": 13310977,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Trinidad And Tobago</span><br />Population : 13310977"
                        }
                    },
                    "TN": {
                        "value": 22255395,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tunisia</span><br />Population : 22255395"
                        }
                    },
                    "TM": {
                        "value": 19142306,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Turkmenistan</span><br />Population : 19142306"
                        }
                    },
                    "TR": {
                        "value": 53254670,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Turkey</span><br />Population : 53254670"
                        }
                    },
                    "TV": {
                        "value": 30560013,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Tuvalu</span><br />Population : 30560013"
                        }
                    },
                    "VU": {
                        "value": 49244031,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Vanuatu</span><br />Population : 49244031"
                        }
                    },
                    "VE": {
                        "value": 14572299,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Venezuela, Bolivarian Republic Of</span><br />Population : 14572299"
                        }
                    },
                    "VN": {
                        "value": 8117620,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Viet Nam</span><br />Population : 8117620"
                        }
                    },
                    "UA": {
                        "value": 41140494,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Ukraine</span><br />Population : 41140494"
                        }
                    },
                    "UY": {
                        "value": 8260205,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Uruguay</span><br />Population : 8260205"
                        }
                    },
                    "YE": {
                        "value": 28604050,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Yemen</span><br />Population : 28604050"
                        }
                    },
                    "ZM": {
                        "value": 13872174,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Zambia</span><br />Population : 13872174"
                        }
                    },
                    "ZW": {
                        "value": 28205545,
                        "tooltip": {
                            "content": "<span style=\"font-weight:bold;\">Zimbabwe</span><br />Population : 28205545"
                        }
                    }
                }
            }
        };
    }
    /* tslint:enable */
    FakeWorldData.prototype.getFakeWorldData = function () {
        return this.fakeWorldData;
    };
    return FakeWorldData;
}());
exports.FakeWorldData = FakeWorldData;


/***/ },

/***/ "./src/app/widgets/years-map-widget/years-map-widget.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var app_config_1 = __webpack_require__("./src/app/app.config.ts");
var fake_world_data_service_1 = __webpack_require__("./src/app/widgets/years-map-widget/fake-world-data.service.ts");
var YearsMapWidget = (function () {
    function YearsMapWidget(config, fakeWorld) {
        this.fakeWorldData = fakeWorld.getFakeWorldData();
        this.configFn = config;
        this.config = config.getConfig();
        this.selectedYear = 2009;
    }
    YearsMapWidget.prototype.triggerYear = function (year) {
        this.selectedYear = year;
        var $map = jQuery('[mapael-layers-map]');
        $map.trigger('update', [this.fakeWorldData[year], {}, {}, { animDuration: 300 }]);
    };
    YearsMapWidget.prototype.ngOnInit = function () {
        /* tslint:disable */
        this.data = {
            map: {
                name: 'world_countries',
                defaultArea: {
                    attrs: {
                        fill: this.config.settings.colors['gray-lighter'],
                        stroke: this.config.settings.colors['gray'],
                        "stroke-width": .1
                    },
                    attrsHover: {
                        fill: this.config.settings.colors['gray-light'],
                        animDuration: 100
                    }
                },
                defaultPlot: {
                    size: 17,
                    attrs: {
                        fill: this.config.settings.colors['brand-warning'],
                        stroke: '#fff',
                        "stroke-width": 0,
                        "stroke-linejoin": 'round'
                    },
                    attrsHover: {
                        "stroke-width": 1,
                        animDuration: 100
                    }
                },
                zoom: {
                    enabled: true,
                    step: 1,
                    maxLevel: 10,
                    mousewheel: false
                }
            },
            legend: {
                area: {
                    display: false,
                    slices: [
                        {
                            max: 5000000,
                            attrs: {
                                fill: this.configFn.lightenColor('#ebeff1', .04)
                            },
                            label: 'Less than 5M'
                        },
                        {
                            min: 5000000,
                            max: 10000000,
                            attrs: {
                                fill: '#ebeff1'
                            },
                            label: 'Between 5M and 10M'
                        },
                        {
                            min: 10000000,
                            max: 50000000,
                            attrs: {
                                fill: this.config.settings.colors['gray-lighter']
                            },
                            label: 'Between 10M and 50M'
                        },
                        {
                            min: 50000000,
                            attrs: {
                                fill: this.configFn.darkenColor('#ebeff1', .1)
                            },
                            label: 'More than 50M'
                        }
                    ]
                }
            },
            areas: this.fakeWorldData[this.selectedYear]['areas']
        };
        var coords = jQuery.fn.mapael.maps['world_countries'].getCoords(59.599254, 8.863224);
        /* tslint:enable */
        this.zoom = [6, coords.x, coords.y];
    };
    YearsMapWidget = __decorate([
        core_1.Component({
            selector: '[years-map-widget]',
            template: __webpack_require__("./src/app/widgets/years-map-widget/years-map-widget.template.html"),
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof app_config_1.AppConfig !== 'undefined' && app_config_1.AppConfig) === 'function' && _a) || Object, (typeof (_b = typeof fake_world_data_service_1.FakeWorldData !== 'undefined' && fake_world_data_service_1.FakeWorldData) === 'function' && _b) || Object])
    ], YearsMapWidget);
    return YearsMapWidget;
    var _a, _b;
}());
exports.YearsMapWidget = YearsMapWidget;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ },

/***/ "./src/app/widgets/years-map-widget/years-map-widget.template.html":
/***/ function(module, exports) {

module.exports = "<div mapael-layers-map [data]=\"data\" [zoom]=\"zoom\" class=\"mapael\">\r\n  <div class=\"stats\">\r\n    <h6 class=\"text-gray-dark\">YEARLY <span class=\"fw-semi-bold\">DISTRIBUTIONS</span></h6>\r\n                        <span class=\"pull-left mr-xs\">\r\n                            <small><span class=\"circle bg-warning text-gray-dark\"><i class=\"fa fa-plus\"></i></span></small>\r\n                        </span>\r\n    <p class=\"h4 no-margin\">\r\n      <strong>17% last year</strong>\r\n    </p>\r\n  </div>\r\n  <div class=\"map\">\r\n    <span>Alternative content for the map</span>\r\n  </div>\r\n  <ul class=\"map-controls nav nav-pills nav-justified\">\r\n    <li class=\"nav-item\" [ngClass]=\"{'active': selectedYear == 2008}\">\r\n      <a class=\"nav-link\" href=\"#\" (click)=\"triggerYear(2008)\">2008</a>\r\n    </li>\r\n    <li class=\"nav-item\" [ngClass]=\"{'active': selectedYear == 2009}\">\r\n      <a class=\"nav-link\" href=\"#\" (click)=\"triggerYear(2009)\">2009</a>\r\n    </li>\r\n    <li class=\"nav-item\" [ngClass]=\"{'active': selectedYear == 2010}\">\r\n      <a class=\"nav-link\" href=\"#\" (click)=\"triggerYear(2010)\">2010</a>\r\n    </li>\r\n    <li class=\"nav-item\" [ngClass]=\"{'active': selectedYear == 2011}\">\r\n      <a class=\"nav-link\" href=\"#\" (click)=\"triggerYear(2011)\">2011</a>\r\n    </li>\r\n    <li class=\"nav-item\" [ngClass]=\"{'active': selectedYear == 2012}\">\r\n      <a class=\"nav-link\" href=\"#\" (click)=\"triggerYear(2012)\">2012</a>\r\n    </li>\r\n    <li class=\"nav-item\" [ngClass]=\"{'active': selectedYear == 2013}\">\r\n      <a class=\"nav-link\" href=\"#\" (click)=\"triggerYear(2013)\">2013</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n"

/***/ }

});
//# sourceMappingURL=8.map